{
    "name": "exoscale",
    "displayName": "Exoscale",
    "description": "A Pulumi package for creating and managing exoscale cloud resources.",
    "keywords": [
        "pulumi",
        "exoscale",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`exoscale` Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale).",
    "repository": "https://github.com/pulumiverse/pulumi-exoscale",
    "pluginDownloadURL": "github://api.github.com/pulumiverse/pulumi-exoscale",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/exoscale",
            "packageDescription": "A Pulumi package for creating and managing exoscale cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-exoscale` repo](https://github.com/pulumiverse/pulumi-exoscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-exoscale` repo](https://github.com/exoscale/terraform-provider-exoscale/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_exoscale",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/exoscale/terraform-provider-exoscale)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-exoscale` repo](https://github.com/pulumiverse/pulumi-exoscale/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-exoscale` repo](https://github.com/exoscale/terraform-provider-exoscale/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n",
                "language": {
                    "csharp": {
                        "name": "CloudStackIniConfig"
                    }
                }
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n",
                "defaultInfo": {
                    "environment": [
                        "EXOSCALE_API_KEY"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n",
                "defaultInfo": {
                    "environment": [
                        "EXOSCALE_API_SECRET"
                    ]
                },
                "secret": true
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        }
    },
    "types": {
        "exoscale:index/DatabaseGrafana:DatabaseGrafana": {
            "properties": {
                "grafanaSettings": {
                    "type": "string",
                    "description": "Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).\n"
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "grafanaSettings",
                        "ipFilters"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseKafka:DatabaseKafka": {
            "properties": {
                "enableCertAuth": {
                    "type": "boolean",
                    "description": "Enable certificate-based authentication method.\n"
                },
                "enableKafkaConnect": {
                    "type": "boolean",
                    "description": "Enable Kafka Connect.\n"
                },
                "enableKafkaRest": {
                    "type": "boolean",
                    "description": "Enable Kafka REST.\n"
                },
                "enableSaslAuth": {
                    "type": "boolean",
                    "description": "Enable SASL-based authentication method.\n"
                },
                "enableSchemaRegistry": {
                    "type": "boolean",
                    "description": "Enable Schema Registry.\n"
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n"
                },
                "kafkaConnectSettings": {
                    "type": "string",
                    "description": "Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).\n"
                },
                "kafkaRestSettings": {
                    "type": "string",
                    "description": "Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).\n"
                },
                "kafkaSettings": {
                    "type": "string",
                    "description": "Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).\n"
                },
                "schemaRegistrySettings": {
                    "type": "string",
                    "description": "Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)\n"
                },
                "version": {
                    "type": "string",
                    "description": "Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enableCertAuth",
                        "enableKafkaConnect",
                        "enableKafkaRest",
                        "enableSaslAuth",
                        "enableSchemaRegistry",
                        "ipFilters",
                        "kafkaConnectSettings",
                        "kafkaRestSettings",
                        "kafkaSettings",
                        "schemaRegistrySettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseMysql:DatabaseMysql": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "A custom administrator account password (may only be set at creation time).\n",
                    "secret": true
                },
                "adminUsername": {
                    "type": "string",
                    "description": "A custom administrator account username (may only be set at creation time).\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The automated backup schedule (`HH:MM`).\n"
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n"
                },
                "mysqlSettings": {
                    "type": "string",
                    "description": "MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).\n"
                },
                "version": {
                    "type": "string",
                    "description": "MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupSchedule",
                        "ipFilters",
                        "mysqlSettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseOpensearch:DatabaseOpensearch": {
            "properties": {
                "dashboards": {
                    "$ref": "#/types/exoscale:index/DatabaseOpensearchDashboards:DatabaseOpensearchDashboards",
                    "description": "OpenSearch Dashboards settings\n"
                },
                "forkFromService": {
                    "type": "string",
                    "description": "❗ Service name\n"
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/exoscale:index/DatabaseOpensearchIndexPattern:DatabaseOpensearchIndexPattern"
                    },
                    "description": "(can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.\n"
                },
                "indexTemplate": {
                    "$ref": "#/types/exoscale:index/DatabaseOpensearchIndexTemplate:DatabaseOpensearchIndexTemplate",
                    "description": "Template settings for all new indexes\n"
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allow incoming connections from this list of CIDR address block, e.g. `[\"10.20.0.0/16\"]\n"
                },
                "keepIndexRefreshInterval": {
                    "type": "boolean",
                    "description": "Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.\n"
                },
                "maxIndexCount": {
                    "type": "integer",
                    "description": "Maximum number of indexes to keep (Minimum value is `0`)\n"
                },
                "recoveryBackupName": {
                    "type": "string",
                    "description": "❗ Name of a backup to recover from\n"
                },
                "settings": {
                    "type": "string",
                    "description": "OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.\n"
                },
                "version": {
                    "type": "string",
                    "description": "❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipFilters",
                        "settings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseOpensearchDashboards:DatabaseOpensearchDashboards": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "maxOldSpaceSize": {
                    "type": "integer"
                },
                "requestTimeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "exoscale:index/DatabaseOpensearchIndexPattern:DatabaseOpensearchIndexPattern": {
            "properties": {
                "maxIndexCount": {
                    "type": "integer"
                },
                "pattern": {
                    "type": "string"
                },
                "sortingAlgorithm": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "exoscale:index/DatabaseOpensearchIndexTemplate:DatabaseOpensearchIndexTemplate": {
            "properties": {
                "mappingNestedObjectsLimit": {
                    "type": "integer"
                },
                "numberOfReplicas": {
                    "type": "integer"
                },
                "numberOfShards": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "exoscale:index/DatabasePg:DatabasePg": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "A custom administrator account password (may only be set at creation time).\n",
                    "secret": true
                },
                "adminUsername": {
                    "type": "string",
                    "description": "A custom administrator account username (may only be set at creation time).\n"
                },
                "backupSchedule": {
                    "type": "string",
                    "description": "The automated backup schedule (`HH:MM`).\n"
                },
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n"
                },
                "pgSettings": {
                    "type": "string",
                    "description": "PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).\n"
                },
                "pgbouncerSettings": {
                    "type": "string",
                    "description": "PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).\n"
                },
                "pglookoutSettings": {
                    "type": "string",
                    "description": "pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).\n"
                },
                "version": {
                    "type": "string",
                    "description": "PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupSchedule",
                        "ipFilters",
                        "pgSettings",
                        "pgbouncerSettings",
                        "pglookoutSettings",
                        "version"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseRedis:DatabaseRedis": {
            "properties": {
                "ipFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks to allow incoming connections from.\n"
                },
                "redisSettings": {
                    "type": "string",
                    "description": "Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipFilters",
                        "redisSettings"
                    ]
                }
            }
        },
        "exoscale:index/DatabaseTimeouts:DatabaseTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "exoscale:index/getDatabaseURITimeouts:getDatabaseURITimeouts": {
            "properties": {
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                }
            },
            "type": "object"
        },
        "exoscale:index/getNLBServiceListService:getNLBServiceListService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "NLB service description.\n"
                },
                "healthcheck": {
                    "$ref": "#/types/exoscale:index/getNLBServiceListServiceHealthcheck:getNLBServiceListServiceHealthcheck"
                },
                "id": {
                    "type": "string",
                    "description": "NLB service ID.\n"
                },
                "instancePoolId": {
                    "type": "string",
                    "description": "The exoscale*instance*pool (ID) to forward traffic to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NLB Service name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port exposed on the NLB's public IP.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Network traffic protocol.\n"
                },
                "state": {
                    "type": "string",
                    "description": "NLB Service State.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The strategy (`round-robin`|`source-hash`).\n"
                },
                "targetPort": {
                    "type": "integer",
                    "description": "Port on which the network traffic will be forwarded to on the receiving instance.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "healthcheck",
                "id",
                "instancePoolId",
                "name",
                "port",
                "protocol",
                "state",
                "strategy",
                "targetPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "exoscale:index/getNLBServiceListServiceHealthcheck:getNLBServiceListServiceHealthcheck": {
            "properties": {
                "interval": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "retries": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "tlsSni": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "interval",
                "mode",
                "port",
                "retries",
                "timeout",
                "tlsSni",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "exoscale:index/getNLBServiceListTimeouts:getNLBServiceListTimeouts": {
            "properties": {
                "read": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.\n"
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the exoscale package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n",
                "language": {
                    "csharp": {
                        "name": "CloudStackIniConfig"
                    }
                }
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n",
                "secret": true
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n",
                "secret": true
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        },
        "inputProperties": {
            "computeEndpoint": {
                "type": "string",
                "description": "Exoscale CloudStack API endpoint (by default: https://api.exoscale.com/v1)\n"
            },
            "config": {
                "type": "string",
                "description": "CloudStack ini configuration filename (by default: cloudstack.ini)\n",
                "language": {
                    "csharp": {
                        "name": "CloudStackIniConfig"
                    }
                }
            },
            "delay": {
                "type": "integer",
                "deprecationMessage": "Does nothing"
            },
            "dnsEndpoint": {
                "type": "string",
                "description": "Exoscale DNS API endpoint (by default: https://api.exoscale.com/dns)\n"
            },
            "environment": {
                "type": "string"
            },
            "key": {
                "type": "string",
                "description": "Exoscale API key\n",
                "defaultInfo": {
                    "environment": [
                        "EXOSCALE_API_KEY"
                    ]
                },
                "secret": true
            },
            "profile": {
                "type": "string",
                "deprecationMessage": "Use region instead"
            },
            "region": {
                "type": "string",
                "description": "CloudStack ini configuration section name (by default: cloudstack)\n"
            },
            "secret": {
                "type": "string",
                "description": "Exoscale API secret\n",
                "defaultInfo": {
                    "environment": [
                        "EXOSCALE_API_SECRET"
                    ]
                },
                "secret": true
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds for waiting on compute resources to become available (by default: 300)\n"
            },
            "token": {
                "type": "string",
                "deprecationMessage": "Use key instead"
            }
        }
    },
    "resources": {
        "exoscale:index/database:Database": {
            "description": "\n\n\n## Import\n\nAn existing database service may be imported by `\u003cname\u003e@\u003czone\u003e`\n\n```sh\n $ pulumi import exoscale:index/database:Database \\\n```\n\n\n\n exoscale_database.my_database \\\n\n my-database@ch-gva-2 ",
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "CA Certificate required to reach a DBaaS service through a TLS-protected connection.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the database service.\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The disk size of the database service.\n"
                },
                "grafana": {
                    "$ref": "#/types/exoscale:index/DatabaseGrafana:DatabaseGrafana",
                    "description": "*grafana* database service type specific arguments. Structure is documented below.\n"
                },
                "kafka": {
                    "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                    "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                },
                "maintenanceDow": {
                    "type": "string",
                    "description": "The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The time of day to perform the automated database service maintenance (`HH:MM:SS`)\n"
                },
                "mysql": {
                    "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                    "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "❗ The name of the database service.\n"
                },
                "nodeCpus": {
                    "type": "integer",
                    "description": "The number of CPUs of the database service.\n"
                },
                "nodeMemory": {
                    "type": "integer",
                    "description": "The amount of memory of the database service.\n"
                },
                "nodes": {
                    "type": "integer",
                    "description": "The number of nodes of the database service.\n"
                },
                "opensearch": {
                    "$ref": "#/types/exoscale:index/DatabaseOpensearch:DatabaseOpensearch",
                    "description": "*opensearch* database service type specific arguments. Structure is documented below.\n"
                },
                "pg": {
                    "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                    "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show \u003cTYPE\u003e --plans` - for reference).\n"
                },
                "redis": {
                    "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                    "description": "*redis* database service type specific arguments. Structure is documented below.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the database service.\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "The database service protection boolean flag against termination/power-off.\n"
                },
                "timeouts": {
                    "$ref": "#/types/exoscale:index/DatabaseTimeouts:DatabaseTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `grafana`).\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date of the latest database service update.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.\n"
                }
            },
            "required": [
                "caCertificate",
                "createdAt",
                "diskSize",
                "maintenanceDow",
                "maintenanceTime",
                "name",
                "nodeCpus",
                "nodeMemory",
                "nodes",
                "plan",
                "state",
                "terminationProtection",
                "type",
                "updatedAt",
                "zone"
            ],
            "inputProperties": {
                "grafana": {
                    "$ref": "#/types/exoscale:index/DatabaseGrafana:DatabaseGrafana",
                    "description": "*grafana* database service type specific arguments. Structure is documented below.\n"
                },
                "kafka": {
                    "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                    "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                },
                "maintenanceDow": {
                    "type": "string",
                    "description": "The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                },
                "maintenanceTime": {
                    "type": "string",
                    "description": "The time of day to perform the automated database service maintenance (`HH:MM:SS`)\n"
                },
                "mysql": {
                    "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                    "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "❗ The name of the database service.\n"
                },
                "opensearch": {
                    "$ref": "#/types/exoscale:index/DatabaseOpensearch:DatabaseOpensearch",
                    "description": "*opensearch* database service type specific arguments. Structure is documented below.\n"
                },
                "pg": {
                    "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                    "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show \u003cTYPE\u003e --plans` - for reference).\n"
                },
                "redis": {
                    "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                    "description": "*redis* database service type specific arguments. Structure is documented below.\n"
                },
                "terminationProtection": {
                    "type": "boolean",
                    "description": "The database service protection boolean flag against termination/power-off.\n"
                },
                "timeouts": {
                    "$ref": "#/types/exoscale:index/DatabaseTimeouts:DatabaseTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `grafana`).\n"
                },
                "zone": {
                    "type": "string",
                    "description": "❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.\n"
                }
            },
            "requiredInputs": [
                "plan",
                "type",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "caCertificate": {
                        "type": "string",
                        "description": "CA Certificate required to reach a DBaaS service through a TLS-protected connection.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the database service.\n"
                    },
                    "diskSize": {
                        "type": "integer",
                        "description": "The disk size of the database service.\n"
                    },
                    "grafana": {
                        "$ref": "#/types/exoscale:index/DatabaseGrafana:DatabaseGrafana",
                        "description": "*grafana* database service type specific arguments. Structure is documented below.\n"
                    },
                    "kafka": {
                        "$ref": "#/types/exoscale:index/DatabaseKafka:DatabaseKafka",
                        "description": "*kafka* database service type specific arguments. Structure is documented below.\n"
                    },
                    "maintenanceDow": {
                        "type": "string",
                        "description": "The day of week to perform the automated database service maintenance (`never`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`).\n"
                    },
                    "maintenanceTime": {
                        "type": "string",
                        "description": "The time of day to perform the automated database service maintenance (`HH:MM:SS`)\n"
                    },
                    "mysql": {
                        "$ref": "#/types/exoscale:index/DatabaseMysql:DatabaseMysql",
                        "description": "*mysql* database service type specific arguments. Structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "❗ The name of the database service.\n"
                    },
                    "nodeCpus": {
                        "type": "integer",
                        "description": "The number of CPUs of the database service.\n"
                    },
                    "nodeMemory": {
                        "type": "integer",
                        "description": "The amount of memory of the database service.\n"
                    },
                    "nodes": {
                        "type": "integer",
                        "description": "The number of nodes of the database service.\n"
                    },
                    "opensearch": {
                        "$ref": "#/types/exoscale:index/DatabaseOpensearch:DatabaseOpensearch",
                        "description": "*opensearch* database service type specific arguments. Structure is documented below.\n"
                    },
                    "pg": {
                        "$ref": "#/types/exoscale:index/DatabasePg:DatabasePg",
                        "description": "*pg* database service type specific arguments. Structure is documented below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan of the database service (use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo dbaas type show \u003cTYPE\u003e --plans` - for reference).\n"
                    },
                    "redis": {
                        "$ref": "#/types/exoscale:index/DatabaseRedis:DatabaseRedis",
                        "description": "*redis* database service type specific arguments. Structure is documented below.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the database service.\n"
                    },
                    "terminationProtection": {
                        "type": "boolean",
                        "description": "The database service protection boolean flag against termination/power-off.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/exoscale:index/DatabaseTimeouts:DatabaseTimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "❗ The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`, `grafana`).\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date of the latest database service update.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "exoscale:index/getDatabaseURI:getDatabaseURI": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.exoscale.Database;\nimport com.pulumi.exoscale.DatabaseArgs;\nimport com.pulumi.exoscale.ExoscaleFunctions;\nimport com.pulumi.exoscale.inputs.GetDatabaseURIArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDatabaseDatabase = new Database(\"myDatabaseDatabase\", DatabaseArgs.builder()        \n            .zone(\"ch-gva-2\")\n            .type(\"pg\")\n            .plan(\"startup-4\")\n            .maintenanceDow(\"sunday\")\n            .maintenanceTime(\"23:00:00\")\n            .terminationProtection(true)\n            .pg(DatabasePgArgs.builder()\n                .version(\"13\")\n                .backupSchedule(\"04:00\")\n                .ipFilters(                \n                    \"1.2.3.4/32\",\n                    \"5.6.7.8/32\")\n                .pgSettings(serializeJson(\n                    jsonObject(\n                        jsonProperty(\"timezone\", \"Europe/Zurich\")\n                    )))\n                .build())\n            .build());\n\n        final var myDatabaseDatabaseURI = ExoscaleFunctions.getDatabaseURI(GetDatabaseURIArgs.builder()\n            .name(\"my-database\")\n            .type(\"pg\")\n            .zone(\"ch-gva-2\")\n            .build());\n\n        ctx.export(\"myDatabaseUri\", myDatabaseDatabaseURI.applyValue(getDatabaseURIResult -\u003e getDatabaseURIResult.uri()));\n    }\n}\n```\n```yaml\nresources:\n  myDatabaseDatabase:\n    type: exoscale:Database\n    properties:\n      zone: ch-gva-2\n      type: pg\n      plan: startup-4\n      maintenanceDow: sunday\n      maintenanceTime: 23:00:00\n      terminationProtection: true\n      pg:\n        - version: '13'\n          backupSchedule: 04:00\n          ipFilters:\n            - 1.2.3.4/32\n            - 5.6.7.8/32\n          pgSettings:\n            fn::toJSON:\n              timezone: Europe/Zurich\nvariables:\n  myDatabaseDatabaseURI:\n    fn::invoke:\n      Function: exoscale:getDatabaseURI\n      Arguments:\n        name: my-database\n        type: pg\n        zone: ch-gva-2\noutputs:\n  myDatabaseUri: ${myDatabaseDatabaseURI.uri}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseURI.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The database name to match.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/exoscale:index/getDatabaseURITimeouts:getDatabaseURITimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The Exoscale Zone name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseURI.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The database name to match.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/exoscale:index/getDatabaseURITimeouts:getDatabaseURITimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).\n"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The database service connection URI.\n",
                        "secret": true
                    },
                    "zone": {
                        "type": "string",
                        "description": "The Exoscale Zone name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type",
                    "uri",
                    "zone"
                ]
            }
        },
        "exoscale:index/getNLBServiceList:getNLBServiceList": {
            "inputs": {
                "description": "A collection of arguments for invoking getNLBServiceList.\n",
                "properties": {
                    "nlbId": {
                        "type": "string",
                        "description": "The NLB ID to match (conflicts with `name`).\n"
                    },
                    "nlbName": {
                        "type": "string",
                        "description": "The NLB name to match (conflicts with `id`).\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/exoscale:index/getNLBServiceListTimeouts:getNLBServiceListTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "zone"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNLBServiceList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "nlbId": {
                        "type": "string",
                        "description": "The NLB ID to match (conflicts with `name`).\n"
                    },
                    "nlbName": {
                        "type": "string",
                        "description": "The NLB name to match (conflicts with `id`).\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/exoscale:index/getNLBServiceListService:getNLBServiceListService"
                        },
                        "description": "The list of exoscale*nlb*service.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/exoscale:index/getNLBServiceListTimeouts:getNLBServiceListTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "services",
                    "zone"
                ]
            }
        },
        "exoscale:index/getZones:getZones": {
            "outputs": {
                "description": "A collection of values returned by getZones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of zones\n"
                    }
                },
                "type": "object",
                "required": [
                    "zones",
                    "id"
                ]
            }
        }
    }
}