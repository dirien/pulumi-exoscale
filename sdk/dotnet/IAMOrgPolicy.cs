// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    [ExoscaleResourceType("exoscale:index/iAMOrgPolicy:IAMOrgPolicy")]
    public partial class IAMOrgPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Default service strategy (`allow` or `deny`).
        /// </summary>
        [Output("defaultServiceStrategy")]
        public Output<string> DefaultServiceStrategy { get; private set; } = null!;

        /// <summary>
        /// IAM policy services.
        /// </summary>
        [Output("services")]
        public Output<ImmutableDictionary<string, Outputs.IAMOrgPolicyServices>> Services { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.IAMOrgPolicyTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a IAMOrgPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IAMOrgPolicy(string name, IAMOrgPolicyArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/iAMOrgPolicy:IAMOrgPolicy", name, args ?? new IAMOrgPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IAMOrgPolicy(string name, Input<string> id, IAMOrgPolicyState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/iAMOrgPolicy:IAMOrgPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-exoscale",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IAMOrgPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IAMOrgPolicy Get(string name, Input<string> id, IAMOrgPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new IAMOrgPolicy(name, id, state, options);
        }
    }

    public sealed class IAMOrgPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default service strategy (`allow` or `deny`).
        /// </summary>
        [Input("defaultServiceStrategy", required: true)]
        public Input<string> DefaultServiceStrategy { get; set; } = null!;

        [Input("services", required: true)]
        private InputMap<Inputs.IAMOrgPolicyServicesArgs>? _services;

        /// <summary>
        /// IAM policy services.
        /// </summary>
        public InputMap<Inputs.IAMOrgPolicyServicesArgs> Services
        {
            get => _services ?? (_services = new InputMap<Inputs.IAMOrgPolicyServicesArgs>());
            set => _services = value;
        }

        [Input("timeouts")]
        public Input<Inputs.IAMOrgPolicyTimeoutsArgs>? Timeouts { get; set; }

        public IAMOrgPolicyArgs()
        {
        }
        public static new IAMOrgPolicyArgs Empty => new IAMOrgPolicyArgs();
    }

    public sealed class IAMOrgPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default service strategy (`allow` or `deny`).
        /// </summary>
        [Input("defaultServiceStrategy")]
        public Input<string>? DefaultServiceStrategy { get; set; }

        [Input("services")]
        private InputMap<Inputs.IAMOrgPolicyServicesGetArgs>? _services;

        /// <summary>
        /// IAM policy services.
        /// </summary>
        public InputMap<Inputs.IAMOrgPolicyServicesGetArgs> Services
        {
            get => _services ?? (_services = new InputMap<Inputs.IAMOrgPolicyServicesGetArgs>());
            set => _services = value;
        }

        [Input("timeouts")]
        public Input<Inputs.IAMOrgPolicyTimeoutsGetArgs>? Timeouts { get; set; }

        public IAMOrgPolicyState()
        {
        }
        public static new IAMOrgPolicyState Empty => new IAMOrgPolicyState();
    }
}
