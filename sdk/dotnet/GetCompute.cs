// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetCompute
    {
        /// <summary>
        /// !&gt; **WARNING:** This data source is **DEPRECATED** and will be removed in the next major version. Please use exoscale.ComputeInstance instead.
        /// </summary>
        public static Task<GetComputeResult> InvokeAsync(GetComputeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeResult>("exoscale:index/getCompute:getCompute", args ?? new GetComputeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; **WARNING:** This data source is **DEPRECATED** and will be removed in the next major version. Please use exoscale.ComputeInstance instead.
        /// </summary>
        public static Output<GetComputeResult> Invoke(GetComputeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeResult>("exoscale:index/getCompute:getCompute", args ?? new GetComputeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The instance hostname to match.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// The compute instance ID to match.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// The instance tags to match (map of key/value).
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetComputeArgs()
        {
        }
        public static new GetComputeArgs Empty => new GetComputeArgs();
    }

    public sealed class GetComputeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The instance hostname to match.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The compute instance ID to match.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The instance tags to match (map of key/value).
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetComputeInvokeArgs()
        {
        }
        public static new GetComputeInvokeArgs Empty => new GetComputeInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeResult
    {
        /// <summary>
        /// Number of cpu the Compute instance is running with
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// Date when the Compute instance was created
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Size of the Compute instance disk
        /// </summary>
        public readonly int DiskSize;
        /// <summary>
        /// The instance hostname to match.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// The compute instance ID to match.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Compute instance public ipv6 address (if ipv6 is enabled)
        /// </summary>
        public readonly string Ip6Address;
        /// <summary>
        /// Compute instance public ipv4 address
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// Memory allocated for the Compute instance
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// List of Compute instance private IP addresses (in managed Private Networks only)
        /// </summary>
        public readonly ImmutableArray<string> PrivateNetworkIpAddresses;
        /// <summary>
        /// Current size of the Compute instance
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// State of the Compute instance
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The instance tags to match (map of key/value).
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Name of the template for the Compute instance
        /// </summary>
        public readonly string Template;
        /// <summary>
        /// Name of the availability zone for the Compute instance
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetComputeResult(
            int cpu,

            string created,

            int diskSize,

            string? hostname,

            string? id,

            string ip6Address,

            string ipAddress,

            int memory,

            ImmutableArray<string> privateNetworkIpAddresses,

            string size,

            string state,

            ImmutableDictionary<string, string>? tags,

            string template,

            string zone)
        {
            Cpu = cpu;
            Created = created;
            DiskSize = diskSize;
            Hostname = hostname;
            Id = id;
            Ip6Address = ip6Address;
            IpAddress = ipAddress;
            Memory = memory;
            PrivateNetworkIpAddresses = privateNetworkIpAddresses;
            Size = size;
            State = state;
            Tags = tags;
            Template = template;
            Zone = zone;
        }
    }
}
