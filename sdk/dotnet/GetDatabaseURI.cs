// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetDatabaseURI
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// using Exoscale = Pulumiverse.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDatabaseDatabase = new Exoscale.Database("myDatabaseDatabase", new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Type = "pg",
        ///         Plan = "startup-4",
        ///         MaintenanceDow = "sunday",
        ///         MaintenanceTime = "23:00:00",
        ///         TerminationProtection = true,
        ///         Pg = new Exoscale.Inputs.DatabasePgArgs
        ///         {
        ///             Version = "13",
        ///             BackupSchedule = "04:00",
        ///             IpFilters = new[]
        ///             {
        ///                 "1.2.3.4/32",
        ///                 "5.6.7.8/32",
        ///             },
        ///             PgSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["timezone"] = "Europe/Zurich",
        ///             }),
        ///         },
        ///     });
        /// 
        ///     var myDatabaseDatabaseURI = Exoscale.GetDatabaseURI.Invoke(new()
        ///     {
        ///         Name = "my-database",
        ///         Type = "pg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myDatabaseUri"] = myDatabaseDatabaseURI.Apply(getDatabaseURIResult =&gt; getDatabaseURIResult.Uri),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseURIResult> InvokeAsync(GetDatabaseURIArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseURIResult>("exoscale:index/getDatabaseURI:getDatabaseURI", args ?? new GetDatabaseURIArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Exoscale = Pulumi.Exoscale;
        /// using Exoscale = Pulumiverse.Exoscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myDatabaseDatabase = new Exoscale.Database("myDatabaseDatabase", new()
        ///     {
        ///         Zone = "ch-gva-2",
        ///         Type = "pg",
        ///         Plan = "startup-4",
        ///         MaintenanceDow = "sunday",
        ///         MaintenanceTime = "23:00:00",
        ///         TerminationProtection = true,
        ///         Pg = new Exoscale.Inputs.DatabasePgArgs
        ///         {
        ///             Version = "13",
        ///             BackupSchedule = "04:00",
        ///             IpFilters = new[]
        ///             {
        ///                 "1.2.3.4/32",
        ///                 "5.6.7.8/32",
        ///             },
        ///             PgSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["timezone"] = "Europe/Zurich",
        ///             }),
        ///         },
        ///     });
        /// 
        ///     var myDatabaseDatabaseURI = Exoscale.GetDatabaseURI.Invoke(new()
        ///     {
        ///         Name = "my-database",
        ///         Type = "pg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["myDatabaseUri"] = myDatabaseDatabaseURI.Apply(getDatabaseURIResult =&gt; getDatabaseURIResult.Uri),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseURIResult> Invoke(GetDatabaseURIInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseURIResult>("exoscale:index/getDatabaseURI:getDatabaseURI", args ?? new GetDatabaseURIInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseURIArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database name to match.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        /// <summary>
        /// (Required) The Exoscale Zone name.
        /// </summary>
        [Input("zone", required: true)]
        public string Zone { get; set; } = null!;

        public GetDatabaseURIArgs()
        {
        }
        public static new GetDatabaseURIArgs Empty => new GetDatabaseURIArgs();
    }

    public sealed class GetDatabaseURIInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database name to match.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// (Required) The Exoscale Zone name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GetDatabaseURIInvokeArgs()
        {
        }
        public static new GetDatabaseURIInvokeArgs Empty => new GetDatabaseURIInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseURIResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The database name to match.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The database service connection URI.
        /// </summary>
        public readonly string Uri;
        /// <summary>
        /// (Required) The Exoscale Zone name.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetDatabaseURIResult(
            string id,

            string name,

            string type,

            string uri,

            string zone)
        {
            Id = id;
            Name = name;
            Type = type;
            Uri = uri;
            Zone = zone;
        }
    }
}
