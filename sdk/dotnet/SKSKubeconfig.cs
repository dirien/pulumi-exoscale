// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    [ExoscaleResourceType("exoscale:index/sKSKubeconfig:SKSKubeconfig")]
    public partial class SKSKubeconfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
        /// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
        /// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
        /// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
        /// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
        /// </summary>
        [Output("earlyRenewalSeconds")]
        public Output<int?> EarlyRenewalSeconds { get; private set; } = null!;

        /// <summary>
        /// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
        /// Organization field.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<string>> Groups { get; private set; } = null!;

        /// <summary>
        /// The generated Kubeconfig (YAML content).
        /// </summary>
        [Output("kubeconfig")]
        public Output<string> Kubeconfig { get; private set; } = null!;

        [Output("readyForRenewal")]
        public Output<bool> ReadyForRenewal { get; private set; } = null!;

        /// <summary>
        /// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
        /// </summary>
        [Output("ttlSeconds")]
        public Output<double?> TtlSeconds { get; private set; } = null!;

        /// <summary>
        /// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
        /// field.
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a SKSKubeconfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SKSKubeconfig(string name, SKSKubeconfigArgs args, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSKubeconfig:SKSKubeconfig", name, args ?? new SKSKubeconfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SKSKubeconfig(string name, Input<string> id, SKSKubeconfigState? state = null, CustomResourceOptions? options = null)
            : base("exoscale:index/sKSKubeconfig:SKSKubeconfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-exoscale",
                AdditionalSecretOutputs =
                {
                    "kubeconfig",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SKSKubeconfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SKSKubeconfig Get(string name, Input<string> id, SKSKubeconfigState? state = null, CustomResourceOptions? options = null)
        {
            return new SKSKubeconfig(name, id, state, options);
        }
    }

    public sealed class SKSKubeconfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
        /// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
        /// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
        /// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
        /// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
        /// </summary>
        [Input("earlyRenewalSeconds")]
        public Input<int>? EarlyRenewalSeconds { get; set; }

        [Input("groups", required: true)]
        private InputList<string>? _groups;

        /// <summary>
        /// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
        /// Organization field.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
        /// </summary>
        [Input("ttlSeconds")]
        public Input<double>? TtlSeconds { get; set; }

        /// <summary>
        /// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
        /// field.
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public SKSKubeconfigArgs()
        {
        }
        public static new SKSKubeconfigArgs Empty => new SKSKubeconfigArgs();
    }

    public sealed class SKSKubeconfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
        /// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
        /// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
        /// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
        /// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
        /// </summary>
        [Input("earlyRenewalSeconds")]
        public Input<int>? EarlyRenewalSeconds { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
        /// Organization field.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("kubeconfig")]
        private Input<string>? _kubeconfig;

        /// <summary>
        /// The generated Kubeconfig (YAML content).
        /// </summary>
        public Input<string>? Kubeconfig
        {
            get => _kubeconfig;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kubeconfig = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("readyForRenewal")]
        public Input<bool>? ReadyForRenewal { get; set; }

        /// <summary>
        /// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
        /// </summary>
        [Input("ttlSeconds")]
        public Input<double>? TtlSeconds { get; set; }

        /// <summary>
        /// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
        /// field.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SKSKubeconfigState()
        {
        }
        public static new SKSKubeconfigState Empty => new SKSKubeconfigState();
    }
}
