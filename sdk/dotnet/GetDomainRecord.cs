// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetDomainRecord
    {
        public static Task<GetDomainRecordResult> InvokeAsync(GetDomainRecordArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainRecordResult>("exoscale:index/getDomainRecord:getDomainRecord", args ?? new GetDomainRecordArgs(), options.WithDefaults());

        public static Output<GetDomainRecordResult> Invoke(GetDomainRecordInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainRecordResult>("exoscale:index/getDomainRecord:getDomainRecord", args ?? new GetDomainRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The exoscale.Domain name to match.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// Filter to apply when looking up domain records. Structure is documented below.
        /// </summary>
        [Input("filter", required: true)]
        public Inputs.GetDomainRecordFilterArgs Filter { get; set; } = null!;

        public GetDomainRecordArgs()
        {
        }
        public static new GetDomainRecordArgs Empty => new GetDomainRecordArgs();
    }

    public sealed class GetDomainRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The exoscale.Domain name to match.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Filter to apply when looking up domain records. Structure is documented below.
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.GetDomainRecordFilterInputArgs> Filter { get; set; } = null!;

        public GetDomainRecordInvokeArgs()
        {
        }
        public static new GetDomainRecordInvokeArgs Empty => new GetDomainRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainRecordResult
    {
        public readonly string Domain;
        public readonly Outputs.GetDomainRecordFilterResult Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of matching records. Structure is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainRecordRecordResult> Records;

        [OutputConstructor]
        private GetDomainRecordResult(
            string domain,

            Outputs.GetDomainRecordFilterResult filter,

            string id,

            ImmutableArray<Outputs.GetDomainRecordRecordResult> records)
        {
            Domain = domain;
            Filter = filter;
            Id = id;
            Records = records;
        }
    }
}
