// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Exoscale
{
    public static class GetIAMRole
    {
        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
        /// 
        /// Corresponding resource: exoscale_iam_role.
        /// </summary>
        public static Task<GetIAMRoleResult> InvokeAsync(GetIAMRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIAMRoleResult>("exoscale:index/getIAMRole:getIAMRole", args ?? new GetIAMRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Fetch Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
        /// 
        /// Corresponding resource: exoscale_iam_role.
        /// </summary>
        public static Output<GetIAMRoleResult> Invoke(GetIAMRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIAMRoleResult>("exoscale:index/getIAMRole:getIAMRole", args ?? new GetIAMRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIAMRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("timeouts")]
        public Inputs.GetIAMRoleTimeoutsArgs? Timeouts { get; set; }

        public GetIAMRoleArgs()
        {
        }
        public static new GetIAMRoleArgs Empty => new GetIAMRoleArgs();
    }

    public sealed class GetIAMRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timeouts")]
        public Input<Inputs.GetIAMRoleTimeoutsInputArgs>? Timeouts { get; set; }

        public GetIAMRoleInvokeArgs()
        {
        }
        public static new GetIAMRoleInvokeArgs Empty => new GetIAMRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetIAMRoleResult
    {
        /// <summary>
        /// A free-form text describing the IAM Role
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Defines if IAM Role Policy is editable or not.
        /// </summary>
        public readonly bool Editable;
        /// <summary>
        /// The role ID to match (conflicts with `name`).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IAM Role labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// the role name to match (conflicts with `id`).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// IAM Role permissions.
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// IAM Policy.
        /// </summary>
        public readonly Outputs.GetIAMRolePolicyResult Policy;
        public readonly Outputs.GetIAMRoleTimeoutsResult? Timeouts;

        [OutputConstructor]
        private GetIAMRoleResult(
            string description,

            bool editable,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            ImmutableArray<string> permissions,

            Outputs.GetIAMRolePolicyResult policy,

            Outputs.GetIAMRoleTimeoutsResult? timeouts)
        {
            Description = description;
            Editable = editable;
            Id = id;
            Labels = labels;
            Name = name;
            Permissions = permissions;
            Policy = policy;
            Timeouts = timeouts;
        }
    }
}
