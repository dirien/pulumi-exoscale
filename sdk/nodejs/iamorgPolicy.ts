// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IAMOrgPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IAMOrgPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IAMOrgPolicyState, opts?: pulumi.CustomResourceOptions): IAMOrgPolicy {
        return new IAMOrgPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/iAMOrgPolicy:IAMOrgPolicy';

    /**
     * Returns true if the given object is an instance of IAMOrgPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IAMOrgPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IAMOrgPolicy.__pulumiType;
    }

    /**
     * Default service strategy (`allow` or `deny`).
     */
    public readonly defaultServiceStrategy!: pulumi.Output<string>;
    /**
     * IAM policy services.
     */
    public readonly services!: pulumi.Output<{[key: string]: outputs.IAMOrgPolicyServices}>;
    public readonly timeouts!: pulumi.Output<outputs.IAMOrgPolicyTimeouts | undefined>;

    /**
     * Create a IAMOrgPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IAMOrgPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IAMOrgPolicyArgs | IAMOrgPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IAMOrgPolicyState | undefined;
            resourceInputs["defaultServiceStrategy"] = state ? state.defaultServiceStrategy : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IAMOrgPolicyArgs | undefined;
            if ((!args || args.defaultServiceStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultServiceStrategy'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            resourceInputs["defaultServiceStrategy"] = args ? args.defaultServiceStrategy : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IAMOrgPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IAMOrgPolicy resources.
 */
export interface IAMOrgPolicyState {
    /**
     * Default service strategy (`allow` or `deny`).
     */
    defaultServiceStrategy?: pulumi.Input<string>;
    /**
     * IAM policy services.
     */
    services?: pulumi.Input<{[key: string]: pulumi.Input<inputs.IAMOrgPolicyServices>}>;
    timeouts?: pulumi.Input<inputs.IAMOrgPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a IAMOrgPolicy resource.
 */
export interface IAMOrgPolicyArgs {
    /**
     * Default service strategy (`allow` or `deny`).
     */
    defaultServiceStrategy: pulumi.Input<string>;
    /**
     * IAM policy services.
     */
    services: pulumi.Input<{[key: string]: pulumi.Input<inputs.IAMOrgPolicyServices>}>;
    timeouts?: pulumi.Input<inputs.IAMOrgPolicyTimeouts>;
}
