// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SSHKeypair extends pulumi.CustomResource {
    /**
     * Get an existing SSHKeypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SSHKeypairState, opts?: pulumi.CustomResourceOptions): SSHKeypair {
        return new SSHKeypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sSHKeypair:SSHKeypair';

    /**
     * Returns true if the given object is an instance of SSHKeypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SSHKeypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SSHKeypair.__pulumiType;
    }

    /**
     * The SSH keypair unique identifier.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The SSH keypair name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The SSH *private* key generated if no public key was provided.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * A SSH *public* key that will be authorized in compute instances. If not provided, an SSH keypair (including the *private* key) is generated and saved locally (see the `privateKey` attribute).
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;

    /**
     * Create a SSHKeypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SSHKeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SSHKeypairArgs | SSHKeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SSHKeypairState | undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as SSHKeypairArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SSHKeypair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SSHKeypair resources.
 */
export interface SSHKeypairState {
    /**
     * The SSH keypair unique identifier.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The SSH keypair name.
     */
    name?: pulumi.Input<string>;
    /**
     * The SSH *private* key generated if no public key was provided.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * A SSH *public* key that will be authorized in compute instances. If not provided, an SSH keypair (including the *private* key) is generated and saved locally (see the `privateKey` attribute).
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SSHKeypair resource.
 */
export interface SSHKeypairArgs {
    /**
     * The SSH keypair name.
     */
    name?: pulumi.Input<string>;
    /**
     * A SSH *public* key that will be authorized in compute instances. If not provided, an SSH keypair (including the *private* key) is generated and saved locally (see the `privateKey` attribute).
     */
    publicKey?: pulumi.Input<string>;
}
