// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ComputeInstanceNetworkInterface {
    ipAddress?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
}

export interface DatabaseKafka {
    enableCertAuth?: pulumi.Input<boolean>;
    enableKafkaConnect?: pulumi.Input<boolean>;
    enableKafkaRest?: pulumi.Input<boolean>;
    enableSaslAuth?: pulumi.Input<boolean>;
    enableSchemaRegistry?: pulumi.Input<boolean>;
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    kafkaConnectSettings?: pulumi.Input<string>;
    kafkaRestSettings?: pulumi.Input<string>;
    kafkaSettings?: pulumi.Input<string>;
    schemaRegistrySettings?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface DatabaseMysql {
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    backupSchedule?: pulumi.Input<string>;
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    mysqlSettings?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface DatabaseOpensearch {
    dashboards?: pulumi.Input<inputs.DatabaseOpensearchDashboards>;
    forkFromService?: pulumi.Input<string>;
    indexPatterns?: pulumi.Input<pulumi.Input<inputs.DatabaseOpensearchIndexPattern>[]>;
    indexTemplate?: pulumi.Input<inputs.DatabaseOpensearchIndexTemplate>;
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    keepIndexRefreshInterval?: pulumi.Input<boolean>;
    maxIndexCount?: pulumi.Input<number>;
    recoveryBackupName?: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface DatabaseOpensearchDashboards {
    enabled?: pulumi.Input<boolean>;
    maxOldSpaceSize?: pulumi.Input<number>;
    requestTimeout?: pulumi.Input<number>;
}

export interface DatabaseOpensearchIndexPattern {
    maxIndexCount?: pulumi.Input<number>;
    pattern?: pulumi.Input<string>;
    sortingAlgorithm?: pulumi.Input<string>;
}

export interface DatabaseOpensearchIndexTemplate {
    mappingNestedObjectsLimit?: pulumi.Input<number>;
    numberOfReplicas?: pulumi.Input<number>;
    numberOfShards?: pulumi.Input<number>;
}

export interface DatabasePg {
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    backupSchedule?: pulumi.Input<string>;
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    pgSettings?: pulumi.Input<string>;
    pgbouncerSettings?: pulumi.Input<string>;
    pglookoutSettings?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface DatabaseRedis {
    ipFilters?: pulumi.Input<pulumi.Input<string>[]>;
    redisSettings?: pulumi.Input<string>;
}

export interface ElasticIPHealthcheck {
    interval?: pulumi.Input<number>;
    mode: pulumi.Input<string>;
    port: pulumi.Input<number>;
    strikesFail?: pulumi.Input<number>;
    strikesOk?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    tlsSkipVerify?: pulumi.Input<boolean>;
    tlsSni?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetDomainRecordFilter {
    /**
     * A regular expression to match the record content.
     */
    contentRegex?: string;
    /**
     * The record ID to match.
     */
    id?: string;
    /**
     * The domain record name to match.
     */
    name?: string;
    /**
     * The record type to match.
     */
    recordType?: string;
}

export interface GetDomainRecordFilterArgs {
    /**
     * A regular expression to match the record content.
     */
    contentRegex?: pulumi.Input<string>;
    /**
     * The record ID to match.
     */
    id?: pulumi.Input<string>;
    /**
     * The domain record name to match.
     */
    name?: pulumi.Input<string>;
    /**
     * The record type to match.
     */
    recordType?: pulumi.Input<string>;
}

export interface GetSKSClusterOidc {
    /**
     * The OpenID client ID.
     */
    clientId: string;
    /**
     * An OpenID JWT claim to use as the user's group.
     */
    groupsClaim?: string;
    /**
     * An OpenID prefix prepended to group claims.
     */
    groupsPrefix?: string;
    /**
     * The OpenID provider URL.
     */
    issuerUrl: string;
    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     */
    requiredClaim?: {[key: string]: string};
    /**
     * An OpenID JWT claim to use as the user name.
     */
    usernameClaim?: string;
    /**
     * An OpenID prefix prepended to username claims.
     */
    usernamePrefix?: string;
}

export interface GetSKSClusterOidcArgs {
    /**
     * The OpenID client ID.
     */
    clientId: pulumi.Input<string>;
    /**
     * An OpenID JWT claim to use as the user's group.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * An OpenID prefix prepended to group claims.
     */
    groupsPrefix?: pulumi.Input<string>;
    /**
     * The OpenID provider URL.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     */
    requiredClaim?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An OpenID JWT claim to use as the user name.
     */
    usernameClaim?: pulumi.Input<string>;
    /**
     * An OpenID prefix prepended to username claims.
     */
    usernamePrefix?: pulumi.Input<string>;
}

export interface InstancePoolInstance {
    id?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
}

export interface NLBServiceHealthcheck {
    interval?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    retries?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    tlsSni?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface SKSClusterOidc {
    clientId: pulumi.Input<string>;
    groupsClaim?: pulumi.Input<string>;
    groupsPrefix?: pulumi.Input<string>;
    issuerUrl: pulumi.Input<string>;
    requiredClaim?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    usernameClaim?: pulumi.Input<string>;
    usernamePrefix?: pulumi.Input<string>;
}

export interface SecurityGroupRulesEgress {
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    icmpCode?: pulumi.Input<number>;
    icmpType?: pulumi.Input<number>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<string>;
    userSecurityGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityGroupRulesIngress {
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    icmpCode?: pulumi.Input<number>;
    icmpType?: pulumi.Input<number>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<string>;
    userSecurityGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
}
