// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * An existing NLB service may be imported by `<nlb-ID>/<service-ID>@<zone>`
 *
 * ```sh
 *  $ pulumi import exoscale:index/nLBService:NLBService \
 * ```
 *
 *  exoscale_nlb_service.my_nlb_service \
 *
 *  f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2
 */
export class NLBService extends pulumi.CustomResource {
    /**
     * Get an existing NLBService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NLBServiceState, opts?: pulumi.CustomResourceOptions): NLBService {
        return new NLBService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/nLBService:NLBService';

    /**
     * Returns true if the given object is an instance of NLBService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NLBService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NLBService.__pulumiType;
    }

    /**
     * A free-form text describing the NLB service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The service health checking configuration.
     */
    public readonly healthchecks!: pulumi.Output<outputs.NLBServiceHealthcheck[]>;
    /**
     * ❗ The exoscale*instance*pool (ID) to forward traffic to.
     */
    public readonly instancePoolId!: pulumi.Output<string>;
    /**
     * The NLB service name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ❗ The parent exoscale.NLB ID.
     */
    public readonly nlbId!: pulumi.Output<string>;
    /**
     * The healthcheck port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The protocol (`tcp`|`udp`; default: `tcp`).
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The strategy (`round-robin`|`source-hash`; default: `round-robin`).
     */
    public readonly strategy!: pulumi.Output<string | undefined>;
    /**
     * The (TCP/UDP) port to forward traffic to (on target instance pool members).
     */
    public readonly targetPort!: pulumi.Output<number>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NLBService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NLBServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NLBServiceArgs | NLBServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NLBServiceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["instancePoolId"] = state ? state.instancePoolId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nlbId"] = state ? state.nlbId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["targetPort"] = state ? state.targetPort : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NLBServiceArgs | undefined;
            if ((!args || args.healthchecks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthchecks'");
            }
            if ((!args || args.instancePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePoolId'");
            }
            if ((!args || args.nlbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nlbId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.targetPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetPort'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["instancePoolId"] = args ? args.instancePoolId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nlbId"] = args ? args.nlbId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["targetPort"] = args ? args.targetPort : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NLBService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NLBService resources.
 */
export interface NLBServiceState {
    /**
     * A free-form text describing the NLB service.
     */
    description?: pulumi.Input<string>;
    /**
     * The service health checking configuration.
     */
    healthchecks?: pulumi.Input<pulumi.Input<inputs.NLBServiceHealthcheck>[]>;
    /**
     * ❗ The exoscale*instance*pool (ID) to forward traffic to.
     */
    instancePoolId?: pulumi.Input<string>;
    /**
     * The NLB service name.
     */
    name?: pulumi.Input<string>;
    /**
     * ❗ The parent exoscale.NLB ID.
     */
    nlbId?: pulumi.Input<string>;
    /**
     * The healthcheck port.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol (`tcp`|`udp`; default: `tcp`).
     */
    protocol?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    /**
     * The strategy (`round-robin`|`source-hash`; default: `round-robin`).
     */
    strategy?: pulumi.Input<string>;
    /**
     * The (TCP/UDP) port to forward traffic to (on target instance pool members).
     */
    targetPort?: pulumi.Input<number>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NLBService resource.
 */
export interface NLBServiceArgs {
    /**
     * A free-form text describing the NLB service.
     */
    description?: pulumi.Input<string>;
    /**
     * The service health checking configuration.
     */
    healthchecks: pulumi.Input<pulumi.Input<inputs.NLBServiceHealthcheck>[]>;
    /**
     * ❗ The exoscale*instance*pool (ID) to forward traffic to.
     */
    instancePoolId: pulumi.Input<string>;
    /**
     * The NLB service name.
     */
    name?: pulumi.Input<string>;
    /**
     * ❗ The parent exoscale.NLB ID.
     */
    nlbId: pulumi.Input<string>;
    /**
     * The healthcheck port.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol (`tcp`|`udp`; default: `tcp`).
     */
    protocol?: pulumi.Input<string>;
    /**
     * The strategy (`round-robin`|`source-hash`; default: `round-robin`).
     */
    strategy?: pulumi.Input<string>;
    /**
     * The (TCP/UDP) port to forward traffic to (on target instance pool members).
     */
    targetPort: pulumi.Input<number>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
