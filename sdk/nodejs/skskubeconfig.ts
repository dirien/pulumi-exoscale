// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SKSKubeconfig extends pulumi.CustomResource {
    /**
     * Get an existing SKSKubeconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SKSKubeconfigState, opts?: pulumi.CustomResourceOptions): SKSKubeconfig {
        return new SKSKubeconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sKSKubeconfig:SKSKubeconfig';

    /**
     * Returns true if the given object is an instance of SKSKubeconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SKSKubeconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SKSKubeconfig.__pulumiType;
    }

    /**
     * The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
     * certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
     * expiration of its internal current certificate. Note however that the old certificate remains valid until its true
     * expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
     * take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
     */
    public readonly earlyRenewalSeconds!: pulumi.Output<number | undefined>;
    /**
     * Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
     * Organization field.
     */
    public readonly groups!: pulumi.Output<string[]>;
    /**
     * The generated Kubeconfig (YAML content).
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    public /*out*/ readonly readyForRenewal!: pulumi.Output<boolean>;
    /**
     * The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    public readonly ttlSeconds!: pulumi.Output<number | undefined>;
    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
     * field.
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a SKSKubeconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SKSKubeconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SKSKubeconfigArgs | SKSKubeconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SKSKubeconfigState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["earlyRenewalSeconds"] = state ? state.earlyRenewalSeconds : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["readyForRenewal"] = state ? state.readyForRenewal : undefined;
            resourceInputs["ttlSeconds"] = state ? state.ttlSeconds : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SKSKubeconfigArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.groups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["earlyRenewalSeconds"] = args ? args.earlyRenewalSeconds : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["ttlSeconds"] = args ? args.ttlSeconds : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["readyForRenewal"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SKSKubeconfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SKSKubeconfig resources.
 */
export interface SKSKubeconfigState {
    /**
     * The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
     * certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
     * expiration of its internal current certificate. Note however that the old certificate remains valid until its true
     * expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
     * take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
     */
    earlyRenewalSeconds?: pulumi.Input<number>;
    /**
     * Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
     * Organization field.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The generated Kubeconfig (YAML content).
     */
    kubeconfig?: pulumi.Input<string>;
    readyForRenewal?: pulumi.Input<boolean>;
    /**
     * The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    ttlSeconds?: pulumi.Input<number>;
    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
     * field.
     */
    user?: pulumi.Input<string>;
    /**
     * The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SKSKubeconfig resource.
 */
export interface SKSKubeconfigArgs {
    /**
     * The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
     * certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
     * expiration of its internal current certificate. Note however that the old certificate remains valid until its true
     * expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
     * take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
     */
    earlyRenewalSeconds?: pulumi.Input<number>;
    /**
     * Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
     * Organization field.
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
     */
    ttlSeconds?: pulumi.Input<number>;
    /**
     * User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
     * field.
     */
    user: pulumi.Input<string>;
    /**
     * The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
