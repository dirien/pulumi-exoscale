// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`
 *
 * ```sh
 *  $ pulumi import exoscale:index/sKSNodepool:SKSNodepool \
 * ```
 *
 *  exoscale_sks_nodepool.my_sks_nodepool \
 *
 *  f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2
 */
export class SKSNodepool extends pulumi.CustomResource {
    /**
     * Get an existing SKSNodepool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SKSNodepoolState, opts?: pulumi.CustomResourceOptions): SKSNodepool {
        return new SKSNodepool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sKSNodepool:SKSNodepool';

    /**
     * Returns true if the given object is an instance of SKSNodepool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SKSNodepool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SKSNodepool.__pulumiType;
    }

    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    public readonly antiAffinityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The pool creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A deploy target ID.
     */
    public readonly deployTargetId!: pulumi.Output<string | undefined>;
    /**
     * A free-form text describing the pool.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    public readonly diskSize!: pulumi.Output<number | undefined>;
    /**
     * The underlying exoscale*instance*pool ID.
     */
    public /*out*/ readonly instancePoolId!: pulumi.Output<string>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    public readonly instancePrefix!: pulumi.Output<string | undefined>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * A map of key/value labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The SKS node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    public readonly privateNetworkIds!: pulumi.Output<string[] | undefined>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly size!: pulumi.Output<number>;
    /**
     * The current pool state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
     */
    public readonly taints!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The managed instances template ID.
     */
    public /*out*/ readonly templateId!: pulumi.Output<string>;
    /**
     * The managed instances version.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a SKSNodepool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SKSNodepoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SKSNodepoolArgs | SKSNodepoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SKSNodepoolState | undefined;
            resourceInputs["antiAffinityGroupIds"] = state ? state.antiAffinityGroupIds : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deployTargetId"] = state ? state.deployTargetId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["instancePoolId"] = state ? state.instancePoolId : undefined;
            resourceInputs["instancePrefix"] = state ? state.instancePrefix : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateNetworkIds"] = state ? state.privateNetworkIds : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SKSNodepoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["antiAffinityGroupIds"] = args ? args.antiAffinityGroupIds : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["deployTargetId"] = args ? args.deployTargetId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["instancePrefix"] = args ? args.instancePrefix : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateNetworkIds"] = args ? args.privateNetworkIds : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instancePoolId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["templateId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SKSNodepool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SKSNodepool resources.
 */
export interface SKSNodepoolState {
    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    antiAffinityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The pool creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A deploy target ID.
     */
    deployTargetId?: pulumi.Input<string>;
    /**
     * A free-form text describing the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The underlying exoscale*instance*pool ID.
     */
    instancePoolId?: pulumi.Input<string>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    instancePrefix?: pulumi.Input<string>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    instanceType?: pulumi.Input<string>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SKS node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    size?: pulumi.Input<number>;
    /**
     * The current pool state.
     */
    state?: pulumi.Input<string>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
     */
    taints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed instances template ID.
     */
    templateId?: pulumi.Input<string>;
    /**
     * The managed instances version.
     */
    version?: pulumi.Input<string>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SKSNodepool resource.
 */
export interface SKSNodepoolArgs {
    /**
     * A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
     */
    antiAffinityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ❗ The parent exoscale*sks*cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * A deploy target ID.
     */
    deployTargetId?: pulumi.Input<string>;
    /**
     * A free-form text describing the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * The managed instances disk size (GiB; default: `50`).
     */
    diskSize?: pulumi.Input<number>;
    /**
     * The string used to prefix the managed instances name (default `pool`).
     */
    instancePrefix?: pulumi.Input<string>;
    /**
     * The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
     */
    instanceType: pulumi.Input<string>;
    /**
     * A map of key/value labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The SKS node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of exoscale*private*network (IDs) to be attached to the managed instances.
     */
    privateNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of exoscale*security*group (IDs) to be attached to the managed instances.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    size: pulumi.Input<number>;
    /**
     * A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
     */
    taints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
     */
    zone: pulumi.Input<string>;
}
