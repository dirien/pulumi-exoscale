// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * An existing SSH key may be imported as a resource by `<name>`
 *
 * ```sh
 *  $ pulumi import exoscale:index/sSHKey:SSHKey \
 * ```
 *
 *  exoscale_ssh_key.my_ssh_key \
 *
 *  my-ssh-key
 */
export class SSHKey extends pulumi.CustomResource {
    /**
     * Get an existing SSHKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SSHKeyState, opts?: pulumi.CustomResourceOptions): SSHKey {
        return new SSHKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'exoscale:index/sSHKey:SSHKey';

    /**
     * Returns true if the given object is an instance of SSHKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SSHKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SSHKey.__pulumiType;
    }

    /**
     * The SSH key unique identifier.
     */
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * ❗ The SSH key name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ❗ The SSH *public* key that will be authorized in compute instances.
     */
    public readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a SSHKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SSHKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SSHKeyArgs | SSHKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SSHKeyState | undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as SSHKeyArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SSHKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SSHKey resources.
 */
export interface SSHKeyState {
    /**
     * The SSH key unique identifier.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * ❗ The SSH key name.
     */
    name?: pulumi.Input<string>;
    /**
     * ❗ The SSH *public* key that will be authorized in compute instances.
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SSHKey resource.
 */
export interface SSHKeyArgs {
    /**
     * ❗ The SSH key name.
     */
    name?: pulumi.Input<string>;
    /**
     * ❗ The SSH *public* key that will be authorized in compute instances.
     */
    publicKey?: pulumi.Input<string>;
}
