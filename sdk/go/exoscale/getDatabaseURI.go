// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"timezone": "Europe/Zurich",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = exoscale.NewDatabase(ctx, "myDatabaseDatabase", &exoscale.DatabaseArgs{
//				Zone:                  pulumi.String("ch-gva-2"),
//				Type:                  pulumi.String("pg"),
//				Plan:                  pulumi.String("startup-4"),
//				MaintenanceDow:        pulumi.String("sunday"),
//				MaintenanceTime:       pulumi.String("23:00:00"),
//				TerminationProtection: pulumi.Bool(true),
//				Pg: &exoscale.DatabasePgArgs{
//					Version:        pulumi.String("13"),
//					BackupSchedule: pulumi.String("04:00"),
//					IpFilters: pulumi.StringArray{
//						pulumi.String("1.2.3.4/32"),
//						pulumi.String("5.6.7.8/32"),
//					},
//					PgSettings: pulumi.String(json0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myDatabaseDatabaseURI, err := exoscale.GetDatabaseURI(ctx, &exoscale.GetDatabaseURIArgs{
//				Name: "my-database",
//				Type: "pg",
//				Zone: "ch-gva-2",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("myDatabaseUri", myDatabaseDatabaseURI.Uri)
//			return nil
//		})
//	}
//
// ```
func GetDatabaseURI(ctx *pulumi.Context, args *GetDatabaseURIArgs, opts ...pulumi.InvokeOption) (*GetDatabaseURIResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatabaseURIResult
	err := ctx.Invoke("exoscale:index/getDatabaseURI:getDatabaseURI", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseURI.
type GetDatabaseURIArgs struct {
	// The database name to match.
	Name string `pulumi:"name"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
	Type string `pulumi:"type"`
	// (Required) The Exoscale Zone name.
	Zone string `pulumi:"zone"`
}

// A collection of values returned by getDatabaseURI.
type GetDatabaseURIResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The database name to match.
	Name string `pulumi:"name"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
	Type string `pulumi:"type"`
	// The database service connection URI.
	Uri string `pulumi:"uri"`
	// (Required) The Exoscale Zone name.
	Zone string `pulumi:"zone"`
}

func GetDatabaseURIOutput(ctx *pulumi.Context, args GetDatabaseURIOutputArgs, opts ...pulumi.InvokeOption) GetDatabaseURIResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDatabaseURIResult, error) {
			args := v.(GetDatabaseURIArgs)
			r, err := GetDatabaseURI(ctx, &args, opts...)
			var s GetDatabaseURIResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDatabaseURIResultOutput)
}

// A collection of arguments for invoking getDatabaseURI.
type GetDatabaseURIOutputArgs struct {
	// The database name to match.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
	Type pulumi.StringInput `pulumi:"type"`
	// (Required) The Exoscale Zone name.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetDatabaseURIOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseURIArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseURI.
type GetDatabaseURIResultOutput struct{ *pulumi.OutputState }

func (GetDatabaseURIResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseURIResult)(nil)).Elem()
}

func (o GetDatabaseURIResultOutput) ToGetDatabaseURIResultOutput() GetDatabaseURIResultOutput {
	return o
}

func (o GetDatabaseURIResultOutput) ToGetDatabaseURIResultOutputWithContext(ctx context.Context) GetDatabaseURIResultOutput {
	return o
}

func (o GetDatabaseURIResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetDatabaseURIResult] {
	return pulumix.Output[GetDatabaseURIResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatabaseURIResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseURIResult) string { return v.Id }).(pulumi.StringOutput)
}

// The database name to match.
func (o GetDatabaseURIResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseURIResult) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the database service (`kafka`, `mysql`, `opensearch`, `pg`, `redis`).
func (o GetDatabaseURIResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseURIResult) string { return v.Type }).(pulumi.StringOutput)
}

// The database service connection URI.
func (o GetDatabaseURIResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseURIResult) string { return v.Uri }).(pulumi.StringOutput)
}

// (Required) The Exoscale Zone name.
func (o GetDatabaseURIResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseURIResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabaseURIResultOutput{})
}
