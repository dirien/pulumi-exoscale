// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "exoscale:index/antiAffinityGroup:AntiAffinityGroup":
		r = &AntiAffinityGroup{}
	case "exoscale:index/computeInstance:ComputeInstance":
		r = &ComputeInstance{}
	case "exoscale:index/database:Database":
		r = &Database{}
	case "exoscale:index/domain:Domain":
		r = &Domain{}
	case "exoscale:index/domainRecord:DomainRecord":
		r = &DomainRecord{}
	case "exoscale:index/elasticIP:ElasticIP":
		r = &ElasticIP{}
	case "exoscale:index/iAMAPIKey:IAMAPIKey":
		r = &IAMAPIKey{}
	case "exoscale:index/iAMAccessKey:IAMAccessKey":
		r = &IAMAccessKey{}
	case "exoscale:index/iAMOrgPolicy:IAMOrgPolicy":
		r = &IAMOrgPolicy{}
	case "exoscale:index/iAMRole:IAMRole":
		r = &IAMRole{}
	case "exoscale:index/instancePool:InstancePool":
		r = &InstancePool{}
	case "exoscale:index/nLB:NLB":
		r = &NLB{}
	case "exoscale:index/nLBService:NLBService":
		r = &NLBService{}
	case "exoscale:index/privateNetwork:PrivateNetwork":
		r = &PrivateNetwork{}
	case "exoscale:index/sKSCluster:SKSCluster":
		r = &SKSCluster{}
	case "exoscale:index/sKSKubeconfig:SKSKubeconfig":
		r = &SKSKubeconfig{}
	case "exoscale:index/sKSNodepool:SKSNodepool":
		r = &SKSNodepool{}
	case "exoscale:index/sSHKey:SSHKey":
		r = &SSHKey{}
	case "exoscale:index/securityGroup:SecurityGroup":
		r = &SecurityGroup{}
	case "exoscale:index/securityGroupRule:SecurityGroupRule":
		r = &SecurityGroupRule{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:exoscale" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/antiAffinityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/computeInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/domainRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/elasticIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iAMAPIKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iAMAccessKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iAMOrgPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/iAMRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/instancePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/nLB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/nLBService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/privateNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sKSCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sKSKubeconfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sKSNodepool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/sSHKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/securityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"exoscale",
		"index/securityGroupRule",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"exoscale",
		&pkg{version},
	)
}
