// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

var _ = internal.GetEnvOrDefault

type ComputeInstanceNetworkInterface struct {
	// The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
	IpAddress *string `pulumi:"ipAddress"`
	// The exoscale*private*network (ID) to attach to the instance.
	NetworkId string `pulumi:"networkId"`
}

// ComputeInstanceNetworkInterfaceInput is an input type that accepts ComputeInstanceNetworkInterfaceArgs and ComputeInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `ComputeInstanceNetworkInterfaceInput` via:
//
//	ComputeInstanceNetworkInterfaceArgs{...}
type ComputeInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToComputeInstanceNetworkInterfaceOutput() ComputeInstanceNetworkInterfaceOutput
	ToComputeInstanceNetworkInterfaceOutputWithContext(context.Context) ComputeInstanceNetworkInterfaceOutput
}

type ComputeInstanceNetworkInterfaceArgs struct {
	// The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The exoscale*private*network (ID) to attach to the instance.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
}

func (ComputeInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceNetworkInterface)(nil)).Elem()
}

func (i ComputeInstanceNetworkInterfaceArgs) ToComputeInstanceNetworkInterfaceOutput() ComputeInstanceNetworkInterfaceOutput {
	return i.ToComputeInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i ComputeInstanceNetworkInterfaceArgs) ToComputeInstanceNetworkInterfaceOutputWithContext(ctx context.Context) ComputeInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceNetworkInterfaceOutput)
}

func (i ComputeInstanceNetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[ComputeInstanceNetworkInterface] {
	return pulumix.Output[ComputeInstanceNetworkInterface]{
		OutputState: i.ToComputeInstanceNetworkInterfaceOutputWithContext(ctx).OutputState,
	}
}

// ComputeInstanceNetworkInterfaceArrayInput is an input type that accepts ComputeInstanceNetworkInterfaceArray and ComputeInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `ComputeInstanceNetworkInterfaceArrayInput` via:
//
//	ComputeInstanceNetworkInterfaceArray{ ComputeInstanceNetworkInterfaceArgs{...} }
type ComputeInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToComputeInstanceNetworkInterfaceArrayOutput() ComputeInstanceNetworkInterfaceArrayOutput
	ToComputeInstanceNetworkInterfaceArrayOutputWithContext(context.Context) ComputeInstanceNetworkInterfaceArrayOutput
}

type ComputeInstanceNetworkInterfaceArray []ComputeInstanceNetworkInterfaceInput

func (ComputeInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceNetworkInterface)(nil)).Elem()
}

func (i ComputeInstanceNetworkInterfaceArray) ToComputeInstanceNetworkInterfaceArrayOutput() ComputeInstanceNetworkInterfaceArrayOutput {
	return i.ToComputeInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i ComputeInstanceNetworkInterfaceArray) ToComputeInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) ComputeInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceNetworkInterfaceArrayOutput)
}

func (i ComputeInstanceNetworkInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]ComputeInstanceNetworkInterface] {
	return pulumix.Output[[]ComputeInstanceNetworkInterface]{
		OutputState: i.ToComputeInstanceNetworkInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

type ComputeInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (ComputeInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceNetworkInterface)(nil)).Elem()
}

func (o ComputeInstanceNetworkInterfaceOutput) ToComputeInstanceNetworkInterfaceOutput() ComputeInstanceNetworkInterfaceOutput {
	return o
}

func (o ComputeInstanceNetworkInterfaceOutput) ToComputeInstanceNetworkInterfaceOutputWithContext(ctx context.Context) ComputeInstanceNetworkInterfaceOutput {
	return o
}

func (o ComputeInstanceNetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeInstanceNetworkInterface] {
	return pulumix.Output[ComputeInstanceNetworkInterface]{
		OutputState: o.OutputState,
	}
}

// The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
func (o ComputeInstanceNetworkInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceNetworkInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The exoscale*private*network (ID) to attach to the instance.
func (o ComputeInstanceNetworkInterfaceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceNetworkInterface) string { return v.NetworkId }).(pulumi.StringOutput)
}

type ComputeInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceNetworkInterface)(nil)).Elem()
}

func (o ComputeInstanceNetworkInterfaceArrayOutput) ToComputeInstanceNetworkInterfaceArrayOutput() ComputeInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o ComputeInstanceNetworkInterfaceArrayOutput) ToComputeInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) ComputeInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o ComputeInstanceNetworkInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ComputeInstanceNetworkInterface] {
	return pulumix.Output[[]ComputeInstanceNetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o ComputeInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) ComputeInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceNetworkInterface {
		return vs[0].([]ComputeInstanceNetworkInterface)[vs[1].(int)]
	}).(ComputeInstanceNetworkInterfaceOutput)
}

type DatabaseKafka struct {
	// Enable certificate-based authentication method.
	EnableCertAuth *bool `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect *bool `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest *bool `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth *bool `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry *bool `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings *string `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings *string `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings *string `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings *string `pulumi:"schemaRegistrySettings"`
	// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabaseKafkaInput is an input type that accepts DatabaseKafkaArgs and DatabaseKafkaOutput values.
// You can construct a concrete instance of `DatabaseKafkaInput` via:
//
//	DatabaseKafkaArgs{...}
type DatabaseKafkaInput interface {
	pulumi.Input

	ToDatabaseKafkaOutput() DatabaseKafkaOutput
	ToDatabaseKafkaOutputWithContext(context.Context) DatabaseKafkaOutput
}

type DatabaseKafkaArgs struct {
	// Enable certificate-based authentication method.
	EnableCertAuth pulumi.BoolPtrInput `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect pulumi.BoolPtrInput `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest pulumi.BoolPtrInput `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth pulumi.BoolPtrInput `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry pulumi.BoolPtrInput `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings pulumi.StringPtrInput `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings pulumi.StringPtrInput `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings pulumi.StringPtrInput `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings pulumi.StringPtrInput `pulumi:"schemaRegistrySettings"`
	// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return i.ToDatabaseKafkaOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput)
}

func (i DatabaseKafkaArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseKafka] {
	return pulumix.Output[DatabaseKafka]{
		OutputState: i.ToDatabaseKafkaOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput).ToDatabaseKafkaPtrOutputWithContext(ctx)
}

// DatabaseKafkaPtrInput is an input type that accepts DatabaseKafkaArgs, DatabaseKafkaPtr and DatabaseKafkaPtrOutput values.
// You can construct a concrete instance of `DatabaseKafkaPtrInput` via:
//
//	        DatabaseKafkaArgs{...}
//
//	or:
//
//	        nil
type DatabaseKafkaPtrInput interface {
	pulumi.Input

	ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput
	ToDatabaseKafkaPtrOutputWithContext(context.Context) DatabaseKafkaPtrOutput
}

type databaseKafkaPtrType DatabaseKafkaArgs

func DatabaseKafkaPtr(v *DatabaseKafkaArgs) DatabaseKafkaPtrInput {
	return (*databaseKafkaPtrType)(v)
}

func (*databaseKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaPtrOutput)
}

func (i *databaseKafkaPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseKafka] {
	return pulumix.Output[*DatabaseKafka]{
		OutputState: i.ToDatabaseKafkaPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseKafkaOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseKafka) *DatabaseKafka {
		return &v
	}).(DatabaseKafkaPtrOutput)
}

func (o DatabaseKafkaOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseKafka] {
	return pulumix.Output[DatabaseKafka]{
		OutputState: o.OutputState,
	}
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableCertAuth }).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaConnect }).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaRest }).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSaslAuth }).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSchemaRegistry }).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseKafka) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaConnectSettings }).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaRestSettings }).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaSettings }).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.SchemaRegistrySettings }).(pulumi.StringPtrOutput)
}

// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
func (o DatabaseKafkaOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseKafkaPtrOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseKafka] {
	return pulumix.Output[*DatabaseKafka]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseKafkaPtrOutput) Elem() DatabaseKafkaOutput {
	return o.ApplyT(func(v *DatabaseKafka) DatabaseKafka {
		if v != nil {
			return *v
		}
		var ret DatabaseKafka
		return ret
	}).(DatabaseKafkaOutput)
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaPtrOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaConnect
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaPtrOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaRest
	}).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSaslAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaPtrOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaRegistry
	}).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseKafka) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaPtrOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaConnectSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaPtrOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaRestSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaPtrOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaSettings
	}).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaPtrOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.SchemaRegistrySettings
	}).(pulumi.StringPtrOutput)
}

// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
func (o DatabaseKafkaPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseMysql struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings *string `pulumi:"mysqlSettings"`
	// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabaseMysqlInput is an input type that accepts DatabaseMysqlArgs and DatabaseMysqlOutput values.
// You can construct a concrete instance of `DatabaseMysqlInput` via:
//
//	DatabaseMysqlArgs{...}
type DatabaseMysqlInput interface {
	pulumi.Input

	ToDatabaseMysqlOutput() DatabaseMysqlOutput
	ToDatabaseMysqlOutputWithContext(context.Context) DatabaseMysqlOutput
}

type DatabaseMysqlArgs struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings pulumi.StringPtrInput `pulumi:"mysqlSettings"`
	// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return i.ToDatabaseMysqlOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput)
}

func (i DatabaseMysqlArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseMysql] {
	return pulumix.Output[DatabaseMysql]{
		OutputState: i.ToDatabaseMysqlOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput).ToDatabaseMysqlPtrOutputWithContext(ctx)
}

// DatabaseMysqlPtrInput is an input type that accepts DatabaseMysqlArgs, DatabaseMysqlPtr and DatabaseMysqlPtrOutput values.
// You can construct a concrete instance of `DatabaseMysqlPtrInput` via:
//
//	        DatabaseMysqlArgs{...}
//
//	or:
//
//	        nil
type DatabaseMysqlPtrInput interface {
	pulumi.Input

	ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput
	ToDatabaseMysqlPtrOutputWithContext(context.Context) DatabaseMysqlPtrOutput
}

type databaseMysqlPtrType DatabaseMysqlArgs

func DatabaseMysqlPtr(v *DatabaseMysqlArgs) DatabaseMysqlPtrInput {
	return (*databaseMysqlPtrType)(v)
}

func (*databaseMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlPtrOutput)
}

func (i *databaseMysqlPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysql] {
	return pulumix.Output[*DatabaseMysql]{
		OutputState: i.ToDatabaseMysqlPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseMysqlOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseMysql) *DatabaseMysql {
		return &v
	}).(DatabaseMysqlPtrOutput)
}

func (o DatabaseMysqlOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseMysql] {
	return pulumix.Output[DatabaseMysql]{
		OutputState: o.OutputState,
	}
}

// A custom administrator account password (may only be set at creation time).
func (o DatabaseMysqlOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabaseMysqlOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabaseMysqlOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseMysql) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.MysqlSettings }).(pulumi.StringPtrOutput)
}

// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
func (o DatabaseMysqlOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseMysqlPtrOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysql] {
	return pulumix.Output[*DatabaseMysql]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseMysqlPtrOutput) Elem() DatabaseMysqlOutput {
	return o.ApplyT(func(v *DatabaseMysql) DatabaseMysql {
		if v != nil {
			return *v
		}
		var ret DatabaseMysql
		return ret
	}).(DatabaseMysqlOutput)
}

// A custom administrator account password (may only be set at creation time).
func (o DatabaseMysqlPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabaseMysqlPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabaseMysqlPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMysql) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlPtrOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.MysqlSettings
	}).(pulumi.StringPtrOutput)
}

// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
func (o DatabaseMysqlPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseOpensearch struct {
	Dashboards *DatabaseOpensearchDashboards `pulumi:"dashboards"`
	// ❗ Service name
	ForkFromService *string `pulumi:"forkFromService"`
	// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
	IndexPatterns []DatabaseOpensearchIndexPattern `pulumi:"indexPatterns"`
	// Template settings for all new indexes
	IndexTemplate *DatabaseOpensearchIndexTemplate `pulumi:"indexTemplate"`
	// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]`
	IpFilters []string `pulumi:"ipFilters"`
	// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
	KeepIndexRefreshInterval *bool `pulumi:"keepIndexRefreshInterval"`
	// Maximum number of indexes to keep (Minimum value is `0`)
	MaxIndexCount *int `pulumi:"maxIndexCount"`
	// ❗
	RecoveryBackupName *string `pulumi:"recoveryBackupName"`
	// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
	Settings *string `pulumi:"settings"`
	// ❗ OpenSearch major version.
	Version *string `pulumi:"version"`
}

// DatabaseOpensearchInput is an input type that accepts DatabaseOpensearchArgs and DatabaseOpensearchOutput values.
// You can construct a concrete instance of `DatabaseOpensearchInput` via:
//
//	DatabaseOpensearchArgs{...}
type DatabaseOpensearchInput interface {
	pulumi.Input

	ToDatabaseOpensearchOutput() DatabaseOpensearchOutput
	ToDatabaseOpensearchOutputWithContext(context.Context) DatabaseOpensearchOutput
}

type DatabaseOpensearchArgs struct {
	Dashboards DatabaseOpensearchDashboardsPtrInput `pulumi:"dashboards"`
	// ❗ Service name
	ForkFromService pulumi.StringPtrInput `pulumi:"forkFromService"`
	// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
	IndexPatterns DatabaseOpensearchIndexPatternArrayInput `pulumi:"indexPatterns"`
	// Template settings for all new indexes
	IndexTemplate DatabaseOpensearchIndexTemplatePtrInput `pulumi:"indexTemplate"`
	// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]`
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
	KeepIndexRefreshInterval pulumi.BoolPtrInput `pulumi:"keepIndexRefreshInterval"`
	// Maximum number of indexes to keep (Minimum value is `0`)
	MaxIndexCount pulumi.IntPtrInput `pulumi:"maxIndexCount"`
	// ❗
	RecoveryBackupName pulumi.StringPtrInput `pulumi:"recoveryBackupName"`
	// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
	Settings pulumi.StringPtrInput `pulumi:"settings"`
	// ❗ OpenSearch major version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseOpensearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearch)(nil)).Elem()
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchOutput() DatabaseOpensearchOutput {
	return i.ToDatabaseOpensearchOutputWithContext(context.Background())
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchOutputWithContext(ctx context.Context) DatabaseOpensearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchOutput)
}

func (i DatabaseOpensearchArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearch] {
	return pulumix.Output[DatabaseOpensearch]{
		OutputState: i.ToDatabaseOpensearchOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return i.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchOutput).ToDatabaseOpensearchPtrOutputWithContext(ctx)
}

// DatabaseOpensearchPtrInput is an input type that accepts DatabaseOpensearchArgs, DatabaseOpensearchPtr and DatabaseOpensearchPtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchPtrInput` via:
//
//	        DatabaseOpensearchArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchPtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput
	ToDatabaseOpensearchPtrOutputWithContext(context.Context) DatabaseOpensearchPtrOutput
}

type databaseOpensearchPtrType DatabaseOpensearchArgs

func DatabaseOpensearchPtr(v *DatabaseOpensearchArgs) DatabaseOpensearchPtrInput {
	return (*databaseOpensearchPtrType)(v)
}

func (*databaseOpensearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearch)(nil)).Elem()
}

func (i *databaseOpensearchPtrType) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return i.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchPtrType) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchPtrOutput)
}

func (i *databaseOpensearchPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearch] {
	return pulumix.Output[*DatabaseOpensearch]{
		OutputState: i.ToDatabaseOpensearchPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearch)(nil)).Elem()
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchOutput() DatabaseOpensearchOutput {
	return o
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchOutputWithContext(ctx context.Context) DatabaseOpensearchOutput {
	return o
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return o.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearch) *DatabaseOpensearch {
		return &v
	}).(DatabaseOpensearchPtrOutput)
}

func (o DatabaseOpensearchOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearch] {
	return pulumix.Output[DatabaseOpensearch]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchOutput) Dashboards() DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *DatabaseOpensearchDashboards { return v.Dashboards }).(DatabaseOpensearchDashboardsPtrOutput)
}

// ❗ Service name
func (o DatabaseOpensearchOutput) ForkFromService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.ForkFromService }).(pulumi.StringPtrOutput)
}

// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
func (o DatabaseOpensearchOutput) IndexPatterns() DatabaseOpensearchIndexPatternArrayOutput {
	return o.ApplyT(func(v DatabaseOpensearch) []DatabaseOpensearchIndexPattern { return v.IndexPatterns }).(DatabaseOpensearchIndexPatternArrayOutput)
}

// Template settings for all new indexes
func (o DatabaseOpensearchOutput) IndexTemplate() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *DatabaseOpensearchIndexTemplate { return v.IndexTemplate }).(DatabaseOpensearchIndexTemplatePtrOutput)
}

// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]`
func (o DatabaseOpensearchOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseOpensearch) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
func (o DatabaseOpensearchOutput) KeepIndexRefreshInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *bool { return v.KeepIndexRefreshInterval }).(pulumi.BoolPtrOutput)
}

// Maximum number of indexes to keep (Minimum value is `0`)
func (o DatabaseOpensearchOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *int { return v.MaxIndexCount }).(pulumi.IntPtrOutput)
}

// ❗
func (o DatabaseOpensearchOutput) RecoveryBackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.RecoveryBackupName }).(pulumi.StringPtrOutput)
}

// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
func (o DatabaseOpensearchOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.Settings }).(pulumi.StringPtrOutput)
}

// ❗ OpenSearch major version.
func (o DatabaseOpensearchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchPtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearch)(nil)).Elem()
}

func (o DatabaseOpensearchPtrOutput) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return o
}

func (o DatabaseOpensearchPtrOutput) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return o
}

func (o DatabaseOpensearchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearch] {
	return pulumix.Output[*DatabaseOpensearch]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchPtrOutput) Elem() DatabaseOpensearchOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) DatabaseOpensearch {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearch
		return ret
	}).(DatabaseOpensearchOutput)
}

func (o DatabaseOpensearchPtrOutput) Dashboards() DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *DatabaseOpensearchDashboards {
		if v == nil {
			return nil
		}
		return v.Dashboards
	}).(DatabaseOpensearchDashboardsPtrOutput)
}

// ❗ Service name
func (o DatabaseOpensearchPtrOutput) ForkFromService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.ForkFromService
	}).(pulumi.StringPtrOutput)
}

// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
func (o DatabaseOpensearchPtrOutput) IndexPatterns() DatabaseOpensearchIndexPatternArrayOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) []DatabaseOpensearchIndexPattern {
		if v == nil {
			return nil
		}
		return v.IndexPatterns
	}).(DatabaseOpensearchIndexPatternArrayOutput)
}

// Template settings for all new indexes
func (o DatabaseOpensearchPtrOutput) IndexTemplate() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *DatabaseOpensearchIndexTemplate {
		if v == nil {
			return nil
		}
		return v.IndexTemplate
	}).(DatabaseOpensearchIndexTemplatePtrOutput)
}

// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]`
func (o DatabaseOpensearchPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
func (o DatabaseOpensearchPtrOutput) KeepIndexRefreshInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *bool {
		if v == nil {
			return nil
		}
		return v.KeepIndexRefreshInterval
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of indexes to keep (Minimum value is `0`)
func (o DatabaseOpensearchPtrOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *int {
		if v == nil {
			return nil
		}
		return v.MaxIndexCount
	}).(pulumi.IntPtrOutput)
}

// ❗
func (o DatabaseOpensearchPtrOutput) RecoveryBackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.RecoveryBackupName
	}).(pulumi.StringPtrOutput)
}

// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
func (o DatabaseOpensearchPtrOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.StringPtrOutput)
}

// ❗ OpenSearch major version.
func (o DatabaseOpensearchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchDashboards struct {
	Enabled         *bool `pulumi:"enabled"`
	MaxOldSpaceSize *int  `pulumi:"maxOldSpaceSize"`
	RequestTimeout  *int  `pulumi:"requestTimeout"`
}

// DatabaseOpensearchDashboardsInput is an input type that accepts DatabaseOpensearchDashboardsArgs and DatabaseOpensearchDashboardsOutput values.
// You can construct a concrete instance of `DatabaseOpensearchDashboardsInput` via:
//
//	DatabaseOpensearchDashboardsArgs{...}
type DatabaseOpensearchDashboardsInput interface {
	pulumi.Input

	ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput
	ToDatabaseOpensearchDashboardsOutputWithContext(context.Context) DatabaseOpensearchDashboardsOutput
}

type DatabaseOpensearchDashboardsArgs struct {
	Enabled         pulumi.BoolPtrInput `pulumi:"enabled"`
	MaxOldSpaceSize pulumi.IntPtrInput  `pulumi:"maxOldSpaceSize"`
	RequestTimeout  pulumi.IntPtrInput  `pulumi:"requestTimeout"`
}

func (DatabaseOpensearchDashboardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchDashboards)(nil)).Elem()
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput {
	return i.ToDatabaseOpensearchDashboardsOutputWithContext(context.Background())
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsOutput)
}

func (i DatabaseOpensearchDashboardsArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchDashboards] {
	return pulumix.Output[DatabaseOpensearchDashboards]{
		OutputState: i.ToDatabaseOpensearchDashboardsOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsOutput).ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx)
}

// DatabaseOpensearchDashboardsPtrInput is an input type that accepts DatabaseOpensearchDashboardsArgs, DatabaseOpensearchDashboardsPtr and DatabaseOpensearchDashboardsPtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchDashboardsPtrInput` via:
//
//	        DatabaseOpensearchDashboardsArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchDashboardsPtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput
	ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Context) DatabaseOpensearchDashboardsPtrOutput
}

type databaseOpensearchDashboardsPtrType DatabaseOpensearchDashboardsArgs

func DatabaseOpensearchDashboardsPtr(v *DatabaseOpensearchDashboardsArgs) DatabaseOpensearchDashboardsPtrInput {
	return (*databaseOpensearchDashboardsPtrType)(v)
}

func (*databaseOpensearchDashboardsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchDashboards)(nil)).Elem()
}

func (i *databaseOpensearchDashboardsPtrType) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchDashboardsPtrType) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsPtrOutput)
}

func (i *databaseOpensearchDashboardsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchDashboards] {
	return pulumix.Output[*DatabaseOpensearchDashboards]{
		OutputState: i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchDashboardsOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchDashboardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchDashboards)(nil)).Elem()
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput {
	return o
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsOutput {
	return o
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return o.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearchDashboards) *DatabaseOpensearchDashboards {
		return &v
	}).(DatabaseOpensearchDashboardsPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchDashboards] {
	return pulumix.Output[DatabaseOpensearchDashboards]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchDashboardsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) MaxOldSpaceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *int { return v.MaxOldSpaceSize }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *int { return v.RequestTimeout }).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchDashboardsPtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchDashboardsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchDashboards)(nil)).Elem()
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return o
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return o
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchDashboards] {
	return pulumix.Output[*DatabaseOpensearchDashboards]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchDashboardsPtrOutput) Elem() DatabaseOpensearchDashboardsOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) DatabaseOpensearchDashboards {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearchDashboards
		return ret
	}).(DatabaseOpensearchDashboardsOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) MaxOldSpaceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *int {
		if v == nil {
			return nil
		}
		return v.MaxOldSpaceSize
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *int {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchIndexPattern struct {
	MaxIndexCount    *int    `pulumi:"maxIndexCount"`
	Pattern          *string `pulumi:"pattern"`
	SortingAlgorithm *string `pulumi:"sortingAlgorithm"`
}

// DatabaseOpensearchIndexPatternInput is an input type that accepts DatabaseOpensearchIndexPatternArgs and DatabaseOpensearchIndexPatternOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexPatternInput` via:
//
//	DatabaseOpensearchIndexPatternArgs{...}
type DatabaseOpensearchIndexPatternInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput
	ToDatabaseOpensearchIndexPatternOutputWithContext(context.Context) DatabaseOpensearchIndexPatternOutput
}

type DatabaseOpensearchIndexPatternArgs struct {
	MaxIndexCount    pulumi.IntPtrInput    `pulumi:"maxIndexCount"`
	Pattern          pulumi.StringPtrInput `pulumi:"pattern"`
	SortingAlgorithm pulumi.StringPtrInput `pulumi:"sortingAlgorithm"`
}

func (DatabaseOpensearchIndexPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (i DatabaseOpensearchIndexPatternArgs) ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput {
	return i.ToDatabaseOpensearchIndexPatternOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexPatternArgs) ToDatabaseOpensearchIndexPatternOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexPatternOutput)
}

func (i DatabaseOpensearchIndexPatternArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexPattern] {
	return pulumix.Output[DatabaseOpensearchIndexPattern]{
		OutputState: i.ToDatabaseOpensearchIndexPatternOutputWithContext(ctx).OutputState,
	}
}

// DatabaseOpensearchIndexPatternArrayInput is an input type that accepts DatabaseOpensearchIndexPatternArray and DatabaseOpensearchIndexPatternArrayOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexPatternArrayInput` via:
//
//	DatabaseOpensearchIndexPatternArray{ DatabaseOpensearchIndexPatternArgs{...} }
type DatabaseOpensearchIndexPatternArrayInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput
	ToDatabaseOpensearchIndexPatternArrayOutputWithContext(context.Context) DatabaseOpensearchIndexPatternArrayOutput
}

type DatabaseOpensearchIndexPatternArray []DatabaseOpensearchIndexPatternInput

func (DatabaseOpensearchIndexPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (i DatabaseOpensearchIndexPatternArray) ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput {
	return i.ToDatabaseOpensearchIndexPatternArrayOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexPatternArray) ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexPatternArrayOutput)
}

func (i DatabaseOpensearchIndexPatternArray) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseOpensearchIndexPattern] {
	return pulumix.Output[[]DatabaseOpensearchIndexPattern]{
		OutputState: i.ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchIndexPatternOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (o DatabaseOpensearchIndexPatternOutput) ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternOutput) ToDatabaseOpensearchIndexPatternOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexPattern] {
	return pulumix.Output[DatabaseOpensearchIndexPattern]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexPatternOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *int { return v.MaxIndexCount }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexPatternOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o DatabaseOpensearchIndexPatternOutput) SortingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *string { return v.SortingAlgorithm }).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchIndexPatternArrayOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternArrayOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseOpensearchIndexPattern] {
	return pulumix.Output[[]DatabaseOpensearchIndexPattern]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexPatternArrayOutput) Index(i pulumi.IntInput) DatabaseOpensearchIndexPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseOpensearchIndexPattern {
		return vs[0].([]DatabaseOpensearchIndexPattern)[vs[1].(int)]
	}).(DatabaseOpensearchIndexPatternOutput)
}

type DatabaseOpensearchIndexTemplate struct {
	MappingNestedObjectsLimit *int `pulumi:"mappingNestedObjectsLimit"`
	NumberOfReplicas          *int `pulumi:"numberOfReplicas"`
	NumberOfShards            *int `pulumi:"numberOfShards"`
}

// DatabaseOpensearchIndexTemplateInput is an input type that accepts DatabaseOpensearchIndexTemplateArgs and DatabaseOpensearchIndexTemplateOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexTemplateInput` via:
//
//	DatabaseOpensearchIndexTemplateArgs{...}
type DatabaseOpensearchIndexTemplateInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput
	ToDatabaseOpensearchIndexTemplateOutputWithContext(context.Context) DatabaseOpensearchIndexTemplateOutput
}

type DatabaseOpensearchIndexTemplateArgs struct {
	MappingNestedObjectsLimit pulumi.IntPtrInput `pulumi:"mappingNestedObjectsLimit"`
	NumberOfReplicas          pulumi.IntPtrInput `pulumi:"numberOfReplicas"`
	NumberOfShards            pulumi.IntPtrInput `pulumi:"numberOfShards"`
}

func (DatabaseOpensearchIndexTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput {
	return i.ToDatabaseOpensearchIndexTemplateOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplateOutput)
}

func (i DatabaseOpensearchIndexTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[DatabaseOpensearchIndexTemplate]{
		OutputState: i.ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplateOutput).ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx)
}

// DatabaseOpensearchIndexTemplatePtrInput is an input type that accepts DatabaseOpensearchIndexTemplateArgs, DatabaseOpensearchIndexTemplatePtr and DatabaseOpensearchIndexTemplatePtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexTemplatePtrInput` via:
//
//	        DatabaseOpensearchIndexTemplateArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchIndexTemplatePtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput
	ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Context) DatabaseOpensearchIndexTemplatePtrOutput
}

type databaseOpensearchIndexTemplatePtrType DatabaseOpensearchIndexTemplateArgs

func DatabaseOpensearchIndexTemplatePtr(v *DatabaseOpensearchIndexTemplateArgs) DatabaseOpensearchIndexTemplatePtrInput {
	return (*databaseOpensearchIndexTemplatePtrType)(v)
}

func (*databaseOpensearchIndexTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (i *databaseOpensearchIndexTemplatePtrType) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchIndexTemplatePtrType) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplatePtrOutput)
}

func (i *databaseOpensearchIndexTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[*DatabaseOpensearchIndexTemplate]{
		OutputState: i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchIndexTemplateOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplateOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearchIndexTemplate) *DatabaseOpensearchIndexTemplate {
		return &v
	}).(DatabaseOpensearchIndexTemplatePtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[DatabaseOpensearchIndexTemplate]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexTemplateOutput) MappingNestedObjectsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.MappingNestedObjectsLimit }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) NumberOfReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.NumberOfReplicas }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) NumberOfShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.NumberOfShards }).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchIndexTemplatePtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[*DatabaseOpensearchIndexTemplate]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) Elem() DatabaseOpensearchIndexTemplateOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) DatabaseOpensearchIndexTemplate {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearchIndexTemplate
		return ret
	}).(DatabaseOpensearchIndexTemplateOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) MappingNestedObjectsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.MappingNestedObjectsLimit
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) NumberOfReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfReplicas
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) NumberOfShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfShards
	}).(pulumi.IntPtrOutput)
}

type DatabasePg struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings *string `pulumi:"pgSettings"`
	// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
	PgbouncerSettings *string `pulumi:"pgbouncerSettings"`
	// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
	PglookoutSettings *string `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabasePgInput is an input type that accepts DatabasePgArgs and DatabasePgOutput values.
// You can construct a concrete instance of `DatabasePgInput` via:
//
//	DatabasePgArgs{...}
type DatabasePgInput interface {
	pulumi.Input

	ToDatabasePgOutput() DatabasePgOutput
	ToDatabasePgOutputWithContext(context.Context) DatabasePgOutput
}

type DatabasePgArgs struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings pulumi.StringPtrInput `pulumi:"pgSettings"`
	// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
	PgbouncerSettings pulumi.StringPtrInput `pulumi:"pgbouncerSettings"`
	// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
	PglookoutSettings pulumi.StringPtrInput `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabasePgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (i DatabasePgArgs) ToDatabasePgOutput() DatabasePgOutput {
	return i.ToDatabasePgOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput)
}

func (i DatabasePgArgs) ToOutput(ctx context.Context) pulumix.Output[DatabasePg] {
	return pulumix.Output[DatabasePg]{
		OutputState: i.ToDatabasePgOutputWithContext(ctx).OutputState,
	}
}

func (i DatabasePgArgs) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput).ToDatabasePgPtrOutputWithContext(ctx)
}

// DatabasePgPtrInput is an input type that accepts DatabasePgArgs, DatabasePgPtr and DatabasePgPtrOutput values.
// You can construct a concrete instance of `DatabasePgPtrInput` via:
//
//	        DatabasePgArgs{...}
//
//	or:
//
//	        nil
type DatabasePgPtrInput interface {
	pulumi.Input

	ToDatabasePgPtrOutput() DatabasePgPtrOutput
	ToDatabasePgPtrOutputWithContext(context.Context) DatabasePgPtrOutput
}

type databasePgPtrType DatabasePgArgs

func DatabasePgPtr(v *DatabasePgArgs) DatabasePgPtrInput {
	return (*databasePgPtrType)(v)
}

func (*databasePgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (i *databasePgPtrType) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i *databasePgPtrType) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgPtrOutput)
}

func (i *databasePgPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabasePg] {
	return pulumix.Output[*DatabasePg]{
		OutputState: i.ToDatabasePgPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabasePgOutput struct{ *pulumi.OutputState }

func (DatabasePgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (o DatabasePgOutput) ToDatabasePgOutput() DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (o DatabasePgOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabasePg) *DatabasePg {
		return &v
	}).(DatabasePgPtrOutput)
}

func (o DatabasePgOutput) ToOutput(ctx context.Context) pulumix.Output[DatabasePg] {
	return pulumix.Output[DatabasePg]{
		OutputState: o.OutputState,
	}
}

// A custom administrator account password (may only be set at creation time).
func (o DatabasePgOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabasePgOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabasePgOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePg) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgSettings }).(pulumi.StringPtrOutput)
}

// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
func (o DatabasePgOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgbouncerSettings }).(pulumi.StringPtrOutput)
}

// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
func (o DatabasePgOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PglookoutSettings }).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
func (o DatabasePgOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabasePgPtrOutput struct{ *pulumi.OutputState }

func (DatabasePgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabasePg] {
	return pulumix.Output[*DatabasePg]{
		OutputState: o.OutputState,
	}
}

func (o DatabasePgPtrOutput) Elem() DatabasePgOutput {
	return o.ApplyT(func(v *DatabasePg) DatabasePg {
		if v != nil {
			return *v
		}
		var ret DatabasePg
		return ret
	}).(DatabasePgOutput)
}

// A custom administrator account password (may only be set at creation time).
func (o DatabasePgPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabasePgPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabasePgPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasePg) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgPtrOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgSettings
	}).(pulumi.StringPtrOutput)
}

// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
func (o DatabasePgPtrOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgbouncerSettings
	}).(pulumi.StringPtrOutput)
}

// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
func (o DatabasePgPtrOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PglookoutSettings
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
func (o DatabasePgPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseRedis struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings *string `pulumi:"redisSettings"`
}

// DatabaseRedisInput is an input type that accepts DatabaseRedisArgs and DatabaseRedisOutput values.
// You can construct a concrete instance of `DatabaseRedisInput` via:
//
//	DatabaseRedisArgs{...}
type DatabaseRedisInput interface {
	pulumi.Input

	ToDatabaseRedisOutput() DatabaseRedisOutput
	ToDatabaseRedisOutputWithContext(context.Context) DatabaseRedisOutput
}

type DatabaseRedisArgs struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings pulumi.StringPtrInput `pulumi:"redisSettings"`
}

func (DatabaseRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return i.ToDatabaseRedisOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput)
}

func (i DatabaseRedisArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseRedis] {
	return pulumix.Output[DatabaseRedis]{
		OutputState: i.ToDatabaseRedisOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput).ToDatabaseRedisPtrOutputWithContext(ctx)
}

// DatabaseRedisPtrInput is an input type that accepts DatabaseRedisArgs, DatabaseRedisPtr and DatabaseRedisPtrOutput values.
// You can construct a concrete instance of `DatabaseRedisPtrInput` via:
//
//	        DatabaseRedisArgs{...}
//
//	or:
//
//	        nil
type DatabaseRedisPtrInput interface {
	pulumi.Input

	ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput
	ToDatabaseRedisPtrOutputWithContext(context.Context) DatabaseRedisPtrOutput
}

type databaseRedisPtrType DatabaseRedisArgs

func DatabaseRedisPtr(v *DatabaseRedisArgs) DatabaseRedisPtrInput {
	return (*databaseRedisPtrType)(v)
}

func (*databaseRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisPtrOutput)
}

func (i *databaseRedisPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseRedis] {
	return pulumix.Output[*DatabaseRedis]{
		OutputState: i.ToDatabaseRedisPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseRedisOutput struct{ *pulumi.OutputState }

func (DatabaseRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseRedis) *DatabaseRedis {
		return &v
	}).(DatabaseRedisPtrOutput)
}

func (o DatabaseRedisOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseRedis] {
	return pulumix.Output[DatabaseRedis]{
		OutputState: o.OutputState,
	}
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseRedis) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRedis) *string { return v.RedisSettings }).(pulumi.StringPtrOutput)
}

type DatabaseRedisPtrOutput struct{ *pulumi.OutputState }

func (DatabaseRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseRedis] {
	return pulumix.Output[*DatabaseRedis]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseRedisPtrOutput) Elem() DatabaseRedisOutput {
	return o.ApplyT(func(v *DatabaseRedis) DatabaseRedis {
		if v != nil {
			return *v
		}
		var ret DatabaseRedis
		return ret
	}).(DatabaseRedisOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseRedis) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisPtrOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseRedis) *string {
		if v == nil {
			return nil
		}
		return v.RedisSettings
	}).(pulumi.StringPtrOutput)
}

type ElasticIPHealthcheck struct {
	// The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
	Interval *int `pulumi:"interval"`
	// The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
	Mode string `pulumi:"mode"`
	// The healthcheck target port (must be between `1` and `65535`).
	Port int `pulumi:"port"`
	// The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
	StrikesFail *int `pulumi:"strikesFail"`
	// The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
	StrikesOk *int `pulumi:"strikesOk"`
	// The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
	Timeout *int `pulumi:"timeout"`
	// Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// The healthcheck server name to present with SNI in `https` mode.
	TlsSni *string `pulumi:"tlsSni"`
	// The healthcheck target URI (required in `http(s)` modes).
	Uri *string `pulumi:"uri"`
}

// ElasticIPHealthcheckInput is an input type that accepts ElasticIPHealthcheckArgs and ElasticIPHealthcheckOutput values.
// You can construct a concrete instance of `ElasticIPHealthcheckInput` via:
//
//	ElasticIPHealthcheckArgs{...}
type ElasticIPHealthcheckInput interface {
	pulumi.Input

	ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput
	ToElasticIPHealthcheckOutputWithContext(context.Context) ElasticIPHealthcheckOutput
}

type ElasticIPHealthcheckArgs struct {
	// The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
	Mode pulumi.StringInput `pulumi:"mode"`
	// The healthcheck target port (must be between `1` and `65535`).
	Port pulumi.IntInput `pulumi:"port"`
	// The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
	StrikesFail pulumi.IntPtrInput `pulumi:"strikesFail"`
	// The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
	StrikesOk pulumi.IntPtrInput `pulumi:"strikesOk"`
	// The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
	TlsSkipVerify pulumi.BoolPtrInput `pulumi:"tlsSkipVerify"`
	// The healthcheck server name to present with SNI in `https` mode.
	TlsSni pulumi.StringPtrInput `pulumi:"tlsSni"`
	// The healthcheck target URI (required in `http(s)` modes).
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ElasticIPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticIPHealthcheck)(nil)).Elem()
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput {
	return i.ToElasticIPHealthcheckOutputWithContext(context.Background())
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckOutputWithContext(ctx context.Context) ElasticIPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckOutput)
}

func (i ElasticIPHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[ElasticIPHealthcheck] {
	return pulumix.Output[ElasticIPHealthcheck]{
		OutputState: i.ToElasticIPHealthcheckOutputWithContext(ctx).OutputState,
	}
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return i.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (i ElasticIPHealthcheckArgs) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckOutput).ToElasticIPHealthcheckPtrOutputWithContext(ctx)
}

// ElasticIPHealthcheckPtrInput is an input type that accepts ElasticIPHealthcheckArgs, ElasticIPHealthcheckPtr and ElasticIPHealthcheckPtrOutput values.
// You can construct a concrete instance of `ElasticIPHealthcheckPtrInput` via:
//
//	        ElasticIPHealthcheckArgs{...}
//
//	or:
//
//	        nil
type ElasticIPHealthcheckPtrInput interface {
	pulumi.Input

	ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput
	ToElasticIPHealthcheckPtrOutputWithContext(context.Context) ElasticIPHealthcheckPtrOutput
}

type elasticIPHealthcheckPtrType ElasticIPHealthcheckArgs

func ElasticIPHealthcheckPtr(v *ElasticIPHealthcheckArgs) ElasticIPHealthcheckPtrInput {
	return (*elasticIPHealthcheckPtrType)(v)
}

func (*elasticIPHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIPHealthcheck)(nil)).Elem()
}

func (i *elasticIPHealthcheckPtrType) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return i.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (i *elasticIPHealthcheckPtrType) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticIPHealthcheckPtrOutput)
}

func (i *elasticIPHealthcheckPtrType) ToOutput(ctx context.Context) pulumix.Output[*ElasticIPHealthcheck] {
	return pulumix.Output[*ElasticIPHealthcheck]{
		OutputState: i.ToElasticIPHealthcheckPtrOutputWithContext(ctx).OutputState,
	}
}

type ElasticIPHealthcheckOutput struct{ *pulumi.OutputState }

func (ElasticIPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticIPHealthcheck)(nil)).Elem()
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckOutput() ElasticIPHealthcheckOutput {
	return o
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckOutputWithContext(ctx context.Context) ElasticIPHealthcheckOutput {
	return o
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return o.ToElasticIPHealthcheckPtrOutputWithContext(context.Background())
}

func (o ElasticIPHealthcheckOutput) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticIPHealthcheck) *ElasticIPHealthcheck {
		return &v
	}).(ElasticIPHealthcheckPtrOutput)
}

func (o ElasticIPHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[ElasticIPHealthcheck] {
	return pulumix.Output[ElasticIPHealthcheck]{
		OutputState: o.OutputState,
	}
}

// The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
func (o ElasticIPHealthcheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
func (o ElasticIPHealthcheckOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) string { return v.Mode }).(pulumi.StringOutput)
}

// The healthcheck target port (must be between `1` and `65535`).
func (o ElasticIPHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
func (o ElasticIPHealthcheckOutput) StrikesFail() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.StrikesFail }).(pulumi.IntPtrOutput)
}

// The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
func (o ElasticIPHealthcheckOutput) StrikesOk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.StrikesOk }).(pulumi.IntPtrOutput)
}

// The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
func (o ElasticIPHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
func (o ElasticIPHealthcheckOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

// The healthcheck server name to present with SNI in `https` mode.
func (o ElasticIPHealthcheckOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *string { return v.TlsSni }).(pulumi.StringPtrOutput)
}

// The healthcheck target URI (required in `http(s)` modes).
func (o ElasticIPHealthcheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticIPHealthcheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ElasticIPHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (ElasticIPHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticIPHealthcheck)(nil)).Elem()
}

func (o ElasticIPHealthcheckPtrOutput) ToElasticIPHealthcheckPtrOutput() ElasticIPHealthcheckPtrOutput {
	return o
}

func (o ElasticIPHealthcheckPtrOutput) ToElasticIPHealthcheckPtrOutputWithContext(ctx context.Context) ElasticIPHealthcheckPtrOutput {
	return o
}

func (o ElasticIPHealthcheckPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ElasticIPHealthcheck] {
	return pulumix.Output[*ElasticIPHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o ElasticIPHealthcheckPtrOutput) Elem() ElasticIPHealthcheckOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) ElasticIPHealthcheck {
		if v != nil {
			return *v
		}
		var ret ElasticIPHealthcheck
		return ret
	}).(ElasticIPHealthcheckOutput)
}

// The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
func (o ElasticIPHealthcheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
func (o ElasticIPHealthcheckPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// The healthcheck target port (must be between `1` and `65535`).
func (o ElasticIPHealthcheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
func (o ElasticIPHealthcheckPtrOutput) StrikesFail() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.StrikesFail
	}).(pulumi.IntPtrOutput)
}

// The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
func (o ElasticIPHealthcheckPtrOutput) StrikesOk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.StrikesOk
	}).(pulumi.IntPtrOutput)
}

// The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
func (o ElasticIPHealthcheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
func (o ElasticIPHealthcheckPtrOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// The healthcheck server name to present with SNI in `https` mode.
func (o ElasticIPHealthcheckPtrOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.TlsSni
	}).(pulumi.StringPtrOutput)
}

// The healthcheck target URI (required in `http(s)` modes).
func (o ElasticIPHealthcheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticIPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type InstancePoolInstance struct {
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// The instance (main network interface) IPv6 address.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The instance name.
	Name *string `pulumi:"name"`
	// The instance (main network interface) IPv4 address.
	PublicIpAddress *string `pulumi:"publicIpAddress"`
}

// InstancePoolInstanceInput is an input type that accepts InstancePoolInstanceArgs and InstancePoolInstanceOutput values.
// You can construct a concrete instance of `InstancePoolInstanceInput` via:
//
//	InstancePoolInstanceArgs{...}
type InstancePoolInstanceInput interface {
	pulumi.Input

	ToInstancePoolInstanceOutput() InstancePoolInstanceOutput
	ToInstancePoolInstanceOutputWithContext(context.Context) InstancePoolInstanceOutput
}

type InstancePoolInstanceArgs struct {
	// The ID of this resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The instance (main network interface) IPv6 address.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	// The instance name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The instance (main network interface) IPv4 address.
	PublicIpAddress pulumi.StringPtrInput `pulumi:"publicIpAddress"`
}

func (InstancePoolInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePoolInstance)(nil)).Elem()
}

func (i InstancePoolInstanceArgs) ToInstancePoolInstanceOutput() InstancePoolInstanceOutput {
	return i.ToInstancePoolInstanceOutputWithContext(context.Background())
}

func (i InstancePoolInstanceArgs) ToInstancePoolInstanceOutputWithContext(ctx context.Context) InstancePoolInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePoolInstanceOutput)
}

func (i InstancePoolInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[InstancePoolInstance] {
	return pulumix.Output[InstancePoolInstance]{
		OutputState: i.ToInstancePoolInstanceOutputWithContext(ctx).OutputState,
	}
}

// InstancePoolInstanceArrayInput is an input type that accepts InstancePoolInstanceArray and InstancePoolInstanceArrayOutput values.
// You can construct a concrete instance of `InstancePoolInstanceArrayInput` via:
//
//	InstancePoolInstanceArray{ InstancePoolInstanceArgs{...} }
type InstancePoolInstanceArrayInput interface {
	pulumi.Input

	ToInstancePoolInstanceArrayOutput() InstancePoolInstanceArrayOutput
	ToInstancePoolInstanceArrayOutputWithContext(context.Context) InstancePoolInstanceArrayOutput
}

type InstancePoolInstanceArray []InstancePoolInstanceInput

func (InstancePoolInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePoolInstance)(nil)).Elem()
}

func (i InstancePoolInstanceArray) ToInstancePoolInstanceArrayOutput() InstancePoolInstanceArrayOutput {
	return i.ToInstancePoolInstanceArrayOutputWithContext(context.Background())
}

func (i InstancePoolInstanceArray) ToInstancePoolInstanceArrayOutputWithContext(ctx context.Context) InstancePoolInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePoolInstanceArrayOutput)
}

func (i InstancePoolInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]InstancePoolInstance] {
	return pulumix.Output[[]InstancePoolInstance]{
		OutputState: i.ToInstancePoolInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type InstancePoolInstanceOutput struct{ *pulumi.OutputState }

func (InstancePoolInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePoolInstance)(nil)).Elem()
}

func (o InstancePoolInstanceOutput) ToInstancePoolInstanceOutput() InstancePoolInstanceOutput {
	return o
}

func (o InstancePoolInstanceOutput) ToInstancePoolInstanceOutputWithContext(ctx context.Context) InstancePoolInstanceOutput {
	return o
}

func (o InstancePoolInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[InstancePoolInstance] {
	return pulumix.Output[InstancePoolInstance]{
		OutputState: o.OutputState,
	}
}

// The ID of this resource.
func (o InstancePoolInstanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePoolInstance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The instance (main network interface) IPv6 address.
func (o InstancePoolInstanceOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePoolInstance) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// The instance name.
func (o InstancePoolInstanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePoolInstance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The instance (main network interface) IPv4 address.
func (o InstancePoolInstanceOutput) PublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePoolInstance) *string { return v.PublicIpAddress }).(pulumi.StringPtrOutput)
}

type InstancePoolInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancePoolInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePoolInstance)(nil)).Elem()
}

func (o InstancePoolInstanceArrayOutput) ToInstancePoolInstanceArrayOutput() InstancePoolInstanceArrayOutput {
	return o
}

func (o InstancePoolInstanceArrayOutput) ToInstancePoolInstanceArrayOutputWithContext(ctx context.Context) InstancePoolInstanceArrayOutput {
	return o
}

func (o InstancePoolInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstancePoolInstance] {
	return pulumix.Output[[]InstancePoolInstance]{
		OutputState: o.OutputState,
	}
}

func (o InstancePoolInstanceArrayOutput) Index(i pulumi.IntInput) InstancePoolInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePoolInstance {
		return vs[0].([]InstancePoolInstance)[vs[1].(int)]
	}).(InstancePoolInstanceOutput)
}

type NLBServiceHealthcheck struct {
	// The healthcheck interval in seconds (default: `10`).
	Interval *int `pulumi:"interval"`
	// The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
	Mode *string `pulumi:"mode"`
	// The NLB service (TCP/UDP) port.
	Port int `pulumi:"port"`
	// The healthcheck retries (default: `1`).
	Retries *int `pulumi:"retries"`
	// The healthcheck timeout (seconds; default: `5`).
	Timeout *int `pulumi:"timeout"`
	// The healthcheck TLS SNI server name (only if `mode` is `https`).
	TlsSni *string `pulumi:"tlsSni"`
	// The healthcheck URI (must be set only if `mode` is `http(s)`).
	Uri *string `pulumi:"uri"`
}

// NLBServiceHealthcheckInput is an input type that accepts NLBServiceHealthcheckArgs and NLBServiceHealthcheckOutput values.
// You can construct a concrete instance of `NLBServiceHealthcheckInput` via:
//
//	NLBServiceHealthcheckArgs{...}
type NLBServiceHealthcheckInput interface {
	pulumi.Input

	ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput
	ToNLBServiceHealthcheckOutputWithContext(context.Context) NLBServiceHealthcheckOutput
}

type NLBServiceHealthcheckArgs struct {
	// The healthcheck interval in seconds (default: `10`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The NLB service (TCP/UDP) port.
	Port pulumi.IntInput `pulumi:"port"`
	// The healthcheck retries (default: `1`).
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The healthcheck timeout (seconds; default: `5`).
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The healthcheck TLS SNI server name (only if `mode` is `https`).
	TlsSni pulumi.StringPtrInput `pulumi:"tlsSni"`
	// The healthcheck URI (must be set only if `mode` is `http(s)`).
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (NLBServiceHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NLBServiceHealthcheck)(nil)).Elem()
}

func (i NLBServiceHealthcheckArgs) ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput {
	return i.ToNLBServiceHealthcheckOutputWithContext(context.Background())
}

func (i NLBServiceHealthcheckArgs) ToNLBServiceHealthcheckOutputWithContext(ctx context.Context) NLBServiceHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NLBServiceHealthcheckOutput)
}

func (i NLBServiceHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[NLBServiceHealthcheck] {
	return pulumix.Output[NLBServiceHealthcheck]{
		OutputState: i.ToNLBServiceHealthcheckOutputWithContext(ctx).OutputState,
	}
}

// NLBServiceHealthcheckArrayInput is an input type that accepts NLBServiceHealthcheckArray and NLBServiceHealthcheckArrayOutput values.
// You can construct a concrete instance of `NLBServiceHealthcheckArrayInput` via:
//
//	NLBServiceHealthcheckArray{ NLBServiceHealthcheckArgs{...} }
type NLBServiceHealthcheckArrayInput interface {
	pulumi.Input

	ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput
	ToNLBServiceHealthcheckArrayOutputWithContext(context.Context) NLBServiceHealthcheckArrayOutput
}

type NLBServiceHealthcheckArray []NLBServiceHealthcheckInput

func (NLBServiceHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NLBServiceHealthcheck)(nil)).Elem()
}

func (i NLBServiceHealthcheckArray) ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput {
	return i.ToNLBServiceHealthcheckArrayOutputWithContext(context.Background())
}

func (i NLBServiceHealthcheckArray) ToNLBServiceHealthcheckArrayOutputWithContext(ctx context.Context) NLBServiceHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NLBServiceHealthcheckArrayOutput)
}

func (i NLBServiceHealthcheckArray) ToOutput(ctx context.Context) pulumix.Output[[]NLBServiceHealthcheck] {
	return pulumix.Output[[]NLBServiceHealthcheck]{
		OutputState: i.ToNLBServiceHealthcheckArrayOutputWithContext(ctx).OutputState,
	}
}

type NLBServiceHealthcheckOutput struct{ *pulumi.OutputState }

func (NLBServiceHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NLBServiceHealthcheck)(nil)).Elem()
}

func (o NLBServiceHealthcheckOutput) ToNLBServiceHealthcheckOutput() NLBServiceHealthcheckOutput {
	return o
}

func (o NLBServiceHealthcheckOutput) ToNLBServiceHealthcheckOutputWithContext(ctx context.Context) NLBServiceHealthcheckOutput {
	return o
}

func (o NLBServiceHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[NLBServiceHealthcheck] {
	return pulumix.Output[NLBServiceHealthcheck]{
		OutputState: o.OutputState,
	}
}

// The healthcheck interval in seconds (default: `10`).
func (o NLBServiceHealthcheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
func (o NLBServiceHealthcheckOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The NLB service (TCP/UDP) port.
func (o NLBServiceHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

// The healthcheck retries (default: `1`).
func (o NLBServiceHealthcheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The healthcheck timeout (seconds; default: `5`).
func (o NLBServiceHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The healthcheck TLS SNI server name (only if `mode` is `https`).
func (o NLBServiceHealthcheckOutput) TlsSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.TlsSni }).(pulumi.StringPtrOutput)
}

// The healthcheck URI (must be set only if `mode` is `http(s)`).
func (o NLBServiceHealthcheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NLBServiceHealthcheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type NLBServiceHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (NLBServiceHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NLBServiceHealthcheck)(nil)).Elem()
}

func (o NLBServiceHealthcheckArrayOutput) ToNLBServiceHealthcheckArrayOutput() NLBServiceHealthcheckArrayOutput {
	return o
}

func (o NLBServiceHealthcheckArrayOutput) ToNLBServiceHealthcheckArrayOutputWithContext(ctx context.Context) NLBServiceHealthcheckArrayOutput {
	return o
}

func (o NLBServiceHealthcheckArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NLBServiceHealthcheck] {
	return pulumix.Output[[]NLBServiceHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o NLBServiceHealthcheckArrayOutput) Index(i pulumi.IntInput) NLBServiceHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NLBServiceHealthcheck {
		return vs[0].([]NLBServiceHealthcheck)[vs[1].(int)]
	}).(NLBServiceHealthcheckOutput)
}

type SKSClusterOidc struct {
	// The OpenID client ID.
	ClientId string `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl string `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim map[string]string `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim *string `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

// SKSClusterOidcInput is an input type that accepts SKSClusterOidcArgs and SKSClusterOidcOutput values.
// You can construct a concrete instance of `SKSClusterOidcInput` via:
//
//	SKSClusterOidcArgs{...}
type SKSClusterOidcInput interface {
	pulumi.Input

	ToSKSClusterOidcOutput() SKSClusterOidcOutput
	ToSKSClusterOidcOutputWithContext(context.Context) SKSClusterOidcOutput
}

type SKSClusterOidcArgs struct {
	// The OpenID client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim pulumi.StringPtrInput `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl pulumi.StringInput `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim pulumi.StringMapInput `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim pulumi.StringPtrInput `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (SKSClusterOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SKSClusterOidc)(nil)).Elem()
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcOutput() SKSClusterOidcOutput {
	return i.ToSKSClusterOidcOutputWithContext(context.Background())
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcOutputWithContext(ctx context.Context) SKSClusterOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcOutput)
}

func (i SKSClusterOidcArgs) ToOutput(ctx context.Context) pulumix.Output[SKSClusterOidc] {
	return pulumix.Output[SKSClusterOidc]{
		OutputState: i.ToSKSClusterOidcOutputWithContext(ctx).OutputState,
	}
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return i.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i SKSClusterOidcArgs) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcOutput).ToSKSClusterOidcPtrOutputWithContext(ctx)
}

// SKSClusterOidcPtrInput is an input type that accepts SKSClusterOidcArgs, SKSClusterOidcPtr and SKSClusterOidcPtrOutput values.
// You can construct a concrete instance of `SKSClusterOidcPtrInput` via:
//
//	        SKSClusterOidcArgs{...}
//
//	or:
//
//	        nil
type SKSClusterOidcPtrInput interface {
	pulumi.Input

	ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput
	ToSKSClusterOidcPtrOutputWithContext(context.Context) SKSClusterOidcPtrOutput
}

type sksclusterOidcPtrType SKSClusterOidcArgs

func SKSClusterOidcPtr(v *SKSClusterOidcArgs) SKSClusterOidcPtrInput {
	return (*sksclusterOidcPtrType)(v)
}

func (*sksclusterOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSClusterOidc)(nil)).Elem()
}

func (i *sksclusterOidcPtrType) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return i.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i *sksclusterOidcPtrType) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOidcPtrOutput)
}

func (i *sksclusterOidcPtrType) ToOutput(ctx context.Context) pulumix.Output[*SKSClusterOidc] {
	return pulumix.Output[*SKSClusterOidc]{
		OutputState: i.ToSKSClusterOidcPtrOutputWithContext(ctx).OutputState,
	}
}

type SKSClusterOidcOutput struct{ *pulumi.OutputState }

func (SKSClusterOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SKSClusterOidc)(nil)).Elem()
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcOutput() SKSClusterOidcOutput {
	return o
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcOutputWithContext(ctx context.Context) SKSClusterOidcOutput {
	return o
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return o.ToSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (o SKSClusterOidcOutput) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SKSClusterOidc) *SKSClusterOidc {
		return &v
	}).(SKSClusterOidcPtrOutput)
}

func (o SKSClusterOidcOutput) ToOutput(ctx context.Context) pulumix.Output[SKSClusterOidc] {
	return pulumix.Output[SKSClusterOidc]{
		OutputState: o.OutputState,
	}
}

// The OpenID client ID.
func (o SKSClusterOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v SKSClusterOidc) string { return v.ClientId }).(pulumi.StringOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o SKSClusterOidcOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o SKSClusterOidcOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o SKSClusterOidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SKSClusterOidc) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o SKSClusterOidcOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v SKSClusterOidc) map[string]string { return v.RequiredClaim }).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o SKSClusterOidcOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o SKSClusterOidcOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKSClusterOidc) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type SKSClusterOidcPtrOutput struct{ *pulumi.OutputState }

func (SKSClusterOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSClusterOidc)(nil)).Elem()
}

func (o SKSClusterOidcPtrOutput) ToSKSClusterOidcPtrOutput() SKSClusterOidcPtrOutput {
	return o
}

func (o SKSClusterOidcPtrOutput) ToSKSClusterOidcPtrOutputWithContext(ctx context.Context) SKSClusterOidcPtrOutput {
	return o
}

func (o SKSClusterOidcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SKSClusterOidc] {
	return pulumix.Output[*SKSClusterOidc]{
		OutputState: o.OutputState,
	}
}

func (o SKSClusterOidcPtrOutput) Elem() SKSClusterOidcOutput {
	return o.ApplyT(func(v *SKSClusterOidc) SKSClusterOidc {
		if v != nil {
			return *v
		}
		var ret SKSClusterOidc
		return ret
	}).(SKSClusterOidcOutput)
}

// The OpenID client ID.
func (o SKSClusterOidcPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o SKSClusterOidcPtrOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o SKSClusterOidcPtrOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsPrefix
	}).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o SKSClusterOidcPtrOutput) IssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUrl
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o SKSClusterOidcPtrOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SKSClusterOidc) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequiredClaim
	}).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o SKSClusterOidcPtrOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernameClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o SKSClusterOidcPtrOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernamePrefix
	}).(pulumi.StringPtrOutput)
}

type SecurityGroupRulesEgress struct {
	// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
	CidrLists []string `pulumi:"cidrLists"`
	// A free-form text describing the block.
	Description *string `pulumi:"description"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpCode *int `pulumi:"icmpCode"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpType *int     `pulumi:"icmpType"`
	Ids      []string `pulumi:"ids"`
	// A list of ports or port ranges (`<start_port>-<end_port>`).
	Ports []string `pulumi:"ports"`
	// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
	Protocol *string `pulumi:"protocol"`
	// A list of source (for ingress)/destination (for egress) identified by a security group.
	UserSecurityGroupLists []string `pulumi:"userSecurityGroupLists"`
}

// SecurityGroupRulesEgressInput is an input type that accepts SecurityGroupRulesEgressArgs and SecurityGroupRulesEgressOutput values.
// You can construct a concrete instance of `SecurityGroupRulesEgressInput` via:
//
//	SecurityGroupRulesEgressArgs{...}
type SecurityGroupRulesEgressInput interface {
	pulumi.Input

	ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput
	ToSecurityGroupRulesEgressOutputWithContext(context.Context) SecurityGroupRulesEgressOutput
}

type SecurityGroupRulesEgressArgs struct {
	// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
	CidrLists pulumi.StringArrayInput `pulumi:"cidrLists"`
	// A free-form text describing the block.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpType pulumi.IntPtrInput      `pulumi:"icmpType"`
	Ids      pulumi.StringArrayInput `pulumi:"ids"`
	// A list of ports or port ranges (`<start_port>-<end_port>`).
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// A list of source (for ingress)/destination (for egress) identified by a security group.
	UserSecurityGroupLists pulumi.StringArrayInput `pulumi:"userSecurityGroupLists"`
}

func (SecurityGroupRulesEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesEgress)(nil)).Elem()
}

func (i SecurityGroupRulesEgressArgs) ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput {
	return i.ToSecurityGroupRulesEgressOutputWithContext(context.Background())
}

func (i SecurityGroupRulesEgressArgs) ToSecurityGroupRulesEgressOutputWithContext(ctx context.Context) SecurityGroupRulesEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesEgressOutput)
}

func (i SecurityGroupRulesEgressArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupRulesEgress] {
	return pulumix.Output[SecurityGroupRulesEgress]{
		OutputState: i.ToSecurityGroupRulesEgressOutputWithContext(ctx).OutputState,
	}
}

// SecurityGroupRulesEgressArrayInput is an input type that accepts SecurityGroupRulesEgressArray and SecurityGroupRulesEgressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesEgressArrayInput` via:
//
//	SecurityGroupRulesEgressArray{ SecurityGroupRulesEgressArgs{...} }
type SecurityGroupRulesEgressArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput
	ToSecurityGroupRulesEgressArrayOutputWithContext(context.Context) SecurityGroupRulesEgressArrayOutput
}

type SecurityGroupRulesEgressArray []SecurityGroupRulesEgressInput

func (SecurityGroupRulesEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesEgress)(nil)).Elem()
}

func (i SecurityGroupRulesEgressArray) ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput {
	return i.ToSecurityGroupRulesEgressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesEgressArray) ToSecurityGroupRulesEgressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesEgressArrayOutput)
}

func (i SecurityGroupRulesEgressArray) ToOutput(ctx context.Context) pulumix.Output[[]SecurityGroupRulesEgress] {
	return pulumix.Output[[]SecurityGroupRulesEgress]{
		OutputState: i.ToSecurityGroupRulesEgressArrayOutputWithContext(ctx).OutputState,
	}
}

type SecurityGroupRulesEgressOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesEgress)(nil)).Elem()
}

func (o SecurityGroupRulesEgressOutput) ToSecurityGroupRulesEgressOutput() SecurityGroupRulesEgressOutput {
	return o
}

func (o SecurityGroupRulesEgressOutput) ToSecurityGroupRulesEgressOutputWithContext(ctx context.Context) SecurityGroupRulesEgressOutput {
	return o
}

func (o SecurityGroupRulesEgressOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupRulesEgress] {
	return pulumix.Output[SecurityGroupRulesEgress]{
		OutputState: o.OutputState,
	}
}

// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
func (o SecurityGroupRulesEgressOutput) CidrLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.CidrLists }).(pulumi.StringArrayOutput)
}

// A free-form text describing the block.
func (o SecurityGroupRulesEgressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An ICMP/ICMPv6 type/code to match.
func (o SecurityGroupRulesEgressOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// An ICMP/ICMPv6 type/code to match.
func (o SecurityGroupRulesEgressOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesEgressOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A list of ports or port ranges (`<start_port>-<end_port>`).
func (o SecurityGroupRulesEgressOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
func (o SecurityGroupRulesEgressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// A list of source (for ingress)/destination (for egress) identified by a security group.
func (o SecurityGroupRulesEgressOutput) UserSecurityGroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesEgress) []string { return v.UserSecurityGroupLists }).(pulumi.StringArrayOutput)
}

type SecurityGroupRulesEgressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesEgress)(nil)).Elem()
}

func (o SecurityGroupRulesEgressArrayOutput) ToSecurityGroupRulesEgressArrayOutput() SecurityGroupRulesEgressArrayOutput {
	return o
}

func (o SecurityGroupRulesEgressArrayOutput) ToSecurityGroupRulesEgressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesEgressArrayOutput {
	return o
}

func (o SecurityGroupRulesEgressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecurityGroupRulesEgress] {
	return pulumix.Output[[]SecurityGroupRulesEgress]{
		OutputState: o.OutputState,
	}
}

func (o SecurityGroupRulesEgressArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesEgress {
		return vs[0].([]SecurityGroupRulesEgress)[vs[1].(int)]
	}).(SecurityGroupRulesEgressOutput)
}

type SecurityGroupRulesIngress struct {
	// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
	CidrLists []string `pulumi:"cidrLists"`
	// A free-form text describing the block.
	Description *string `pulumi:"description"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpCode *int `pulumi:"icmpCode"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpType *int     `pulumi:"icmpType"`
	Ids      []string `pulumi:"ids"`
	// A list of ports or port ranges (`<start_port>-<end_port>`).
	Ports []string `pulumi:"ports"`
	// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
	Protocol *string `pulumi:"protocol"`
	// A list of source (for ingress)/destination (for egress) identified by a security group.
	UserSecurityGroupLists []string `pulumi:"userSecurityGroupLists"`
}

// SecurityGroupRulesIngressInput is an input type that accepts SecurityGroupRulesIngressArgs and SecurityGroupRulesIngressOutput values.
// You can construct a concrete instance of `SecurityGroupRulesIngressInput` via:
//
//	SecurityGroupRulesIngressArgs{...}
type SecurityGroupRulesIngressInput interface {
	pulumi.Input

	ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput
	ToSecurityGroupRulesIngressOutputWithContext(context.Context) SecurityGroupRulesIngressOutput
}

type SecurityGroupRulesIngressArgs struct {
	// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
	CidrLists pulumi.StringArrayInput `pulumi:"cidrLists"`
	// A free-form text describing the block.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpCode pulumi.IntPtrInput `pulumi:"icmpCode"`
	// An ICMP/ICMPv6 type/code to match.
	IcmpType pulumi.IntPtrInput      `pulumi:"icmpType"`
	Ids      pulumi.StringArrayInput `pulumi:"ids"`
	// A list of ports or port ranges (`<start_port>-<end_port>`).
	Ports pulumi.StringArrayInput `pulumi:"ports"`
	// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// A list of source (for ingress)/destination (for egress) identified by a security group.
	UserSecurityGroupLists pulumi.StringArrayInput `pulumi:"userSecurityGroupLists"`
}

func (SecurityGroupRulesIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesIngress)(nil)).Elem()
}

func (i SecurityGroupRulesIngressArgs) ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput {
	return i.ToSecurityGroupRulesIngressOutputWithContext(context.Background())
}

func (i SecurityGroupRulesIngressArgs) ToSecurityGroupRulesIngressOutputWithContext(ctx context.Context) SecurityGroupRulesIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesIngressOutput)
}

func (i SecurityGroupRulesIngressArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupRulesIngress] {
	return pulumix.Output[SecurityGroupRulesIngress]{
		OutputState: i.ToSecurityGroupRulesIngressOutputWithContext(ctx).OutputState,
	}
}

// SecurityGroupRulesIngressArrayInput is an input type that accepts SecurityGroupRulesIngressArray and SecurityGroupRulesIngressArrayOutput values.
// You can construct a concrete instance of `SecurityGroupRulesIngressArrayInput` via:
//
//	SecurityGroupRulesIngressArray{ SecurityGroupRulesIngressArgs{...} }
type SecurityGroupRulesIngressArrayInput interface {
	pulumi.Input

	ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput
	ToSecurityGroupRulesIngressArrayOutputWithContext(context.Context) SecurityGroupRulesIngressArrayOutput
}

type SecurityGroupRulesIngressArray []SecurityGroupRulesIngressInput

func (SecurityGroupRulesIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesIngress)(nil)).Elem()
}

func (i SecurityGroupRulesIngressArray) ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput {
	return i.ToSecurityGroupRulesIngressArrayOutputWithContext(context.Background())
}

func (i SecurityGroupRulesIngressArray) ToSecurityGroupRulesIngressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupRulesIngressArrayOutput)
}

func (i SecurityGroupRulesIngressArray) ToOutput(ctx context.Context) pulumix.Output[[]SecurityGroupRulesIngress] {
	return pulumix.Output[[]SecurityGroupRulesIngress]{
		OutputState: i.ToSecurityGroupRulesIngressArrayOutputWithContext(ctx).OutputState,
	}
}

type SecurityGroupRulesIngressOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupRulesIngress)(nil)).Elem()
}

func (o SecurityGroupRulesIngressOutput) ToSecurityGroupRulesIngressOutput() SecurityGroupRulesIngressOutput {
	return o
}

func (o SecurityGroupRulesIngressOutput) ToSecurityGroupRulesIngressOutputWithContext(ctx context.Context) SecurityGroupRulesIngressOutput {
	return o
}

func (o SecurityGroupRulesIngressOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityGroupRulesIngress] {
	return pulumix.Output[SecurityGroupRulesIngress]{
		OutputState: o.OutputState,
	}
}

// A list of (`INGRESS`) source / (`EGRESS`) destination IP subnet (in CIDR notation) to match.
func (o SecurityGroupRulesIngressOutput) CidrLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.CidrLists }).(pulumi.StringArrayOutput)
}

// A free-form text describing the block.
func (o SecurityGroupRulesIngressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An ICMP/ICMPv6 type/code to match.
func (o SecurityGroupRulesIngressOutput) IcmpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *int { return v.IcmpCode }).(pulumi.IntPtrOutput)
}

// An ICMP/ICMPv6 type/code to match.
func (o SecurityGroupRulesIngressOutput) IcmpType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *int { return v.IcmpType }).(pulumi.IntPtrOutput)
}

func (o SecurityGroupRulesIngressOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A list of ports or port ranges (`<start_port>-<end_port>`).
func (o SecurityGroupRulesIngressOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

// The network protocol to match (`TCP`, `UDP`, `ICMP`, `ICMPv6`, `AH`, `ESP`, `GRE`, `IPIP` or `ALL`).
func (o SecurityGroupRulesIngressOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// A list of source (for ingress)/destination (for egress) identified by a security group.
func (o SecurityGroupRulesIngressOutput) UserSecurityGroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityGroupRulesIngress) []string { return v.UserSecurityGroupLists }).(pulumi.StringArrayOutput)
}

type SecurityGroupRulesIngressArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupRulesIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupRulesIngress)(nil)).Elem()
}

func (o SecurityGroupRulesIngressArrayOutput) ToSecurityGroupRulesIngressArrayOutput() SecurityGroupRulesIngressArrayOutput {
	return o
}

func (o SecurityGroupRulesIngressArrayOutput) ToSecurityGroupRulesIngressArrayOutputWithContext(ctx context.Context) SecurityGroupRulesIngressArrayOutput {
	return o
}

func (o SecurityGroupRulesIngressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecurityGroupRulesIngress] {
	return pulumix.Output[[]SecurityGroupRulesIngress]{
		OutputState: o.OutputState,
	}
}

func (o SecurityGroupRulesIngressArrayOutput) Index(i pulumi.IntInput) SecurityGroupRulesIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupRulesIngress {
		return vs[0].([]SecurityGroupRulesIngress)[vs[1].(int)]
	}).(SecurityGroupRulesIngressOutput)
}

type GetComputeInstanceListInstance struct {
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt string `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	DeployTargetId string `pulumi:"deployTargetId"`
	// Match against this int
	DiskSize     int      `pulumi:"diskSize"`
	ElasticIpIds []string `pulumi:"elasticIpIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id *string `pulumi:"id"`
	// Match against this bool
	Ipv6 bool `pulumi:"ipv6"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Ipv6Address string `pulumi:"ipv6Address"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels map[string]string `pulumi:"labels"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ManagerId string `pulumi:"managerId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ManagerType string `pulumi:"managerType"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name              *string  `pulumi:"name"`
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ReverseDns       string   `pulumi:"reverseDns"`
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	SshKey string `pulumi:"sshKey"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State string `pulumi:"state"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	TemplateId string `pulumi:"templateId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Type string `pulumi:"type"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	UserData string `pulumi:"userData"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone string `pulumi:"zone"`
}

// GetComputeInstanceListInstanceInput is an input type that accepts GetComputeInstanceListInstanceArgs and GetComputeInstanceListInstanceOutput values.
// You can construct a concrete instance of `GetComputeInstanceListInstanceInput` via:
//
//	GetComputeInstanceListInstanceArgs{...}
type GetComputeInstanceListInstanceInput interface {
	pulumi.Input

	ToGetComputeInstanceListInstanceOutput() GetComputeInstanceListInstanceOutput
	ToGetComputeInstanceListInstanceOutputWithContext(context.Context) GetComputeInstanceListInstanceOutput
}

type GetComputeInstanceListInstanceArgs struct {
	AntiAffinityGroupIds pulumi.StringArrayInput `pulumi:"antiAffinityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	DeployTargetId pulumi.StringInput `pulumi:"deployTargetId"`
	// Match against this int
	DiskSize     pulumi.IntInput         `pulumi:"diskSize"`
	ElasticIpIds pulumi.StringArrayInput `pulumi:"elasticIpIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Match against this bool
	Ipv6 pulumi.BoolInput `pulumi:"ipv6"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ManagerId pulumi.StringInput `pulumi:"managerId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ManagerType pulumi.StringInput `pulumi:"managerType"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name              pulumi.StringPtrInput   `pulumi:"name"`
	PrivateNetworkIds pulumi.StringArrayInput `pulumi:"privateNetworkIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	PublicIpAddress pulumi.StringInput `pulumi:"publicIpAddress"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ReverseDns       pulumi.StringInput      `pulumi:"reverseDns"`
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	SshKey pulumi.StringInput `pulumi:"sshKey"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State pulumi.StringInput `pulumi:"state"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	TemplateId pulumi.StringInput `pulumi:"templateId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Type pulumi.StringInput `pulumi:"type"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	UserData pulumi.StringInput `pulumi:"userData"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetComputeInstanceListInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeInstanceListInstance)(nil)).Elem()
}

func (i GetComputeInstanceListInstanceArgs) ToGetComputeInstanceListInstanceOutput() GetComputeInstanceListInstanceOutput {
	return i.ToGetComputeInstanceListInstanceOutputWithContext(context.Background())
}

func (i GetComputeInstanceListInstanceArgs) ToGetComputeInstanceListInstanceOutputWithContext(ctx context.Context) GetComputeInstanceListInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetComputeInstanceListInstanceOutput)
}

func (i GetComputeInstanceListInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[GetComputeInstanceListInstance] {
	return pulumix.Output[GetComputeInstanceListInstance]{
		OutputState: i.ToGetComputeInstanceListInstanceOutputWithContext(ctx).OutputState,
	}
}

// GetComputeInstanceListInstanceArrayInput is an input type that accepts GetComputeInstanceListInstanceArray and GetComputeInstanceListInstanceArrayOutput values.
// You can construct a concrete instance of `GetComputeInstanceListInstanceArrayInput` via:
//
//	GetComputeInstanceListInstanceArray{ GetComputeInstanceListInstanceArgs{...} }
type GetComputeInstanceListInstanceArrayInput interface {
	pulumi.Input

	ToGetComputeInstanceListInstanceArrayOutput() GetComputeInstanceListInstanceArrayOutput
	ToGetComputeInstanceListInstanceArrayOutputWithContext(context.Context) GetComputeInstanceListInstanceArrayOutput
}

type GetComputeInstanceListInstanceArray []GetComputeInstanceListInstanceInput

func (GetComputeInstanceListInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetComputeInstanceListInstance)(nil)).Elem()
}

func (i GetComputeInstanceListInstanceArray) ToGetComputeInstanceListInstanceArrayOutput() GetComputeInstanceListInstanceArrayOutput {
	return i.ToGetComputeInstanceListInstanceArrayOutputWithContext(context.Background())
}

func (i GetComputeInstanceListInstanceArray) ToGetComputeInstanceListInstanceArrayOutputWithContext(ctx context.Context) GetComputeInstanceListInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetComputeInstanceListInstanceArrayOutput)
}

func (i GetComputeInstanceListInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetComputeInstanceListInstance] {
	return pulumix.Output[[]GetComputeInstanceListInstance]{
		OutputState: i.ToGetComputeInstanceListInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetComputeInstanceListInstanceOutput struct{ *pulumi.OutputState }

func (GetComputeInstanceListInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetComputeInstanceListInstance)(nil)).Elem()
}

func (o GetComputeInstanceListInstanceOutput) ToGetComputeInstanceListInstanceOutput() GetComputeInstanceListInstanceOutput {
	return o
}

func (o GetComputeInstanceListInstanceOutput) ToGetComputeInstanceListInstanceOutputWithContext(ctx context.Context) GetComputeInstanceListInstanceOutput {
	return o
}

func (o GetComputeInstanceListInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetComputeInstanceListInstance] {
	return pulumix.Output[GetComputeInstanceListInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetComputeInstanceListInstanceOutput) AntiAffinityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) []string { return v.AntiAffinityGroupIds }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) DeployTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.DeployTargetId }).(pulumi.StringOutput)
}

// Match against this int
func (o GetComputeInstanceListInstanceOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) int { return v.DiskSize }).(pulumi.IntOutput)
}

func (o GetComputeInstanceListInstanceOutput) ElasticIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) []string { return v.ElasticIpIds }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Match against this bool
func (o GetComputeInstanceListInstanceOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
func (o GetComputeInstanceListInstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) ManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.ManagerId }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) ManagerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.ManagerType }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetComputeInstanceListInstanceOutput) PrivateNetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) []string { return v.PrivateNetworkIds }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) ReverseDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.ReverseDns }).(pulumi.StringOutput)
}

func (o GetComputeInstanceListInstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) SshKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.SshKey }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.State }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.TemplateId }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.Type }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.UserData }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetComputeInstanceListInstanceOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetComputeInstanceListInstance) string { return v.Zone }).(pulumi.StringOutput)
}

type GetComputeInstanceListInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetComputeInstanceListInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetComputeInstanceListInstance)(nil)).Elem()
}

func (o GetComputeInstanceListInstanceArrayOutput) ToGetComputeInstanceListInstanceArrayOutput() GetComputeInstanceListInstanceArrayOutput {
	return o
}

func (o GetComputeInstanceListInstanceArrayOutput) ToGetComputeInstanceListInstanceArrayOutputWithContext(ctx context.Context) GetComputeInstanceListInstanceArrayOutput {
	return o
}

func (o GetComputeInstanceListInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetComputeInstanceListInstance] {
	return pulumix.Output[[]GetComputeInstanceListInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetComputeInstanceListInstanceArrayOutput) Index(i pulumi.IntInput) GetComputeInstanceListInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetComputeInstanceListInstance {
		return vs[0].([]GetComputeInstanceListInstance)[vs[1].(int)]
	}).(GetComputeInstanceListInstanceOutput)
}

type GetDomainRecordFilter struct {
	// A regular expression to match the record content.
	ContentRegex *string `pulumi:"contentRegex"`
	// The record ID to match.
	Id *string `pulumi:"id"`
	// The domain record name to match.
	Name *string `pulumi:"name"`
	// The record type to match.
	RecordType *string `pulumi:"recordType"`
}

// GetDomainRecordFilterInput is an input type that accepts GetDomainRecordFilterArgs and GetDomainRecordFilterOutput values.
// You can construct a concrete instance of `GetDomainRecordFilterInput` via:
//
//	GetDomainRecordFilterArgs{...}
type GetDomainRecordFilterInput interface {
	pulumi.Input

	ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput
	ToGetDomainRecordFilterOutputWithContext(context.Context) GetDomainRecordFilterOutput
}

type GetDomainRecordFilterArgs struct {
	// A regular expression to match the record content.
	ContentRegex pulumi.StringPtrInput `pulumi:"contentRegex"`
	// The record ID to match.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The domain record name to match.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The record type to match.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
}

func (GetDomainRecordFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordFilter)(nil)).Elem()
}

func (i GetDomainRecordFilterArgs) ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput {
	return i.ToGetDomainRecordFilterOutputWithContext(context.Background())
}

func (i GetDomainRecordFilterArgs) ToGetDomainRecordFilterOutputWithContext(ctx context.Context) GetDomainRecordFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordFilterOutput)
}

func (i GetDomainRecordFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordFilter] {
	return pulumix.Output[GetDomainRecordFilter]{
		OutputState: i.ToGetDomainRecordFilterOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordFilterOutput struct{ *pulumi.OutputState }

func (GetDomainRecordFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordFilter)(nil)).Elem()
}

func (o GetDomainRecordFilterOutput) ToGetDomainRecordFilterOutput() GetDomainRecordFilterOutput {
	return o
}

func (o GetDomainRecordFilterOutput) ToGetDomainRecordFilterOutputWithContext(ctx context.Context) GetDomainRecordFilterOutput {
	return o
}

func (o GetDomainRecordFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordFilter] {
	return pulumix.Output[GetDomainRecordFilter]{
		OutputState: o.OutputState,
	}
}

// A regular expression to match the record content.
func (o GetDomainRecordFilterOutput) ContentRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.ContentRegex }).(pulumi.StringPtrOutput)
}

// The record ID to match.
func (o GetDomainRecordFilterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The domain record name to match.
func (o GetDomainRecordFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The record type to match.
func (o GetDomainRecordFilterOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordFilter) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

type GetDomainRecordRecord struct {
	Content *string `pulumi:"content"`
	// The Domain name to match.
	Domain *string `pulumi:"domain"`
	// The ID of this resource.
	Id         *string `pulumi:"id"`
	Name       *string `pulumi:"name"`
	Prio       *int    `pulumi:"prio"`
	RecordType *string `pulumi:"recordType"`
	Ttl        *int    `pulumi:"ttl"`
}

// GetDomainRecordRecordInput is an input type that accepts GetDomainRecordRecordArgs and GetDomainRecordRecordOutput values.
// You can construct a concrete instance of `GetDomainRecordRecordInput` via:
//
//	GetDomainRecordRecordArgs{...}
type GetDomainRecordRecordInput interface {
	pulumi.Input

	ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput
	ToGetDomainRecordRecordOutputWithContext(context.Context) GetDomainRecordRecordOutput
}

type GetDomainRecordRecordArgs struct {
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The Domain name to match.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID of this resource.
	Id         pulumi.StringPtrInput `pulumi:"id"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Prio       pulumi.IntPtrInput    `pulumi:"prio"`
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	Ttl        pulumi.IntPtrInput    `pulumi:"ttl"`
}

func (GetDomainRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordRecord)(nil)).Elem()
}

func (i GetDomainRecordRecordArgs) ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput {
	return i.ToGetDomainRecordRecordOutputWithContext(context.Background())
}

func (i GetDomainRecordRecordArgs) ToGetDomainRecordRecordOutputWithContext(ctx context.Context) GetDomainRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordRecordOutput)
}

func (i GetDomainRecordRecordArgs) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordRecord] {
	return pulumix.Output[GetDomainRecordRecord]{
		OutputState: i.ToGetDomainRecordRecordOutputWithContext(ctx).OutputState,
	}
}

// GetDomainRecordRecordArrayInput is an input type that accepts GetDomainRecordRecordArray and GetDomainRecordRecordArrayOutput values.
// You can construct a concrete instance of `GetDomainRecordRecordArrayInput` via:
//
//	GetDomainRecordRecordArray{ GetDomainRecordRecordArgs{...} }
type GetDomainRecordRecordArrayInput interface {
	pulumi.Input

	ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput
	ToGetDomainRecordRecordArrayOutputWithContext(context.Context) GetDomainRecordRecordArrayOutput
}

type GetDomainRecordRecordArray []GetDomainRecordRecordInput

func (GetDomainRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordRecord)(nil)).Elem()
}

func (i GetDomainRecordRecordArray) ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput {
	return i.ToGetDomainRecordRecordArrayOutputWithContext(context.Background())
}

func (i GetDomainRecordRecordArray) ToGetDomainRecordRecordArrayOutputWithContext(ctx context.Context) GetDomainRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainRecordRecordArrayOutput)
}

func (i GetDomainRecordRecordArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordRecord] {
	return pulumix.Output[[]GetDomainRecordRecord]{
		OutputState: i.ToGetDomainRecordRecordArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDomainRecordRecordOutput struct{ *pulumi.OutputState }

func (GetDomainRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainRecordRecord)(nil)).Elem()
}

func (o GetDomainRecordRecordOutput) ToGetDomainRecordRecordOutput() GetDomainRecordRecordOutput {
	return o
}

func (o GetDomainRecordRecordOutput) ToGetDomainRecordRecordOutputWithContext(ctx context.Context) GetDomainRecordRecordOutput {
	return o
}

func (o GetDomainRecordRecordOutput) ToOutput(ctx context.Context) pulumix.Output[GetDomainRecordRecord] {
	return pulumix.Output[GetDomainRecordRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordRecordOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The Domain name to match.
func (o GetDomainRecordRecordOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of this resource.
func (o GetDomainRecordRecordOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetDomainRecordRecordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetDomainRecordRecordOutput) Prio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *int { return v.Prio }).(pulumi.IntPtrOutput)
}

func (o GetDomainRecordRecordOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o GetDomainRecordRecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainRecordRecord) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type GetDomainRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDomainRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainRecordRecord)(nil)).Elem()
}

func (o GetDomainRecordRecordArrayOutput) ToGetDomainRecordRecordArrayOutput() GetDomainRecordRecordArrayOutput {
	return o
}

func (o GetDomainRecordRecordArrayOutput) ToGetDomainRecordRecordArrayOutputWithContext(ctx context.Context) GetDomainRecordRecordArrayOutput {
	return o
}

func (o GetDomainRecordRecordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDomainRecordRecord] {
	return pulumix.Output[[]GetDomainRecordRecord]{
		OutputState: o.OutputState,
	}
}

func (o GetDomainRecordRecordArrayOutput) Index(i pulumi.IntInput) GetDomainRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainRecordRecord {
		return vs[0].([]GetDomainRecordRecord)[vs[1].(int)]
	}).(GetDomainRecordRecordOutput)
}

type GetElasticIPHealthcheck struct {
	Interval      int    `pulumi:"interval"`
	Mode          string `pulumi:"mode"`
	Port          int    `pulumi:"port"`
	StrikesFail   int    `pulumi:"strikesFail"`
	StrikesOk     int    `pulumi:"strikesOk"`
	Timeout       int    `pulumi:"timeout"`
	TlsSkipVerify bool   `pulumi:"tlsSkipVerify"`
	TlsSni        string `pulumi:"tlsSni"`
	Uri           string `pulumi:"uri"`
}

// GetElasticIPHealthcheckInput is an input type that accepts GetElasticIPHealthcheckArgs and GetElasticIPHealthcheckOutput values.
// You can construct a concrete instance of `GetElasticIPHealthcheckInput` via:
//
//	GetElasticIPHealthcheckArgs{...}
type GetElasticIPHealthcheckInput interface {
	pulumi.Input

	ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput
	ToGetElasticIPHealthcheckOutputWithContext(context.Context) GetElasticIPHealthcheckOutput
}

type GetElasticIPHealthcheckArgs struct {
	Interval      pulumi.IntInput    `pulumi:"interval"`
	Mode          pulumi.StringInput `pulumi:"mode"`
	Port          pulumi.IntInput    `pulumi:"port"`
	StrikesFail   pulumi.IntInput    `pulumi:"strikesFail"`
	StrikesOk     pulumi.IntInput    `pulumi:"strikesOk"`
	Timeout       pulumi.IntInput    `pulumi:"timeout"`
	TlsSkipVerify pulumi.BoolInput   `pulumi:"tlsSkipVerify"`
	TlsSni        pulumi.StringInput `pulumi:"tlsSni"`
	Uri           pulumi.StringInput `pulumi:"uri"`
}

func (GetElasticIPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetElasticIPHealthcheck)(nil)).Elem()
}

func (i GetElasticIPHealthcheckArgs) ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput {
	return i.ToGetElasticIPHealthcheckOutputWithContext(context.Background())
}

func (i GetElasticIPHealthcheckArgs) ToGetElasticIPHealthcheckOutputWithContext(ctx context.Context) GetElasticIPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetElasticIPHealthcheckOutput)
}

func (i GetElasticIPHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[GetElasticIPHealthcheck] {
	return pulumix.Output[GetElasticIPHealthcheck]{
		OutputState: i.ToGetElasticIPHealthcheckOutputWithContext(ctx).OutputState,
	}
}

// GetElasticIPHealthcheckArrayInput is an input type that accepts GetElasticIPHealthcheckArray and GetElasticIPHealthcheckArrayOutput values.
// You can construct a concrete instance of `GetElasticIPHealthcheckArrayInput` via:
//
//	GetElasticIPHealthcheckArray{ GetElasticIPHealthcheckArgs{...} }
type GetElasticIPHealthcheckArrayInput interface {
	pulumi.Input

	ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput
	ToGetElasticIPHealthcheckArrayOutputWithContext(context.Context) GetElasticIPHealthcheckArrayOutput
}

type GetElasticIPHealthcheckArray []GetElasticIPHealthcheckInput

func (GetElasticIPHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetElasticIPHealthcheck)(nil)).Elem()
}

func (i GetElasticIPHealthcheckArray) ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput {
	return i.ToGetElasticIPHealthcheckArrayOutputWithContext(context.Background())
}

func (i GetElasticIPHealthcheckArray) ToGetElasticIPHealthcheckArrayOutputWithContext(ctx context.Context) GetElasticIPHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetElasticIPHealthcheckArrayOutput)
}

func (i GetElasticIPHealthcheckArray) ToOutput(ctx context.Context) pulumix.Output[[]GetElasticIPHealthcheck] {
	return pulumix.Output[[]GetElasticIPHealthcheck]{
		OutputState: i.ToGetElasticIPHealthcheckArrayOutputWithContext(ctx).OutputState,
	}
}

type GetElasticIPHealthcheckOutput struct{ *pulumi.OutputState }

func (GetElasticIPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetElasticIPHealthcheck)(nil)).Elem()
}

func (o GetElasticIPHealthcheckOutput) ToGetElasticIPHealthcheckOutput() GetElasticIPHealthcheckOutput {
	return o
}

func (o GetElasticIPHealthcheckOutput) ToGetElasticIPHealthcheckOutputWithContext(ctx context.Context) GetElasticIPHealthcheckOutput {
	return o
}

func (o GetElasticIPHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetElasticIPHealthcheck] {
	return pulumix.Output[GetElasticIPHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o GetElasticIPHealthcheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Interval }).(pulumi.IntOutput)
}

func (o GetElasticIPHealthcheckOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetElasticIPHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetElasticIPHealthcheckOutput) StrikesFail() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.StrikesFail }).(pulumi.IntOutput)
}

func (o GetElasticIPHealthcheckOutput) StrikesOk() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.StrikesOk }).(pulumi.IntOutput)
}

func (o GetElasticIPHealthcheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) int { return v.Timeout }).(pulumi.IntOutput)
}

func (o GetElasticIPHealthcheckOutput) TlsSkipVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) bool { return v.TlsSkipVerify }).(pulumi.BoolOutput)
}

func (o GetElasticIPHealthcheckOutput) TlsSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.TlsSni }).(pulumi.StringOutput)
}

func (o GetElasticIPHealthcheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetElasticIPHealthcheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetElasticIPHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (GetElasticIPHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetElasticIPHealthcheck)(nil)).Elem()
}

func (o GetElasticIPHealthcheckArrayOutput) ToGetElasticIPHealthcheckArrayOutput() GetElasticIPHealthcheckArrayOutput {
	return o
}

func (o GetElasticIPHealthcheckArrayOutput) ToGetElasticIPHealthcheckArrayOutputWithContext(ctx context.Context) GetElasticIPHealthcheckArrayOutput {
	return o
}

func (o GetElasticIPHealthcheckArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetElasticIPHealthcheck] {
	return pulumix.Output[[]GetElasticIPHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o GetElasticIPHealthcheckArrayOutput) Index(i pulumi.IntInput) GetElasticIPHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetElasticIPHealthcheck {
		return vs[0].([]GetElasticIPHealthcheck)[vs[1].(int)]
	}).(GetElasticIPHealthcheckOutput)
}

type GetInstancePoolInstance struct {
	// The instance pool ID to match (conflicts with `name`).
	Id          *string `pulumi:"id"`
	Ipv6Address string  `pulumi:"ipv6Address"`
	// The pool name to match (conflicts with `id`).
	Name            *string `pulumi:"name"`
	PublicIpAddress string  `pulumi:"publicIpAddress"`
}

// GetInstancePoolInstanceInput is an input type that accepts GetInstancePoolInstanceArgs and GetInstancePoolInstanceOutput values.
// You can construct a concrete instance of `GetInstancePoolInstanceInput` via:
//
//	GetInstancePoolInstanceArgs{...}
type GetInstancePoolInstanceInput interface {
	pulumi.Input

	ToGetInstancePoolInstanceOutput() GetInstancePoolInstanceOutput
	ToGetInstancePoolInstanceOutputWithContext(context.Context) GetInstancePoolInstanceOutput
}

type GetInstancePoolInstanceArgs struct {
	// The instance pool ID to match (conflicts with `name`).
	Id          pulumi.StringPtrInput `pulumi:"id"`
	Ipv6Address pulumi.StringInput    `pulumi:"ipv6Address"`
	// The pool name to match (conflicts with `id`).
	Name            pulumi.StringPtrInput `pulumi:"name"`
	PublicIpAddress pulumi.StringInput    `pulumi:"publicIpAddress"`
}

func (GetInstancePoolInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolInstance)(nil)).Elem()
}

func (i GetInstancePoolInstanceArgs) ToGetInstancePoolInstanceOutput() GetInstancePoolInstanceOutput {
	return i.ToGetInstancePoolInstanceOutputWithContext(context.Background())
}

func (i GetInstancePoolInstanceArgs) ToGetInstancePoolInstanceOutputWithContext(ctx context.Context) GetInstancePoolInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolInstanceOutput)
}

func (i GetInstancePoolInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolInstance] {
	return pulumix.Output[GetInstancePoolInstance]{
		OutputState: i.ToGetInstancePoolInstanceOutputWithContext(ctx).OutputState,
	}
}

// GetInstancePoolInstanceArrayInput is an input type that accepts GetInstancePoolInstanceArray and GetInstancePoolInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancePoolInstanceArrayInput` via:
//
//	GetInstancePoolInstanceArray{ GetInstancePoolInstanceArgs{...} }
type GetInstancePoolInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancePoolInstanceArrayOutput() GetInstancePoolInstanceArrayOutput
	ToGetInstancePoolInstanceArrayOutputWithContext(context.Context) GetInstancePoolInstanceArrayOutput
}

type GetInstancePoolInstanceArray []GetInstancePoolInstanceInput

func (GetInstancePoolInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolInstance)(nil)).Elem()
}

func (i GetInstancePoolInstanceArray) ToGetInstancePoolInstanceArrayOutput() GetInstancePoolInstanceArrayOutput {
	return i.ToGetInstancePoolInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancePoolInstanceArray) ToGetInstancePoolInstanceArrayOutputWithContext(ctx context.Context) GetInstancePoolInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolInstanceArrayOutput)
}

func (i GetInstancePoolInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolInstance] {
	return pulumix.Output[[]GetInstancePoolInstance]{
		OutputState: i.ToGetInstancePoolInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstancePoolInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancePoolInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolInstance)(nil)).Elem()
}

func (o GetInstancePoolInstanceOutput) ToGetInstancePoolInstanceOutput() GetInstancePoolInstanceOutput {
	return o
}

func (o GetInstancePoolInstanceOutput) ToGetInstancePoolInstanceOutputWithContext(ctx context.Context) GetInstancePoolInstanceOutput {
	return o
}

func (o GetInstancePoolInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolInstance] {
	return pulumix.Output[GetInstancePoolInstance]{
		OutputState: o.OutputState,
	}
}

// The instance pool ID to match (conflicts with `name`).
func (o GetInstancePoolInstanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolInstance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolInstanceOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolInstance) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The pool name to match (conflicts with `id`).
func (o GetInstancePoolInstanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolInstance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolInstanceOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolInstance) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

type GetInstancePoolInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePoolInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolInstance)(nil)).Elem()
}

func (o GetInstancePoolInstanceArrayOutput) ToGetInstancePoolInstanceArrayOutput() GetInstancePoolInstanceArrayOutput {
	return o
}

func (o GetInstancePoolInstanceArrayOutput) ToGetInstancePoolInstanceArrayOutputWithContext(ctx context.Context) GetInstancePoolInstanceArrayOutput {
	return o
}

func (o GetInstancePoolInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolInstance] {
	return pulumix.Output[[]GetInstancePoolInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetInstancePoolInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancePoolInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePoolInstance {
		return vs[0].([]GetInstancePoolInstance)[vs[1].(int)]
	}).(GetInstancePoolInstanceOutput)
}

type GetInstancePoolListPool struct {
	AffinityGroupIds []string `pulumi:"affinityGroupIds"`
	DeployTargetId   string   `pulumi:"deployTargetId"`
	Description      string   `pulumi:"description"`
	DiskSize         int      `pulumi:"diskSize"`
	ElasticIpIds     []string `pulumi:"elasticIpIds"`
	// The ID of this resource.
	Id               *string                           `pulumi:"id"`
	InstancePrefix   string                            `pulumi:"instancePrefix"`
	InstanceType     string                            `pulumi:"instanceType"`
	Instances        []GetInstancePoolListPoolInstance `pulumi:"instances"`
	Ipv6             bool                              `pulumi:"ipv6"`
	KeyPair          string                            `pulumi:"keyPair"`
	Labels           map[string]string                 `pulumi:"labels"`
	Name             *string                           `pulumi:"name"`
	NetworkIds       []string                          `pulumi:"networkIds"`
	SecurityGroupIds []string                          `pulumi:"securityGroupIds"`
	Size             int                               `pulumi:"size"`
	State            string                            `pulumi:"state"`
	TemplateId       string                            `pulumi:"templateId"`
	UserData         string                            `pulumi:"userData"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// GetInstancePoolListPoolInput is an input type that accepts GetInstancePoolListPoolArgs and GetInstancePoolListPoolOutput values.
// You can construct a concrete instance of `GetInstancePoolListPoolInput` via:
//
//	GetInstancePoolListPoolArgs{...}
type GetInstancePoolListPoolInput interface {
	pulumi.Input

	ToGetInstancePoolListPoolOutput() GetInstancePoolListPoolOutput
	ToGetInstancePoolListPoolOutputWithContext(context.Context) GetInstancePoolListPoolOutput
}

type GetInstancePoolListPoolArgs struct {
	AffinityGroupIds pulumi.StringArrayInput `pulumi:"affinityGroupIds"`
	DeployTargetId   pulumi.StringInput      `pulumi:"deployTargetId"`
	Description      pulumi.StringInput      `pulumi:"description"`
	DiskSize         pulumi.IntInput         `pulumi:"diskSize"`
	ElasticIpIds     pulumi.StringArrayInput `pulumi:"elasticIpIds"`
	// The ID of this resource.
	Id               pulumi.StringPtrInput                     `pulumi:"id"`
	InstancePrefix   pulumi.StringInput                        `pulumi:"instancePrefix"`
	InstanceType     pulumi.StringInput                        `pulumi:"instanceType"`
	Instances        GetInstancePoolListPoolInstanceArrayInput `pulumi:"instances"`
	Ipv6             pulumi.BoolInput                          `pulumi:"ipv6"`
	KeyPair          pulumi.StringInput                        `pulumi:"keyPair"`
	Labels           pulumi.StringMapInput                     `pulumi:"labels"`
	Name             pulumi.StringPtrInput                     `pulumi:"name"`
	NetworkIds       pulumi.StringArrayInput                   `pulumi:"networkIds"`
	SecurityGroupIds pulumi.StringArrayInput                   `pulumi:"securityGroupIds"`
	Size             pulumi.IntInput                           `pulumi:"size"`
	State            pulumi.StringInput                        `pulumi:"state"`
	TemplateId       pulumi.StringInput                        `pulumi:"templateId"`
	UserData         pulumi.StringInput                        `pulumi:"userData"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetInstancePoolListPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolListPool)(nil)).Elem()
}

func (i GetInstancePoolListPoolArgs) ToGetInstancePoolListPoolOutput() GetInstancePoolListPoolOutput {
	return i.ToGetInstancePoolListPoolOutputWithContext(context.Background())
}

func (i GetInstancePoolListPoolArgs) ToGetInstancePoolListPoolOutputWithContext(ctx context.Context) GetInstancePoolListPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolListPoolOutput)
}

func (i GetInstancePoolListPoolArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolListPool] {
	return pulumix.Output[GetInstancePoolListPool]{
		OutputState: i.ToGetInstancePoolListPoolOutputWithContext(ctx).OutputState,
	}
}

// GetInstancePoolListPoolArrayInput is an input type that accepts GetInstancePoolListPoolArray and GetInstancePoolListPoolArrayOutput values.
// You can construct a concrete instance of `GetInstancePoolListPoolArrayInput` via:
//
//	GetInstancePoolListPoolArray{ GetInstancePoolListPoolArgs{...} }
type GetInstancePoolListPoolArrayInput interface {
	pulumi.Input

	ToGetInstancePoolListPoolArrayOutput() GetInstancePoolListPoolArrayOutput
	ToGetInstancePoolListPoolArrayOutputWithContext(context.Context) GetInstancePoolListPoolArrayOutput
}

type GetInstancePoolListPoolArray []GetInstancePoolListPoolInput

func (GetInstancePoolListPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolListPool)(nil)).Elem()
}

func (i GetInstancePoolListPoolArray) ToGetInstancePoolListPoolArrayOutput() GetInstancePoolListPoolArrayOutput {
	return i.ToGetInstancePoolListPoolArrayOutputWithContext(context.Background())
}

func (i GetInstancePoolListPoolArray) ToGetInstancePoolListPoolArrayOutputWithContext(ctx context.Context) GetInstancePoolListPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolListPoolArrayOutput)
}

func (i GetInstancePoolListPoolArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolListPool] {
	return pulumix.Output[[]GetInstancePoolListPool]{
		OutputState: i.ToGetInstancePoolListPoolArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstancePoolListPoolOutput struct{ *pulumi.OutputState }

func (GetInstancePoolListPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolListPool)(nil)).Elem()
}

func (o GetInstancePoolListPoolOutput) ToGetInstancePoolListPoolOutput() GetInstancePoolListPoolOutput {
	return o
}

func (o GetInstancePoolListPoolOutput) ToGetInstancePoolListPoolOutputWithContext(ctx context.Context) GetInstancePoolListPoolOutput {
	return o
}

func (o GetInstancePoolListPoolOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolListPool] {
	return pulumix.Output[GetInstancePoolListPool]{
		OutputState: o.OutputState,
	}
}

func (o GetInstancePoolListPoolOutput) AffinityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) []string { return v.AffinityGroupIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancePoolListPoolOutput) DeployTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.DeployTargetId }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) int { return v.DiskSize }).(pulumi.IntOutput)
}

func (o GetInstancePoolListPoolOutput) ElasticIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) []string { return v.ElasticIpIds }).(pulumi.StringArrayOutput)
}

// The ID of this resource.
func (o GetInstancePoolListPoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolListPoolOutput) InstancePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.InstancePrefix }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.InstanceType }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) Instances() GetInstancePoolListPoolInstanceArrayOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) []GetInstancePoolListPoolInstance { return v.Instances }).(GetInstancePoolListPoolInstanceArrayOutput)
}

func (o GetInstancePoolListPoolOutput) Ipv6() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) bool { return v.Ipv6 }).(pulumi.BoolOutput)
}

func (o GetInstancePoolListPoolOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o GetInstancePoolListPoolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolListPoolOutput) NetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) []string { return v.NetworkIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancePoolListPoolOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancePoolListPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetInstancePoolListPoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.State }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.TemplateId }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.UserData }).(pulumi.StringOutput)
}

// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o GetInstancePoolListPoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPool) string { return v.Zone }).(pulumi.StringOutput)
}

type GetInstancePoolListPoolArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePoolListPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolListPool)(nil)).Elem()
}

func (o GetInstancePoolListPoolArrayOutput) ToGetInstancePoolListPoolArrayOutput() GetInstancePoolListPoolArrayOutput {
	return o
}

func (o GetInstancePoolListPoolArrayOutput) ToGetInstancePoolListPoolArrayOutputWithContext(ctx context.Context) GetInstancePoolListPoolArrayOutput {
	return o
}

func (o GetInstancePoolListPoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolListPool] {
	return pulumix.Output[[]GetInstancePoolListPool]{
		OutputState: o.OutputState,
	}
}

func (o GetInstancePoolListPoolArrayOutput) Index(i pulumi.IntInput) GetInstancePoolListPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePoolListPool {
		return vs[0].([]GetInstancePoolListPool)[vs[1].(int)]
	}).(GetInstancePoolListPoolOutput)
}

type GetInstancePoolListPoolInstance struct {
	// The ID of this resource.
	Id              *string `pulumi:"id"`
	Ipv6Address     string  `pulumi:"ipv6Address"`
	Name            *string `pulumi:"name"`
	PublicIpAddress string  `pulumi:"publicIpAddress"`
}

// GetInstancePoolListPoolInstanceInput is an input type that accepts GetInstancePoolListPoolInstanceArgs and GetInstancePoolListPoolInstanceOutput values.
// You can construct a concrete instance of `GetInstancePoolListPoolInstanceInput` via:
//
//	GetInstancePoolListPoolInstanceArgs{...}
type GetInstancePoolListPoolInstanceInput interface {
	pulumi.Input

	ToGetInstancePoolListPoolInstanceOutput() GetInstancePoolListPoolInstanceOutput
	ToGetInstancePoolListPoolInstanceOutputWithContext(context.Context) GetInstancePoolListPoolInstanceOutput
}

type GetInstancePoolListPoolInstanceArgs struct {
	// The ID of this resource.
	Id              pulumi.StringPtrInput `pulumi:"id"`
	Ipv6Address     pulumi.StringInput    `pulumi:"ipv6Address"`
	Name            pulumi.StringPtrInput `pulumi:"name"`
	PublicIpAddress pulumi.StringInput    `pulumi:"publicIpAddress"`
}

func (GetInstancePoolListPoolInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolListPoolInstance)(nil)).Elem()
}

func (i GetInstancePoolListPoolInstanceArgs) ToGetInstancePoolListPoolInstanceOutput() GetInstancePoolListPoolInstanceOutput {
	return i.ToGetInstancePoolListPoolInstanceOutputWithContext(context.Background())
}

func (i GetInstancePoolListPoolInstanceArgs) ToGetInstancePoolListPoolInstanceOutputWithContext(ctx context.Context) GetInstancePoolListPoolInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolListPoolInstanceOutput)
}

func (i GetInstancePoolListPoolInstanceArgs) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolListPoolInstance] {
	return pulumix.Output[GetInstancePoolListPoolInstance]{
		OutputState: i.ToGetInstancePoolListPoolInstanceOutputWithContext(ctx).OutputState,
	}
}

// GetInstancePoolListPoolInstanceArrayInput is an input type that accepts GetInstancePoolListPoolInstanceArray and GetInstancePoolListPoolInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancePoolListPoolInstanceArrayInput` via:
//
//	GetInstancePoolListPoolInstanceArray{ GetInstancePoolListPoolInstanceArgs{...} }
type GetInstancePoolListPoolInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancePoolListPoolInstanceArrayOutput() GetInstancePoolListPoolInstanceArrayOutput
	ToGetInstancePoolListPoolInstanceArrayOutputWithContext(context.Context) GetInstancePoolListPoolInstanceArrayOutput
}

type GetInstancePoolListPoolInstanceArray []GetInstancePoolListPoolInstanceInput

func (GetInstancePoolListPoolInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolListPoolInstance)(nil)).Elem()
}

func (i GetInstancePoolListPoolInstanceArray) ToGetInstancePoolListPoolInstanceArrayOutput() GetInstancePoolListPoolInstanceArrayOutput {
	return i.ToGetInstancePoolListPoolInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancePoolListPoolInstanceArray) ToGetInstancePoolListPoolInstanceArrayOutputWithContext(ctx context.Context) GetInstancePoolListPoolInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePoolListPoolInstanceArrayOutput)
}

func (i GetInstancePoolListPoolInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolListPoolInstance] {
	return pulumix.Output[[]GetInstancePoolListPoolInstance]{
		OutputState: i.ToGetInstancePoolListPoolInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInstancePoolListPoolInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancePoolListPoolInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePoolListPoolInstance)(nil)).Elem()
}

func (o GetInstancePoolListPoolInstanceOutput) ToGetInstancePoolListPoolInstanceOutput() GetInstancePoolListPoolInstanceOutput {
	return o
}

func (o GetInstancePoolListPoolInstanceOutput) ToGetInstancePoolListPoolInstanceOutputWithContext(ctx context.Context) GetInstancePoolListPoolInstanceOutput {
	return o
}

func (o GetInstancePoolListPoolInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[GetInstancePoolListPoolInstance] {
	return pulumix.Output[GetInstancePoolListPoolInstance]{
		OutputState: o.OutputState,
	}
}

// The ID of this resource.
func (o GetInstancePoolListPoolInstanceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolListPoolInstance) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolListPoolInstanceOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPoolInstance) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o GetInstancePoolListPoolInstanceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancePoolListPoolInstance) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetInstancePoolListPoolInstanceOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePoolListPoolInstance) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

type GetInstancePoolListPoolInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePoolListPoolInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePoolListPoolInstance)(nil)).Elem()
}

func (o GetInstancePoolListPoolInstanceArrayOutput) ToGetInstancePoolListPoolInstanceArrayOutput() GetInstancePoolListPoolInstanceArrayOutput {
	return o
}

func (o GetInstancePoolListPoolInstanceArrayOutput) ToGetInstancePoolListPoolInstanceArrayOutputWithContext(ctx context.Context) GetInstancePoolListPoolInstanceArrayOutput {
	return o
}

func (o GetInstancePoolListPoolInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInstancePoolListPoolInstance] {
	return pulumix.Output[[]GetInstancePoolListPoolInstance]{
		OutputState: o.OutputState,
	}
}

func (o GetInstancePoolListPoolInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancePoolListPoolInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePoolListPoolInstance {
		return vs[0].([]GetInstancePoolListPoolInstance)[vs[1].(int)]
	}).(GetInstancePoolListPoolInstanceOutput)
}

type GetSKSClusterListCluster struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons []string `pulumi:"addons"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	AggregationCa string `pulumi:"aggregationCa"`
	// Match against this bool
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Cni *string `pulumi:"cni"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ControlPlaneCa string `pulumi:"controlPlaneCa"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt string `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Description *string `pulumi:"description"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Endpoint string `pulumi:"endpoint"`
	// Match against this bool
	ExoscaleCcm *bool `pulumi:"exoscaleCcm"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id *string `pulumi:"id"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	KubeletCa string `pulumi:"kubeletCa"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels map[string]string `pulumi:"labels"`
	// Match against this bool
	MetricsServer *bool `pulumi:"metricsServer"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name      *string                      `pulumi:"name"`
	Nodepools []string                     `pulumi:"nodepools"`
	Oidc      GetSKSClusterListClusterOidc `pulumi:"oidc"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State string `pulumi:"state"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Version string `pulumi:"version"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone string `pulumi:"zone"`
}

// GetSKSClusterListClusterInput is an input type that accepts GetSKSClusterListClusterArgs and GetSKSClusterListClusterOutput values.
// You can construct a concrete instance of `GetSKSClusterListClusterInput` via:
//
//	GetSKSClusterListClusterArgs{...}
type GetSKSClusterListClusterInput interface {
	pulumi.Input

	ToGetSKSClusterListClusterOutput() GetSKSClusterListClusterOutput
	ToGetSKSClusterListClusterOutputWithContext(context.Context) GetSKSClusterListClusterOutput
}

type GetSKSClusterListClusterArgs struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayInput `pulumi:"addons"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	AggregationCa pulumi.StringInput `pulumi:"aggregationCa"`
	// Match against this bool
	AutoUpgrade pulumi.BoolPtrInput `pulumi:"autoUpgrade"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Cni pulumi.StringPtrInput `pulumi:"cni"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ControlPlaneCa pulumi.StringInput `pulumi:"controlPlaneCa"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Match against this bool
	ExoscaleCcm pulumi.BoolPtrInput `pulumi:"exoscaleCcm"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	KubeletCa pulumi.StringInput `pulumi:"kubeletCa"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Match against this bool
	MetricsServer pulumi.BoolPtrInput `pulumi:"metricsServer"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name      pulumi.StringPtrInput             `pulumi:"name"`
	Nodepools pulumi.StringArrayInput           `pulumi:"nodepools"`
	Oidc      GetSKSClusterListClusterOidcInput `pulumi:"oidc"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ServiceLevel pulumi.StringPtrInput `pulumi:"serviceLevel"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State pulumi.StringInput `pulumi:"state"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Version pulumi.StringInput `pulumi:"version"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetSKSClusterListClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterListCluster)(nil)).Elem()
}

func (i GetSKSClusterListClusterArgs) ToGetSKSClusterListClusterOutput() GetSKSClusterListClusterOutput {
	return i.ToGetSKSClusterListClusterOutputWithContext(context.Background())
}

func (i GetSKSClusterListClusterArgs) ToGetSKSClusterListClusterOutputWithContext(ctx context.Context) GetSKSClusterListClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterListClusterOutput)
}

func (i GetSKSClusterListClusterArgs) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterListCluster] {
	return pulumix.Output[GetSKSClusterListCluster]{
		OutputState: i.ToGetSKSClusterListClusterOutputWithContext(ctx).OutputState,
	}
}

// GetSKSClusterListClusterArrayInput is an input type that accepts GetSKSClusterListClusterArray and GetSKSClusterListClusterArrayOutput values.
// You can construct a concrete instance of `GetSKSClusterListClusterArrayInput` via:
//
//	GetSKSClusterListClusterArray{ GetSKSClusterListClusterArgs{...} }
type GetSKSClusterListClusterArrayInput interface {
	pulumi.Input

	ToGetSKSClusterListClusterArrayOutput() GetSKSClusterListClusterArrayOutput
	ToGetSKSClusterListClusterArrayOutputWithContext(context.Context) GetSKSClusterListClusterArrayOutput
}

type GetSKSClusterListClusterArray []GetSKSClusterListClusterInput

func (GetSKSClusterListClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSKSClusterListCluster)(nil)).Elem()
}

func (i GetSKSClusterListClusterArray) ToGetSKSClusterListClusterArrayOutput() GetSKSClusterListClusterArrayOutput {
	return i.ToGetSKSClusterListClusterArrayOutputWithContext(context.Background())
}

func (i GetSKSClusterListClusterArray) ToGetSKSClusterListClusterArrayOutputWithContext(ctx context.Context) GetSKSClusterListClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterListClusterArrayOutput)
}

func (i GetSKSClusterListClusterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSKSClusterListCluster] {
	return pulumix.Output[[]GetSKSClusterListCluster]{
		OutputState: i.ToGetSKSClusterListClusterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSKSClusterListClusterOutput struct{ *pulumi.OutputState }

func (GetSKSClusterListClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterListCluster)(nil)).Elem()
}

func (o GetSKSClusterListClusterOutput) ToGetSKSClusterListClusterOutput() GetSKSClusterListClusterOutput {
	return o
}

func (o GetSKSClusterListClusterOutput) ToGetSKSClusterListClusterOutputWithContext(ctx context.Context) GetSKSClusterListClusterOutput {
	return o
}

func (o GetSKSClusterListClusterOutput) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterListCluster] {
	return pulumix.Output[GetSKSClusterListCluster]{
		OutputState: o.OutputState,
	}
}

// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
func (o GetSKSClusterListClusterOutput) Addons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) []string { return v.Addons }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) AggregationCa() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.AggregationCa }).(pulumi.StringOutput)
}

// Match against this bool
func (o GetSKSClusterListClusterOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *bool { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Cni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *string { return v.Cni }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) ControlPlaneCa() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.ControlPlaneCa }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Match against this bool
func (o GetSKSClusterListClusterOutput) ExoscaleCcm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *bool { return v.ExoscaleCcm }).(pulumi.BoolPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) KubeletCa() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.KubeletCa }).(pulumi.StringOutput)
}

// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
func (o GetSKSClusterListClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Match against this bool
func (o GetSKSClusterListClusterOutput) MetricsServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *bool { return v.MetricsServer }).(pulumi.BoolPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSKSClusterListClusterOutput) Nodepools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) []string { return v.Nodepools }).(pulumi.StringArrayOutput)
}

func (o GetSKSClusterListClusterOutput) Oidc() GetSKSClusterListClusterOidcOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) GetSKSClusterListClusterOidc { return v.Oidc }).(GetSKSClusterListClusterOidcOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) ServiceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) *string { return v.ServiceLevel }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.State }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.Version }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSClusterListClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListCluster) string { return v.Zone }).(pulumi.StringOutput)
}

type GetSKSClusterListClusterArrayOutput struct{ *pulumi.OutputState }

func (GetSKSClusterListClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSKSClusterListCluster)(nil)).Elem()
}

func (o GetSKSClusterListClusterArrayOutput) ToGetSKSClusterListClusterArrayOutput() GetSKSClusterListClusterArrayOutput {
	return o
}

func (o GetSKSClusterListClusterArrayOutput) ToGetSKSClusterListClusterArrayOutputWithContext(ctx context.Context) GetSKSClusterListClusterArrayOutput {
	return o
}

func (o GetSKSClusterListClusterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSKSClusterListCluster] {
	return pulumix.Output[[]GetSKSClusterListCluster]{
		OutputState: o.OutputState,
	}
}

func (o GetSKSClusterListClusterArrayOutput) Index(i pulumi.IntInput) GetSKSClusterListClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSKSClusterListCluster {
		return vs[0].([]GetSKSClusterListCluster)[vs[1].(int)]
	}).(GetSKSClusterListClusterOutput)
}

type GetSKSClusterListClusterOidc struct {
	ClientId       string            `pulumi:"clientId"`
	GroupsClaim    *string           `pulumi:"groupsClaim"`
	GroupsPrefix   *string           `pulumi:"groupsPrefix"`
	IssuerUrl      string            `pulumi:"issuerUrl"`
	RequiredClaim  map[string]string `pulumi:"requiredClaim"`
	UsernameClaim  *string           `pulumi:"usernameClaim"`
	UsernamePrefix *string           `pulumi:"usernamePrefix"`
}

// GetSKSClusterListClusterOidcInput is an input type that accepts GetSKSClusterListClusterOidcArgs and GetSKSClusterListClusterOidcOutput values.
// You can construct a concrete instance of `GetSKSClusterListClusterOidcInput` via:
//
//	GetSKSClusterListClusterOidcArgs{...}
type GetSKSClusterListClusterOidcInput interface {
	pulumi.Input

	ToGetSKSClusterListClusterOidcOutput() GetSKSClusterListClusterOidcOutput
	ToGetSKSClusterListClusterOidcOutputWithContext(context.Context) GetSKSClusterListClusterOidcOutput
}

type GetSKSClusterListClusterOidcArgs struct {
	ClientId       pulumi.StringInput    `pulumi:"clientId"`
	GroupsClaim    pulumi.StringPtrInput `pulumi:"groupsClaim"`
	GroupsPrefix   pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	IssuerUrl      pulumi.StringInput    `pulumi:"issuerUrl"`
	RequiredClaim  pulumi.StringMapInput `pulumi:"requiredClaim"`
	UsernameClaim  pulumi.StringPtrInput `pulumi:"usernameClaim"`
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (GetSKSClusterListClusterOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterListClusterOidc)(nil)).Elem()
}

func (i GetSKSClusterListClusterOidcArgs) ToGetSKSClusterListClusterOidcOutput() GetSKSClusterListClusterOidcOutput {
	return i.ToGetSKSClusterListClusterOidcOutputWithContext(context.Background())
}

func (i GetSKSClusterListClusterOidcArgs) ToGetSKSClusterListClusterOidcOutputWithContext(ctx context.Context) GetSKSClusterListClusterOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterListClusterOidcOutput)
}

func (i GetSKSClusterListClusterOidcArgs) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterListClusterOidc] {
	return pulumix.Output[GetSKSClusterListClusterOidc]{
		OutputState: i.ToGetSKSClusterListClusterOidcOutputWithContext(ctx).OutputState,
	}
}

type GetSKSClusterListClusterOidcOutput struct{ *pulumi.OutputState }

func (GetSKSClusterListClusterOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterListClusterOidc)(nil)).Elem()
}

func (o GetSKSClusterListClusterOidcOutput) ToGetSKSClusterListClusterOidcOutput() GetSKSClusterListClusterOidcOutput {
	return o
}

func (o GetSKSClusterListClusterOidcOutput) ToGetSKSClusterListClusterOidcOutputWithContext(ctx context.Context) GetSKSClusterListClusterOidcOutput {
	return o
}

func (o GetSKSClusterListClusterOidcOutput) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterListClusterOidc] {
	return pulumix.Output[GetSKSClusterListClusterOidc]{
		OutputState: o.OutputState,
	}
}

func (o GetSKSClusterListClusterOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) string { return v.ClientId }).(pulumi.StringOutput)
}

func (o GetSKSClusterListClusterOidcOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

func (o GetSKSClusterListClusterOidcOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

func (o GetSKSClusterListClusterOidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

func (o GetSKSClusterListClusterOidcOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) map[string]string { return v.RequiredClaim }).(pulumi.StringMapOutput)
}

func (o GetSKSClusterListClusterOidcOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

func (o GetSKSClusterListClusterOidcOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterListClusterOidc) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type GetSKSClusterOidc struct {
	// The OpenID client ID.
	ClientId string `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix *string `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl string `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim map[string]string `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim *string `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix *string `pulumi:"usernamePrefix"`
}

// GetSKSClusterOidcInput is an input type that accepts GetSKSClusterOidcArgs and GetSKSClusterOidcOutput values.
// You can construct a concrete instance of `GetSKSClusterOidcInput` via:
//
//	GetSKSClusterOidcArgs{...}
type GetSKSClusterOidcInput interface {
	pulumi.Input

	ToGetSKSClusterOidcOutput() GetSKSClusterOidcOutput
	ToGetSKSClusterOidcOutputWithContext(context.Context) GetSKSClusterOidcOutput
}

type GetSKSClusterOidcArgs struct {
	// The OpenID client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// An OpenID JWT claim to use as the user's group.
	GroupsClaim pulumi.StringPtrInput `pulumi:"groupsClaim"`
	// An OpenID prefix prepended to group claims.
	GroupsPrefix pulumi.StringPtrInput `pulumi:"groupsPrefix"`
	// The OpenID provider URL.
	IssuerUrl pulumi.StringInput `pulumi:"issuerUrl"`
	// A map of key/value pairs that describes a required claim in the OpenID Token.
	RequiredClaim pulumi.StringMapInput `pulumi:"requiredClaim"`
	// An OpenID JWT claim to use as the user name.
	UsernameClaim pulumi.StringPtrInput `pulumi:"usernameClaim"`
	// An OpenID prefix prepended to username claims.
	UsernamePrefix pulumi.StringPtrInput `pulumi:"usernamePrefix"`
}

func (GetSKSClusterOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterOidc)(nil)).Elem()
}

func (i GetSKSClusterOidcArgs) ToGetSKSClusterOidcOutput() GetSKSClusterOidcOutput {
	return i.ToGetSKSClusterOidcOutputWithContext(context.Background())
}

func (i GetSKSClusterOidcArgs) ToGetSKSClusterOidcOutputWithContext(ctx context.Context) GetSKSClusterOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterOidcOutput)
}

func (i GetSKSClusterOidcArgs) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterOidc] {
	return pulumix.Output[GetSKSClusterOidc]{
		OutputState: i.ToGetSKSClusterOidcOutputWithContext(ctx).OutputState,
	}
}

func (i GetSKSClusterOidcArgs) ToGetSKSClusterOidcPtrOutput() GetSKSClusterOidcPtrOutput {
	return i.ToGetSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i GetSKSClusterOidcArgs) ToGetSKSClusterOidcPtrOutputWithContext(ctx context.Context) GetSKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterOidcOutput).ToGetSKSClusterOidcPtrOutputWithContext(ctx)
}

// GetSKSClusterOidcPtrInput is an input type that accepts GetSKSClusterOidcArgs, GetSKSClusterOidcPtr and GetSKSClusterOidcPtrOutput values.
// You can construct a concrete instance of `GetSKSClusterOidcPtrInput` via:
//
//	        GetSKSClusterOidcArgs{...}
//
//	or:
//
//	        nil
type GetSKSClusterOidcPtrInput interface {
	pulumi.Input

	ToGetSKSClusterOidcPtrOutput() GetSKSClusterOidcPtrOutput
	ToGetSKSClusterOidcPtrOutputWithContext(context.Context) GetSKSClusterOidcPtrOutput
}

type getSKSClusterOidcPtrType GetSKSClusterOidcArgs

func GetSKSClusterOidcPtr(v *GetSKSClusterOidcArgs) GetSKSClusterOidcPtrInput {
	return (*getSKSClusterOidcPtrType)(v)
}

func (*getSKSClusterOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSKSClusterOidc)(nil)).Elem()
}

func (i *getSKSClusterOidcPtrType) ToGetSKSClusterOidcPtrOutput() GetSKSClusterOidcPtrOutput {
	return i.ToGetSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (i *getSKSClusterOidcPtrType) ToGetSKSClusterOidcPtrOutputWithContext(ctx context.Context) GetSKSClusterOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSClusterOidcPtrOutput)
}

func (i *getSKSClusterOidcPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetSKSClusterOidc] {
	return pulumix.Output[*GetSKSClusterOidc]{
		OutputState: i.ToGetSKSClusterOidcPtrOutputWithContext(ctx).OutputState,
	}
}

type GetSKSClusterOidcOutput struct{ *pulumi.OutputState }

func (GetSKSClusterOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSClusterOidc)(nil)).Elem()
}

func (o GetSKSClusterOidcOutput) ToGetSKSClusterOidcOutput() GetSKSClusterOidcOutput {
	return o
}

func (o GetSKSClusterOidcOutput) ToGetSKSClusterOidcOutputWithContext(ctx context.Context) GetSKSClusterOidcOutput {
	return o
}

func (o GetSKSClusterOidcOutput) ToGetSKSClusterOidcPtrOutput() GetSKSClusterOidcPtrOutput {
	return o.ToGetSKSClusterOidcPtrOutputWithContext(context.Background())
}

func (o GetSKSClusterOidcOutput) ToGetSKSClusterOidcPtrOutputWithContext(ctx context.Context) GetSKSClusterOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSKSClusterOidc) *GetSKSClusterOidc {
		return &v
	}).(GetSKSClusterOidcPtrOutput)
}

func (o GetSKSClusterOidcOutput) ToOutput(ctx context.Context) pulumix.Output[GetSKSClusterOidc] {
	return pulumix.Output[GetSKSClusterOidc]{
		OutputState: o.OutputState,
	}
}

// The OpenID client ID.
func (o GetSKSClusterOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) string { return v.ClientId }).(pulumi.StringOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o GetSKSClusterOidcOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o GetSKSClusterOidcOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) *string { return v.GroupsPrefix }).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o GetSKSClusterOidcOutput) IssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) string { return v.IssuerUrl }).(pulumi.StringOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o GetSKSClusterOidcOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) map[string]string { return v.RequiredClaim }).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o GetSKSClusterOidcOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) *string { return v.UsernameClaim }).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o GetSKSClusterOidcOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSClusterOidc) *string { return v.UsernamePrefix }).(pulumi.StringPtrOutput)
}

type GetSKSClusterOidcPtrOutput struct{ *pulumi.OutputState }

func (GetSKSClusterOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSKSClusterOidc)(nil)).Elem()
}

func (o GetSKSClusterOidcPtrOutput) ToGetSKSClusterOidcPtrOutput() GetSKSClusterOidcPtrOutput {
	return o
}

func (o GetSKSClusterOidcPtrOutput) ToGetSKSClusterOidcPtrOutputWithContext(ctx context.Context) GetSKSClusterOidcPtrOutput {
	return o
}

func (o GetSKSClusterOidcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetSKSClusterOidc] {
	return pulumix.Output[*GetSKSClusterOidc]{
		OutputState: o.OutputState,
	}
}

func (o GetSKSClusterOidcPtrOutput) Elem() GetSKSClusterOidcOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) GetSKSClusterOidc {
		if v != nil {
			return *v
		}
		var ret GetSKSClusterOidc
		return ret
	}).(GetSKSClusterOidcOutput)
}

// The OpenID client ID.
func (o GetSKSClusterOidcPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An OpenID JWT claim to use as the user's group.
func (o GetSKSClusterOidcPtrOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to group claims.
func (o GetSKSClusterOidcPtrOutput) GroupsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.GroupsPrefix
	}).(pulumi.StringPtrOutput)
}

// The OpenID provider URL.
func (o GetSKSClusterOidcPtrOutput) IssuerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUrl
	}).(pulumi.StringPtrOutput)
}

// A map of key/value pairs that describes a required claim in the OpenID Token.
func (o GetSKSClusterOidcPtrOutput) RequiredClaim() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) map[string]string {
		if v == nil {
			return nil
		}
		return v.RequiredClaim
	}).(pulumi.StringMapOutput)
}

// An OpenID JWT claim to use as the user name.
func (o GetSKSClusterOidcPtrOutput) UsernameClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernameClaim
	}).(pulumi.StringPtrOutput)
}

// An OpenID prefix prepended to username claims.
func (o GetSKSClusterOidcPtrOutput) UsernamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSKSClusterOidc) *string {
		if v == nil {
			return nil
		}
		return v.UsernamePrefix
	}).(pulumi.StringPtrOutput)
}

type GetSKSNodepoolListNodepool struct {
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ClusterId string `pulumi:"clusterId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt string `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Description *string `pulumi:"description"`
	// Match against this int
	DiskSize *int `pulumi:"diskSize"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id *string `pulumi:"id"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstancePoolId string `pulumi:"instancePoolId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstancePrefix *string `pulumi:"instancePrefix"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstanceType *string `pulumi:"instanceType"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels map[string]string `pulumi:"labels"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name              *string  `pulumi:"name"`
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	SecurityGroupIds  []string `pulumi:"securityGroupIds"`
	// Match against this int
	Size *int `pulumi:"size"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State string `pulumi:"state"`
	// Match against this bool
	StorageLvm *bool `pulumi:"storageLvm"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Taints map[string]string `pulumi:"taints"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	TemplateId string `pulumi:"templateId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Version string `pulumi:"version"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone string `pulumi:"zone"`
}

// GetSKSNodepoolListNodepoolInput is an input type that accepts GetSKSNodepoolListNodepoolArgs and GetSKSNodepoolListNodepoolOutput values.
// You can construct a concrete instance of `GetSKSNodepoolListNodepoolInput` via:
//
//	GetSKSNodepoolListNodepoolArgs{...}
type GetSKSNodepoolListNodepoolInput interface {
	pulumi.Input

	ToGetSKSNodepoolListNodepoolOutput() GetSKSNodepoolListNodepoolOutput
	ToGetSKSNodepoolListNodepoolOutputWithContext(context.Context) GetSKSNodepoolListNodepoolOutput
}

type GetSKSNodepoolListNodepoolArgs struct {
	AntiAffinityGroupIds pulumi.StringArrayInput `pulumi:"antiAffinityGroupIds"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	DeployTargetId pulumi.StringPtrInput `pulumi:"deployTargetId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Match against this int
	DiskSize pulumi.IntPtrInput `pulumi:"diskSize"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstancePoolId pulumi.StringInput `pulumi:"instancePoolId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstancePrefix pulumi.StringPtrInput `pulumi:"instancePrefix"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Name              pulumi.StringPtrInput   `pulumi:"name"`
	PrivateNetworkIds pulumi.StringArrayInput `pulumi:"privateNetworkIds"`
	SecurityGroupIds  pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// Match against this int
	Size pulumi.IntPtrInput `pulumi:"size"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	State pulumi.StringInput `pulumi:"state"`
	// Match against this bool
	StorageLvm pulumi.BoolPtrInput `pulumi:"storageLvm"`
	// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
	Taints pulumi.StringMapInput `pulumi:"taints"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	TemplateId pulumi.StringInput `pulumi:"templateId"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Version pulumi.StringInput `pulumi:"version"`
	// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (GetSKSNodepoolListNodepoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSNodepoolListNodepool)(nil)).Elem()
}

func (i GetSKSNodepoolListNodepoolArgs) ToGetSKSNodepoolListNodepoolOutput() GetSKSNodepoolListNodepoolOutput {
	return i.ToGetSKSNodepoolListNodepoolOutputWithContext(context.Background())
}

func (i GetSKSNodepoolListNodepoolArgs) ToGetSKSNodepoolListNodepoolOutputWithContext(ctx context.Context) GetSKSNodepoolListNodepoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSNodepoolListNodepoolOutput)
}

func (i GetSKSNodepoolListNodepoolArgs) ToOutput(ctx context.Context) pulumix.Output[GetSKSNodepoolListNodepool] {
	return pulumix.Output[GetSKSNodepoolListNodepool]{
		OutputState: i.ToGetSKSNodepoolListNodepoolOutputWithContext(ctx).OutputState,
	}
}

// GetSKSNodepoolListNodepoolArrayInput is an input type that accepts GetSKSNodepoolListNodepoolArray and GetSKSNodepoolListNodepoolArrayOutput values.
// You can construct a concrete instance of `GetSKSNodepoolListNodepoolArrayInput` via:
//
//	GetSKSNodepoolListNodepoolArray{ GetSKSNodepoolListNodepoolArgs{...} }
type GetSKSNodepoolListNodepoolArrayInput interface {
	pulumi.Input

	ToGetSKSNodepoolListNodepoolArrayOutput() GetSKSNodepoolListNodepoolArrayOutput
	ToGetSKSNodepoolListNodepoolArrayOutputWithContext(context.Context) GetSKSNodepoolListNodepoolArrayOutput
}

type GetSKSNodepoolListNodepoolArray []GetSKSNodepoolListNodepoolInput

func (GetSKSNodepoolListNodepoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSKSNodepoolListNodepool)(nil)).Elem()
}

func (i GetSKSNodepoolListNodepoolArray) ToGetSKSNodepoolListNodepoolArrayOutput() GetSKSNodepoolListNodepoolArrayOutput {
	return i.ToGetSKSNodepoolListNodepoolArrayOutputWithContext(context.Background())
}

func (i GetSKSNodepoolListNodepoolArray) ToGetSKSNodepoolListNodepoolArrayOutputWithContext(ctx context.Context) GetSKSNodepoolListNodepoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSKSNodepoolListNodepoolArrayOutput)
}

func (i GetSKSNodepoolListNodepoolArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSKSNodepoolListNodepool] {
	return pulumix.Output[[]GetSKSNodepoolListNodepool]{
		OutputState: i.ToGetSKSNodepoolListNodepoolArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSKSNodepoolListNodepoolOutput struct{ *pulumi.OutputState }

func (GetSKSNodepoolListNodepoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSKSNodepoolListNodepool)(nil)).Elem()
}

func (o GetSKSNodepoolListNodepoolOutput) ToGetSKSNodepoolListNodepoolOutput() GetSKSNodepoolListNodepoolOutput {
	return o
}

func (o GetSKSNodepoolListNodepoolOutput) ToGetSKSNodepoolListNodepoolOutputWithContext(ctx context.Context) GetSKSNodepoolListNodepoolOutput {
	return o
}

func (o GetSKSNodepoolListNodepoolOutput) ToOutput(ctx context.Context) pulumix.Output[GetSKSNodepoolListNodepool] {
	return pulumix.Output[GetSKSNodepoolListNodepool]{
		OutputState: o.OutputState,
	}
}

func (o GetSKSNodepoolListNodepoolOutput) AntiAffinityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) []string { return v.AntiAffinityGroupIds }).(pulumi.StringArrayOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) DeployTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.DeployTargetId }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Match against this int
func (o GetSKSNodepoolListNodepoolOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *int { return v.DiskSize }).(pulumi.IntPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) InstancePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.InstancePoolId }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) InstancePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.InstancePrefix }).(pulumi.StringPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
func (o GetSKSNodepoolListNodepoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSKSNodepoolListNodepoolOutput) PrivateNetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) []string { return v.PrivateNetworkIds }).(pulumi.StringArrayOutput)
}

func (o GetSKSNodepoolListNodepoolOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Match against this int
func (o GetSKSNodepoolListNodepoolOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.State }).(pulumi.StringOutput)
}

// Match against this bool
func (o GetSKSNodepoolListNodepoolOutput) StorageLvm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) *bool { return v.StorageLvm }).(pulumi.BoolPtrOutput)
}

// Match against key/values. Keys are matched exactly, while values may be matched as a regex if you supply a string that begins and ends with "/"
func (o GetSKSNodepoolListNodepoolOutput) Taints() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) map[string]string { return v.Taints }).(pulumi.StringMapOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.TemplateId }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.Version }).(pulumi.StringOutput)
}

// Match against this string. If you supply a string that begins and ends with a "/" it will be matched as a regex.
func (o GetSKSNodepoolListNodepoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v GetSKSNodepoolListNodepool) string { return v.Zone }).(pulumi.StringOutput)
}

type GetSKSNodepoolListNodepoolArrayOutput struct{ *pulumi.OutputState }

func (GetSKSNodepoolListNodepoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSKSNodepoolListNodepool)(nil)).Elem()
}

func (o GetSKSNodepoolListNodepoolArrayOutput) ToGetSKSNodepoolListNodepoolArrayOutput() GetSKSNodepoolListNodepoolArrayOutput {
	return o
}

func (o GetSKSNodepoolListNodepoolArrayOutput) ToGetSKSNodepoolListNodepoolArrayOutputWithContext(ctx context.Context) GetSKSNodepoolListNodepoolArrayOutput {
	return o
}

func (o GetSKSNodepoolListNodepoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSKSNodepoolListNodepool] {
	return pulumix.Output[[]GetSKSNodepoolListNodepool]{
		OutputState: o.OutputState,
	}
}

func (o GetSKSNodepoolListNodepoolArrayOutput) Index(i pulumi.IntInput) GetSKSNodepoolListNodepoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSKSNodepoolListNodepool {
		return vs[0].([]GetSKSNodepoolListNodepool)[vs[1].(int)]
	}).(GetSKSNodepoolListNodepoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceNetworkInterfaceInput)(nil)).Elem(), ComputeInstanceNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeInstanceNetworkInterfaceArrayInput)(nil)).Elem(), ComputeInstanceNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaPtrInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlPtrInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchInput)(nil)).Elem(), DatabaseOpensearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchPtrInput)(nil)).Elem(), DatabaseOpensearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchDashboardsInput)(nil)).Elem(), DatabaseOpensearchDashboardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchDashboardsPtrInput)(nil)).Elem(), DatabaseOpensearchDashboardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexPatternInput)(nil)).Elem(), DatabaseOpensearchIndexPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexPatternArrayInput)(nil)).Elem(), DatabaseOpensearchIndexPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexTemplateInput)(nil)).Elem(), DatabaseOpensearchIndexTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexTemplatePtrInput)(nil)).Elem(), DatabaseOpensearchIndexTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgPtrInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisPtrInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPHealthcheckInput)(nil)).Elem(), ElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticIPHealthcheckPtrInput)(nil)).Elem(), ElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePoolInstanceInput)(nil)).Elem(), InstancePoolInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePoolInstanceArrayInput)(nil)).Elem(), InstancePoolInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NLBServiceHealthcheckInput)(nil)).Elem(), NLBServiceHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NLBServiceHealthcheckArrayInput)(nil)).Elem(), NLBServiceHealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterOidcInput)(nil)).Elem(), SKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterOidcPtrInput)(nil)).Elem(), SKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesEgressInput)(nil)).Elem(), SecurityGroupRulesEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesEgressArrayInput)(nil)).Elem(), SecurityGroupRulesEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesIngressInput)(nil)).Elem(), SecurityGroupRulesIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupRulesIngressArrayInput)(nil)).Elem(), SecurityGroupRulesIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetComputeInstanceListInstanceInput)(nil)).Elem(), GetComputeInstanceListInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetComputeInstanceListInstanceArrayInput)(nil)).Elem(), GetComputeInstanceListInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordFilterInput)(nil)).Elem(), GetDomainRecordFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordRecordInput)(nil)).Elem(), GetDomainRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainRecordRecordArrayInput)(nil)).Elem(), GetDomainRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetElasticIPHealthcheckInput)(nil)).Elem(), GetElasticIPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetElasticIPHealthcheckArrayInput)(nil)).Elem(), GetElasticIPHealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolInstanceInput)(nil)).Elem(), GetInstancePoolInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolInstanceArrayInput)(nil)).Elem(), GetInstancePoolInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolListPoolInput)(nil)).Elem(), GetInstancePoolListPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolListPoolArrayInput)(nil)).Elem(), GetInstancePoolListPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolListPoolInstanceInput)(nil)).Elem(), GetInstancePoolListPoolInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePoolListPoolInstanceArrayInput)(nil)).Elem(), GetInstancePoolListPoolInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSClusterListClusterInput)(nil)).Elem(), GetSKSClusterListClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSClusterListClusterArrayInput)(nil)).Elem(), GetSKSClusterListClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSClusterListClusterOidcInput)(nil)).Elem(), GetSKSClusterListClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSClusterOidcInput)(nil)).Elem(), GetSKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSClusterOidcPtrInput)(nil)).Elem(), GetSKSClusterOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSNodepoolListNodepoolInput)(nil)).Elem(), GetSKSNodepoolListNodepoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSKSNodepoolListNodepoolArrayInput)(nil)).Elem(), GetSKSNodepoolListNodepoolArray{})
	pulumi.RegisterOutputType(ComputeInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(ComputeInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(DatabaseKafkaOutput{})
	pulumi.RegisterOutputType(DatabaseKafkaPtrOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchDashboardsOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchDashboardsPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexPatternOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexPatternArrayOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexTemplateOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexTemplatePtrOutput{})
	pulumi.RegisterOutputType(DatabasePgOutput{})
	pulumi.RegisterOutputType(DatabasePgPtrOutput{})
	pulumi.RegisterOutputType(DatabaseRedisOutput{})
	pulumi.RegisterOutputType(DatabaseRedisPtrOutput{})
	pulumi.RegisterOutputType(ElasticIPHealthcheckOutput{})
	pulumi.RegisterOutputType(ElasticIPHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(InstancePoolInstanceOutput{})
	pulumi.RegisterOutputType(InstancePoolInstanceArrayOutput{})
	pulumi.RegisterOutputType(NLBServiceHealthcheckOutput{})
	pulumi.RegisterOutputType(NLBServiceHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(SKSClusterOidcOutput{})
	pulumi.RegisterOutputType(SKSClusterOidcPtrOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesEgressOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesEgressArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesIngressOutput{})
	pulumi.RegisterOutputType(SecurityGroupRulesIngressArrayOutput{})
	pulumi.RegisterOutputType(GetComputeInstanceListInstanceOutput{})
	pulumi.RegisterOutputType(GetComputeInstanceListInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetDomainRecordFilterOutput{})
	pulumi.RegisterOutputType(GetDomainRecordRecordOutput{})
	pulumi.RegisterOutputType(GetDomainRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(GetElasticIPHealthcheckOutput{})
	pulumi.RegisterOutputType(GetElasticIPHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePoolInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancePoolInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePoolListPoolOutput{})
	pulumi.RegisterOutputType(GetInstancePoolListPoolArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePoolListPoolInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancePoolListPoolInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetSKSClusterListClusterOutput{})
	pulumi.RegisterOutputType(GetSKSClusterListClusterArrayOutput{})
	pulumi.RegisterOutputType(GetSKSClusterListClusterOidcOutput{})
	pulumi.RegisterOutputType(GetSKSClusterOidcOutput{})
	pulumi.RegisterOutputType(GetSKSClusterOidcPtrOutput{})
	pulumi.RegisterOutputType(GetSKSNodepoolListNodepoolOutput{})
	pulumi.RegisterOutputType(GetSKSNodepoolListNodepoolArrayOutput{})
}
