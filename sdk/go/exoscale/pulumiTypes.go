// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

var _ = internal.GetEnvOrDefault

type DatabaseGrafana struct {
	// Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).
	GrafanaSettings *string `pulumi:"grafanaSettings"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
}

// DatabaseGrafanaInput is an input type that accepts DatabaseGrafanaArgs and DatabaseGrafanaOutput values.
// You can construct a concrete instance of `DatabaseGrafanaInput` via:
//
//	DatabaseGrafanaArgs{...}
type DatabaseGrafanaInput interface {
	pulumi.Input

	ToDatabaseGrafanaOutput() DatabaseGrafanaOutput
	ToDatabaseGrafanaOutputWithContext(context.Context) DatabaseGrafanaOutput
}

type DatabaseGrafanaArgs struct {
	// Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).
	GrafanaSettings pulumi.StringPtrInput `pulumi:"grafanaSettings"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
}

func (DatabaseGrafanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseGrafana)(nil)).Elem()
}

func (i DatabaseGrafanaArgs) ToDatabaseGrafanaOutput() DatabaseGrafanaOutput {
	return i.ToDatabaseGrafanaOutputWithContext(context.Background())
}

func (i DatabaseGrafanaArgs) ToDatabaseGrafanaOutputWithContext(ctx context.Context) DatabaseGrafanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseGrafanaOutput)
}

func (i DatabaseGrafanaArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseGrafana] {
	return pulumix.Output[DatabaseGrafana]{
		OutputState: i.ToDatabaseGrafanaOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseGrafanaArgs) ToDatabaseGrafanaPtrOutput() DatabaseGrafanaPtrOutput {
	return i.ToDatabaseGrafanaPtrOutputWithContext(context.Background())
}

func (i DatabaseGrafanaArgs) ToDatabaseGrafanaPtrOutputWithContext(ctx context.Context) DatabaseGrafanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseGrafanaOutput).ToDatabaseGrafanaPtrOutputWithContext(ctx)
}

// DatabaseGrafanaPtrInput is an input type that accepts DatabaseGrafanaArgs, DatabaseGrafanaPtr and DatabaseGrafanaPtrOutput values.
// You can construct a concrete instance of `DatabaseGrafanaPtrInput` via:
//
//	        DatabaseGrafanaArgs{...}
//
//	or:
//
//	        nil
type DatabaseGrafanaPtrInput interface {
	pulumi.Input

	ToDatabaseGrafanaPtrOutput() DatabaseGrafanaPtrOutput
	ToDatabaseGrafanaPtrOutputWithContext(context.Context) DatabaseGrafanaPtrOutput
}

type databaseGrafanaPtrType DatabaseGrafanaArgs

func DatabaseGrafanaPtr(v *DatabaseGrafanaArgs) DatabaseGrafanaPtrInput {
	return (*databaseGrafanaPtrType)(v)
}

func (*databaseGrafanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseGrafana)(nil)).Elem()
}

func (i *databaseGrafanaPtrType) ToDatabaseGrafanaPtrOutput() DatabaseGrafanaPtrOutput {
	return i.ToDatabaseGrafanaPtrOutputWithContext(context.Background())
}

func (i *databaseGrafanaPtrType) ToDatabaseGrafanaPtrOutputWithContext(ctx context.Context) DatabaseGrafanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseGrafanaPtrOutput)
}

func (i *databaseGrafanaPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseGrafana] {
	return pulumix.Output[*DatabaseGrafana]{
		OutputState: i.ToDatabaseGrafanaPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseGrafanaOutput struct{ *pulumi.OutputState }

func (DatabaseGrafanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseGrafana)(nil)).Elem()
}

func (o DatabaseGrafanaOutput) ToDatabaseGrafanaOutput() DatabaseGrafanaOutput {
	return o
}

func (o DatabaseGrafanaOutput) ToDatabaseGrafanaOutputWithContext(ctx context.Context) DatabaseGrafanaOutput {
	return o
}

func (o DatabaseGrafanaOutput) ToDatabaseGrafanaPtrOutput() DatabaseGrafanaPtrOutput {
	return o.ToDatabaseGrafanaPtrOutputWithContext(context.Background())
}

func (o DatabaseGrafanaOutput) ToDatabaseGrafanaPtrOutputWithContext(ctx context.Context) DatabaseGrafanaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseGrafana) *DatabaseGrafana {
		return &v
	}).(DatabaseGrafanaPtrOutput)
}

func (o DatabaseGrafanaOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseGrafana] {
	return pulumix.Output[DatabaseGrafana]{
		OutputState: o.OutputState,
	}
}

// Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).
func (o DatabaseGrafanaOutput) GrafanaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseGrafana) *string { return v.GrafanaSettings }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseGrafanaOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseGrafana) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

type DatabaseGrafanaPtrOutput struct{ *pulumi.OutputState }

func (DatabaseGrafanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseGrafana)(nil)).Elem()
}

func (o DatabaseGrafanaPtrOutput) ToDatabaseGrafanaPtrOutput() DatabaseGrafanaPtrOutput {
	return o
}

func (o DatabaseGrafanaPtrOutput) ToDatabaseGrafanaPtrOutputWithContext(ctx context.Context) DatabaseGrafanaPtrOutput {
	return o
}

func (o DatabaseGrafanaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseGrafana] {
	return pulumix.Output[*DatabaseGrafana]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseGrafanaPtrOutput) Elem() DatabaseGrafanaOutput {
	return o.ApplyT(func(v *DatabaseGrafana) DatabaseGrafana {
		if v != nil {
			return *v
		}
		var ret DatabaseGrafana
		return ret
	}).(DatabaseGrafanaOutput)
}

// Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).
func (o DatabaseGrafanaPtrOutput) GrafanaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseGrafana) *string {
		if v == nil {
			return nil
		}
		return v.GrafanaSettings
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseGrafanaPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseGrafana) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

type DatabaseKafka struct {
	// Enable certificate-based authentication method.
	EnableCertAuth *bool `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect *bool `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest *bool `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth *bool `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry *bool `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings *string `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings *string `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings *string `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings *string `pulumi:"schemaRegistrySettings"`
	// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabaseKafkaInput is an input type that accepts DatabaseKafkaArgs and DatabaseKafkaOutput values.
// You can construct a concrete instance of `DatabaseKafkaInput` via:
//
//	DatabaseKafkaArgs{...}
type DatabaseKafkaInput interface {
	pulumi.Input

	ToDatabaseKafkaOutput() DatabaseKafkaOutput
	ToDatabaseKafkaOutputWithContext(context.Context) DatabaseKafkaOutput
}

type DatabaseKafkaArgs struct {
	// Enable certificate-based authentication method.
	EnableCertAuth pulumi.BoolPtrInput `pulumi:"enableCertAuth"`
	// Enable Kafka Connect.
	EnableKafkaConnect pulumi.BoolPtrInput `pulumi:"enableKafkaConnect"`
	// Enable Kafka REST.
	EnableKafkaRest pulumi.BoolPtrInput `pulumi:"enableKafkaRest"`
	// Enable SASL-based authentication method.
	EnableSaslAuth pulumi.BoolPtrInput `pulumi:"enableSaslAuth"`
	// Enable Schema Registry.
	EnableSchemaRegistry pulumi.BoolPtrInput `pulumi:"enableSchemaRegistry"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
	KafkaConnectSettings pulumi.StringPtrInput `pulumi:"kafkaConnectSettings"`
	// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
	KafkaRestSettings pulumi.StringPtrInput `pulumi:"kafkaRestSettings"`
	// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
	KafkaSettings pulumi.StringPtrInput `pulumi:"kafkaSettings"`
	// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
	SchemaRegistrySettings pulumi.StringPtrInput `pulumi:"schemaRegistrySettings"`
	// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return i.ToDatabaseKafkaOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput)
}

func (i DatabaseKafkaArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseKafka] {
	return pulumix.Output[DatabaseKafka]{
		OutputState: i.ToDatabaseKafkaOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i DatabaseKafkaArgs) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaOutput).ToDatabaseKafkaPtrOutputWithContext(ctx)
}

// DatabaseKafkaPtrInput is an input type that accepts DatabaseKafkaArgs, DatabaseKafkaPtr and DatabaseKafkaPtrOutput values.
// You can construct a concrete instance of `DatabaseKafkaPtrInput` via:
//
//	        DatabaseKafkaArgs{...}
//
//	or:
//
//	        nil
type DatabaseKafkaPtrInput interface {
	pulumi.Input

	ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput
	ToDatabaseKafkaPtrOutputWithContext(context.Context) DatabaseKafkaPtrOutput
}

type databaseKafkaPtrType DatabaseKafkaArgs

func DatabaseKafkaPtr(v *DatabaseKafkaArgs) DatabaseKafkaPtrInput {
	return (*databaseKafkaPtrType)(v)
}

func (*databaseKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return i.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (i *databaseKafkaPtrType) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKafkaPtrOutput)
}

func (i *databaseKafkaPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseKafka] {
	return pulumix.Output[*DatabaseKafka]{
		OutputState: i.ToDatabaseKafkaPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseKafkaOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutput() DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaOutputWithContext(ctx context.Context) DatabaseKafkaOutput {
	return o
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o.ToDatabaseKafkaPtrOutputWithContext(context.Background())
}

func (o DatabaseKafkaOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseKafka) *DatabaseKafka {
		return &v
	}).(DatabaseKafkaPtrOutput)
}

func (o DatabaseKafkaOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseKafka] {
	return pulumix.Output[DatabaseKafka]{
		OutputState: o.OutputState,
	}
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableCertAuth }).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaConnect }).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableKafkaRest }).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSaslAuth }).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *bool { return v.EnableSchemaRegistry }).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseKafka) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaConnectSettings }).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaRestSettings }).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.KafkaSettings }).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.SchemaRegistrySettings }).(pulumi.StringPtrOutput)
}

// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
func (o DatabaseKafkaOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseKafka) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseKafkaPtrOutput struct{ *pulumi.OutputState }

func (DatabaseKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKafka)(nil)).Elem()
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutput() DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) ToDatabaseKafkaPtrOutputWithContext(ctx context.Context) DatabaseKafkaPtrOutput {
	return o
}

func (o DatabaseKafkaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseKafka] {
	return pulumix.Output[*DatabaseKafka]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseKafkaPtrOutput) Elem() DatabaseKafkaOutput {
	return o.ApplyT(func(v *DatabaseKafka) DatabaseKafka {
		if v != nil {
			return *v
		}
		var ret DatabaseKafka
		return ret
	}).(DatabaseKafkaOutput)
}

// Enable certificate-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka Connect.
func (o DatabaseKafkaPtrOutput) EnableKafkaConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaConnect
	}).(pulumi.BoolPtrOutput)
}

// Enable Kafka REST.
func (o DatabaseKafkaPtrOutput) EnableKafkaRest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKafkaRest
	}).(pulumi.BoolPtrOutput)
}

// Enable SASL-based authentication method.
func (o DatabaseKafkaPtrOutput) EnableSaslAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSaslAuth
	}).(pulumi.BoolPtrOutput)
}

// Enable Schema Registry.
func (o DatabaseKafkaPtrOutput) EnableSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSchemaRegistry
	}).(pulumi.BoolPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseKafkaPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseKafka) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
func (o DatabaseKafkaPtrOutput) KafkaConnectSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaConnectSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
func (o DatabaseKafkaPtrOutput) KafkaRestSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaRestSettings
	}).(pulumi.StringPtrOutput)
}

// Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
func (o DatabaseKafkaPtrOutput) KafkaSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.KafkaSettings
	}).(pulumi.StringPtrOutput)
}

// Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
func (o DatabaseKafkaPtrOutput) SchemaRegistrySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.SchemaRegistrySettings
	}).(pulumi.StringPtrOutput)
}

// Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
func (o DatabaseKafkaPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseKafka) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseMysql struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings *string `pulumi:"mysqlSettings"`
	// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabaseMysqlInput is an input type that accepts DatabaseMysqlArgs and DatabaseMysqlOutput values.
// You can construct a concrete instance of `DatabaseMysqlInput` via:
//
//	DatabaseMysqlArgs{...}
type DatabaseMysqlInput interface {
	pulumi.Input

	ToDatabaseMysqlOutput() DatabaseMysqlOutput
	ToDatabaseMysqlOutputWithContext(context.Context) DatabaseMysqlOutput
}

type DatabaseMysqlArgs struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
	MysqlSettings pulumi.StringPtrInput `pulumi:"mysqlSettings"`
	// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return i.ToDatabaseMysqlOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput)
}

func (i DatabaseMysqlArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseMysql] {
	return pulumix.Output[DatabaseMysql]{
		OutputState: i.ToDatabaseMysqlOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i DatabaseMysqlArgs) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlOutput).ToDatabaseMysqlPtrOutputWithContext(ctx)
}

// DatabaseMysqlPtrInput is an input type that accepts DatabaseMysqlArgs, DatabaseMysqlPtr and DatabaseMysqlPtrOutput values.
// You can construct a concrete instance of `DatabaseMysqlPtrInput` via:
//
//	        DatabaseMysqlArgs{...}
//
//	or:
//
//	        nil
type DatabaseMysqlPtrInput interface {
	pulumi.Input

	ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput
	ToDatabaseMysqlPtrOutputWithContext(context.Context) DatabaseMysqlPtrOutput
}

type databaseMysqlPtrType DatabaseMysqlArgs

func DatabaseMysqlPtr(v *DatabaseMysqlArgs) DatabaseMysqlPtrInput {
	return (*databaseMysqlPtrType)(v)
}

func (*databaseMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return i.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (i *databaseMysqlPtrType) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlPtrOutput)
}

func (i *databaseMysqlPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysql] {
	return pulumix.Output[*DatabaseMysql]{
		OutputState: i.ToDatabaseMysqlPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseMysqlOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutput() DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlOutputWithContext(ctx context.Context) DatabaseMysqlOutput {
	return o
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o.ToDatabaseMysqlPtrOutputWithContext(context.Background())
}

func (o DatabaseMysqlOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseMysql) *DatabaseMysql {
		return &v
	}).(DatabaseMysqlPtrOutput)
}

func (o DatabaseMysqlOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseMysql] {
	return pulumix.Output[DatabaseMysql]{
		OutputState: o.OutputState,
	}
}

// A custom administrator account password (may only be set at creation time).
func (o DatabaseMysqlOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabaseMysqlOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabaseMysqlOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseMysql) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.MysqlSettings }).(pulumi.StringPtrOutput)
}

// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
func (o DatabaseMysqlOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseMysql) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseMysqlPtrOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysql)(nil)).Elem()
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutput() DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) ToDatabaseMysqlPtrOutputWithContext(ctx context.Context) DatabaseMysqlPtrOutput {
	return o
}

func (o DatabaseMysqlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysql] {
	return pulumix.Output[*DatabaseMysql]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseMysqlPtrOutput) Elem() DatabaseMysqlOutput {
	return o.ApplyT(func(v *DatabaseMysql) DatabaseMysql {
		if v != nil {
			return *v
		}
		var ret DatabaseMysql
		return ret
	}).(DatabaseMysqlOutput)
}

// A custom administrator account password (may only be set at creation time).
func (o DatabaseMysqlPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabaseMysqlPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabaseMysqlPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseMysqlPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMysql) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
func (o DatabaseMysqlPtrOutput) MysqlSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.MysqlSettings
	}).(pulumi.StringPtrOutput)
}

// MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
func (o DatabaseMysqlPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysql) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseOpensearch struct {
	// OpenSearch Dashboards settings
	Dashboards *DatabaseOpensearchDashboards `pulumi:"dashboards"`
	// ❗ Service name
	ForkFromService *string `pulumi:"forkFromService"`
	// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
	IndexPatterns []DatabaseOpensearchIndexPattern `pulumi:"indexPatterns"`
	// Template settings for all new indexes
	IndexTemplate *DatabaseOpensearchIndexTemplate `pulumi:"indexTemplate"`
	// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
	IpFilters []string `pulumi:"ipFilters"`
	// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
	KeepIndexRefreshInterval *bool `pulumi:"keepIndexRefreshInterval"`
	// Maximum number of indexes to keep (Minimum value is `0`)
	MaxIndexCount *int `pulumi:"maxIndexCount"`
	// ❗ Name of a backup to recover from
	RecoveryBackupName *string `pulumi:"recoveryBackupName"`
	// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
	Settings *string `pulumi:"settings"`
	// ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
	Version *string `pulumi:"version"`
}

// DatabaseOpensearchInput is an input type that accepts DatabaseOpensearchArgs and DatabaseOpensearchOutput values.
// You can construct a concrete instance of `DatabaseOpensearchInput` via:
//
//	DatabaseOpensearchArgs{...}
type DatabaseOpensearchInput interface {
	pulumi.Input

	ToDatabaseOpensearchOutput() DatabaseOpensearchOutput
	ToDatabaseOpensearchOutputWithContext(context.Context) DatabaseOpensearchOutput
}

type DatabaseOpensearchArgs struct {
	// OpenSearch Dashboards settings
	Dashboards DatabaseOpensearchDashboardsPtrInput `pulumi:"dashboards"`
	// ❗ Service name
	ForkFromService pulumi.StringPtrInput `pulumi:"forkFromService"`
	// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
	IndexPatterns DatabaseOpensearchIndexPatternArrayInput `pulumi:"indexPatterns"`
	// Template settings for all new indexes
	IndexTemplate DatabaseOpensearchIndexTemplatePtrInput `pulumi:"indexTemplate"`
	// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
	KeepIndexRefreshInterval pulumi.BoolPtrInput `pulumi:"keepIndexRefreshInterval"`
	// Maximum number of indexes to keep (Minimum value is `0`)
	MaxIndexCount pulumi.IntPtrInput `pulumi:"maxIndexCount"`
	// ❗ Name of a backup to recover from
	RecoveryBackupName pulumi.StringPtrInput `pulumi:"recoveryBackupName"`
	// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
	Settings pulumi.StringPtrInput `pulumi:"settings"`
	// ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseOpensearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearch)(nil)).Elem()
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchOutput() DatabaseOpensearchOutput {
	return i.ToDatabaseOpensearchOutputWithContext(context.Background())
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchOutputWithContext(ctx context.Context) DatabaseOpensearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchOutput)
}

func (i DatabaseOpensearchArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearch] {
	return pulumix.Output[DatabaseOpensearch]{
		OutputState: i.ToDatabaseOpensearchOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return i.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchArgs) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchOutput).ToDatabaseOpensearchPtrOutputWithContext(ctx)
}

// DatabaseOpensearchPtrInput is an input type that accepts DatabaseOpensearchArgs, DatabaseOpensearchPtr and DatabaseOpensearchPtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchPtrInput` via:
//
//	        DatabaseOpensearchArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchPtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput
	ToDatabaseOpensearchPtrOutputWithContext(context.Context) DatabaseOpensearchPtrOutput
}

type databaseOpensearchPtrType DatabaseOpensearchArgs

func DatabaseOpensearchPtr(v *DatabaseOpensearchArgs) DatabaseOpensearchPtrInput {
	return (*databaseOpensearchPtrType)(v)
}

func (*databaseOpensearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearch)(nil)).Elem()
}

func (i *databaseOpensearchPtrType) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return i.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchPtrType) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchPtrOutput)
}

func (i *databaseOpensearchPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearch] {
	return pulumix.Output[*DatabaseOpensearch]{
		OutputState: i.ToDatabaseOpensearchPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearch)(nil)).Elem()
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchOutput() DatabaseOpensearchOutput {
	return o
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchOutputWithContext(ctx context.Context) DatabaseOpensearchOutput {
	return o
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return o.ToDatabaseOpensearchPtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchOutput) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearch) *DatabaseOpensearch {
		return &v
	}).(DatabaseOpensearchPtrOutput)
}

func (o DatabaseOpensearchOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearch] {
	return pulumix.Output[DatabaseOpensearch]{
		OutputState: o.OutputState,
	}
}

// OpenSearch Dashboards settings
func (o DatabaseOpensearchOutput) Dashboards() DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *DatabaseOpensearchDashboards { return v.Dashboards }).(DatabaseOpensearchDashboardsPtrOutput)
}

// ❗ Service name
func (o DatabaseOpensearchOutput) ForkFromService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.ForkFromService }).(pulumi.StringPtrOutput)
}

// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
func (o DatabaseOpensearchOutput) IndexPatterns() DatabaseOpensearchIndexPatternArrayOutput {
	return o.ApplyT(func(v DatabaseOpensearch) []DatabaseOpensearchIndexPattern { return v.IndexPatterns }).(DatabaseOpensearchIndexPatternArrayOutput)
}

// Template settings for all new indexes
func (o DatabaseOpensearchOutput) IndexTemplate() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *DatabaseOpensearchIndexTemplate { return v.IndexTemplate }).(DatabaseOpensearchIndexTemplatePtrOutput)
}

// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
func (o DatabaseOpensearchOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseOpensearch) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
func (o DatabaseOpensearchOutput) KeepIndexRefreshInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *bool { return v.KeepIndexRefreshInterval }).(pulumi.BoolPtrOutput)
}

// Maximum number of indexes to keep (Minimum value is `0`)
func (o DatabaseOpensearchOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *int { return v.MaxIndexCount }).(pulumi.IntPtrOutput)
}

// ❗ Name of a backup to recover from
func (o DatabaseOpensearchOutput) RecoveryBackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.RecoveryBackupName }).(pulumi.StringPtrOutput)
}

// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
func (o DatabaseOpensearchOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.Settings }).(pulumi.StringPtrOutput)
}

// ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
func (o DatabaseOpensearchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchPtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearch)(nil)).Elem()
}

func (o DatabaseOpensearchPtrOutput) ToDatabaseOpensearchPtrOutput() DatabaseOpensearchPtrOutput {
	return o
}

func (o DatabaseOpensearchPtrOutput) ToDatabaseOpensearchPtrOutputWithContext(ctx context.Context) DatabaseOpensearchPtrOutput {
	return o
}

func (o DatabaseOpensearchPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearch] {
	return pulumix.Output[*DatabaseOpensearch]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchPtrOutput) Elem() DatabaseOpensearchOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) DatabaseOpensearch {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearch
		return ret
	}).(DatabaseOpensearchOutput)
}

// OpenSearch Dashboards settings
func (o DatabaseOpensearchPtrOutput) Dashboards() DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *DatabaseOpensearchDashboards {
		if v == nil {
			return nil
		}
		return v.Dashboards
	}).(DatabaseOpensearchDashboardsPtrOutput)
}

// ❗ Service name
func (o DatabaseOpensearchPtrOutput) ForkFromService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.ForkFromService
	}).(pulumi.StringPtrOutput)
}

// (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max*index*count to 0 will do nothing and the pattern gets ignored.
func (o DatabaseOpensearchPtrOutput) IndexPatterns() DatabaseOpensearchIndexPatternArrayOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) []DatabaseOpensearchIndexPattern {
		if v == nil {
			return nil
		}
		return v.IndexPatterns
	}).(DatabaseOpensearchIndexPatternArrayOutput)
}

// Template settings for all new indexes
func (o DatabaseOpensearchPtrOutput) IndexTemplate() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *DatabaseOpensearchIndexTemplate {
		if v == nil {
			return nil
		}
		return v.IndexTemplate
	}).(DatabaseOpensearchIndexTemplatePtrOutput)
}

// Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
func (o DatabaseOpensearchPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
func (o DatabaseOpensearchPtrOutput) KeepIndexRefreshInterval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *bool {
		if v == nil {
			return nil
		}
		return v.KeepIndexRefreshInterval
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of indexes to keep (Minimum value is `0`)
func (o DatabaseOpensearchPtrOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *int {
		if v == nil {
			return nil
		}
		return v.MaxIndexCount
	}).(pulumi.IntPtrOutput)
}

// ❗ Name of a backup to recover from
func (o DatabaseOpensearchPtrOutput) RecoveryBackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.RecoveryBackupName
	}).(pulumi.StringPtrOutput)
}

// OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
func (o DatabaseOpensearchPtrOutput) Settings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.StringPtrOutput)
}

// ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
func (o DatabaseOpensearchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchDashboards struct {
	Enabled         *bool `pulumi:"enabled"`
	MaxOldSpaceSize *int  `pulumi:"maxOldSpaceSize"`
	RequestTimeout  *int  `pulumi:"requestTimeout"`
}

// DatabaseOpensearchDashboardsInput is an input type that accepts DatabaseOpensearchDashboardsArgs and DatabaseOpensearchDashboardsOutput values.
// You can construct a concrete instance of `DatabaseOpensearchDashboardsInput` via:
//
//	DatabaseOpensearchDashboardsArgs{...}
type DatabaseOpensearchDashboardsInput interface {
	pulumi.Input

	ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput
	ToDatabaseOpensearchDashboardsOutputWithContext(context.Context) DatabaseOpensearchDashboardsOutput
}

type DatabaseOpensearchDashboardsArgs struct {
	Enabled         pulumi.BoolPtrInput `pulumi:"enabled"`
	MaxOldSpaceSize pulumi.IntPtrInput  `pulumi:"maxOldSpaceSize"`
	RequestTimeout  pulumi.IntPtrInput  `pulumi:"requestTimeout"`
}

func (DatabaseOpensearchDashboardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchDashboards)(nil)).Elem()
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput {
	return i.ToDatabaseOpensearchDashboardsOutputWithContext(context.Background())
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsOutput)
}

func (i DatabaseOpensearchDashboardsArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchDashboards] {
	return pulumix.Output[DatabaseOpensearchDashboards]{
		OutputState: i.ToDatabaseOpensearchDashboardsOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchDashboardsArgs) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsOutput).ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx)
}

// DatabaseOpensearchDashboardsPtrInput is an input type that accepts DatabaseOpensearchDashboardsArgs, DatabaseOpensearchDashboardsPtr and DatabaseOpensearchDashboardsPtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchDashboardsPtrInput` via:
//
//	        DatabaseOpensearchDashboardsArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchDashboardsPtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput
	ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Context) DatabaseOpensearchDashboardsPtrOutput
}

type databaseOpensearchDashboardsPtrType DatabaseOpensearchDashboardsArgs

func DatabaseOpensearchDashboardsPtr(v *DatabaseOpensearchDashboardsArgs) DatabaseOpensearchDashboardsPtrInput {
	return (*databaseOpensearchDashboardsPtrType)(v)
}

func (*databaseOpensearchDashboardsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchDashboards)(nil)).Elem()
}

func (i *databaseOpensearchDashboardsPtrType) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchDashboardsPtrType) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchDashboardsPtrOutput)
}

func (i *databaseOpensearchDashboardsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchDashboards] {
	return pulumix.Output[*DatabaseOpensearchDashboards]{
		OutputState: i.ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchDashboardsOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchDashboardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchDashboards)(nil)).Elem()
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsOutput() DatabaseOpensearchDashboardsOutput {
	return o
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsOutput {
	return o
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return o.ToDatabaseOpensearchDashboardsPtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchDashboardsOutput) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearchDashboards) *DatabaseOpensearchDashboards {
		return &v
	}).(DatabaseOpensearchDashboardsPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchDashboards] {
	return pulumix.Output[DatabaseOpensearchDashboards]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchDashboardsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) MaxOldSpaceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *int { return v.MaxOldSpaceSize }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchDashboardsOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchDashboards) *int { return v.RequestTimeout }).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchDashboardsPtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchDashboardsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchDashboards)(nil)).Elem()
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToDatabaseOpensearchDashboardsPtrOutput() DatabaseOpensearchDashboardsPtrOutput {
	return o
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToDatabaseOpensearchDashboardsPtrOutputWithContext(ctx context.Context) DatabaseOpensearchDashboardsPtrOutput {
	return o
}

func (o DatabaseOpensearchDashboardsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchDashboards] {
	return pulumix.Output[*DatabaseOpensearchDashboards]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchDashboardsPtrOutput) Elem() DatabaseOpensearchDashboardsOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) DatabaseOpensearchDashboards {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearchDashboards
		return ret
	}).(DatabaseOpensearchDashboardsOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) MaxOldSpaceSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *int {
		if v == nil {
			return nil
		}
		return v.MaxOldSpaceSize
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchDashboardsPtrOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchDashboards) *int {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchIndexPattern struct {
	MaxIndexCount    *int    `pulumi:"maxIndexCount"`
	Pattern          *string `pulumi:"pattern"`
	SortingAlgorithm *string `pulumi:"sortingAlgorithm"`
}

// DatabaseOpensearchIndexPatternInput is an input type that accepts DatabaseOpensearchIndexPatternArgs and DatabaseOpensearchIndexPatternOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexPatternInput` via:
//
//	DatabaseOpensearchIndexPatternArgs{...}
type DatabaseOpensearchIndexPatternInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput
	ToDatabaseOpensearchIndexPatternOutputWithContext(context.Context) DatabaseOpensearchIndexPatternOutput
}

type DatabaseOpensearchIndexPatternArgs struct {
	MaxIndexCount    pulumi.IntPtrInput    `pulumi:"maxIndexCount"`
	Pattern          pulumi.StringPtrInput `pulumi:"pattern"`
	SortingAlgorithm pulumi.StringPtrInput `pulumi:"sortingAlgorithm"`
}

func (DatabaseOpensearchIndexPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (i DatabaseOpensearchIndexPatternArgs) ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput {
	return i.ToDatabaseOpensearchIndexPatternOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexPatternArgs) ToDatabaseOpensearchIndexPatternOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexPatternOutput)
}

func (i DatabaseOpensearchIndexPatternArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexPattern] {
	return pulumix.Output[DatabaseOpensearchIndexPattern]{
		OutputState: i.ToDatabaseOpensearchIndexPatternOutputWithContext(ctx).OutputState,
	}
}

// DatabaseOpensearchIndexPatternArrayInput is an input type that accepts DatabaseOpensearchIndexPatternArray and DatabaseOpensearchIndexPatternArrayOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexPatternArrayInput` via:
//
//	DatabaseOpensearchIndexPatternArray{ DatabaseOpensearchIndexPatternArgs{...} }
type DatabaseOpensearchIndexPatternArrayInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput
	ToDatabaseOpensearchIndexPatternArrayOutputWithContext(context.Context) DatabaseOpensearchIndexPatternArrayOutput
}

type DatabaseOpensearchIndexPatternArray []DatabaseOpensearchIndexPatternInput

func (DatabaseOpensearchIndexPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (i DatabaseOpensearchIndexPatternArray) ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput {
	return i.ToDatabaseOpensearchIndexPatternArrayOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexPatternArray) ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexPatternArrayOutput)
}

func (i DatabaseOpensearchIndexPatternArray) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseOpensearchIndexPattern] {
	return pulumix.Output[[]DatabaseOpensearchIndexPattern]{
		OutputState: i.ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchIndexPatternOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (o DatabaseOpensearchIndexPatternOutput) ToDatabaseOpensearchIndexPatternOutput() DatabaseOpensearchIndexPatternOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternOutput) ToDatabaseOpensearchIndexPatternOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexPattern] {
	return pulumix.Output[DatabaseOpensearchIndexPattern]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexPatternOutput) MaxIndexCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *int { return v.MaxIndexCount }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexPatternOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o DatabaseOpensearchIndexPatternOutput) SortingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexPattern) *string { return v.SortingAlgorithm }).(pulumi.StringPtrOutput)
}

type DatabaseOpensearchIndexPatternArrayOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseOpensearchIndexPattern)(nil)).Elem()
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToDatabaseOpensearchIndexPatternArrayOutput() DatabaseOpensearchIndexPatternArrayOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToDatabaseOpensearchIndexPatternArrayOutputWithContext(ctx context.Context) DatabaseOpensearchIndexPatternArrayOutput {
	return o
}

func (o DatabaseOpensearchIndexPatternArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseOpensearchIndexPattern] {
	return pulumix.Output[[]DatabaseOpensearchIndexPattern]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexPatternArrayOutput) Index(i pulumi.IntInput) DatabaseOpensearchIndexPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseOpensearchIndexPattern {
		return vs[0].([]DatabaseOpensearchIndexPattern)[vs[1].(int)]
	}).(DatabaseOpensearchIndexPatternOutput)
}

type DatabaseOpensearchIndexTemplate struct {
	MappingNestedObjectsLimit *int `pulumi:"mappingNestedObjectsLimit"`
	NumberOfReplicas          *int `pulumi:"numberOfReplicas"`
	NumberOfShards            *int `pulumi:"numberOfShards"`
}

// DatabaseOpensearchIndexTemplateInput is an input type that accepts DatabaseOpensearchIndexTemplateArgs and DatabaseOpensearchIndexTemplateOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexTemplateInput` via:
//
//	DatabaseOpensearchIndexTemplateArgs{...}
type DatabaseOpensearchIndexTemplateInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput
	ToDatabaseOpensearchIndexTemplateOutputWithContext(context.Context) DatabaseOpensearchIndexTemplateOutput
}

type DatabaseOpensearchIndexTemplateArgs struct {
	MappingNestedObjectsLimit pulumi.IntPtrInput `pulumi:"mappingNestedObjectsLimit"`
	NumberOfReplicas          pulumi.IntPtrInput `pulumi:"numberOfReplicas"`
	NumberOfShards            pulumi.IntPtrInput `pulumi:"numberOfShards"`
}

func (DatabaseOpensearchIndexTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput {
	return i.ToDatabaseOpensearchIndexTemplateOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplateOutput)
}

func (i DatabaseOpensearchIndexTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[DatabaseOpensearchIndexTemplate]{
		OutputState: i.ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (i DatabaseOpensearchIndexTemplateArgs) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplateOutput).ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx)
}

// DatabaseOpensearchIndexTemplatePtrInput is an input type that accepts DatabaseOpensearchIndexTemplateArgs, DatabaseOpensearchIndexTemplatePtr and DatabaseOpensearchIndexTemplatePtrOutput values.
// You can construct a concrete instance of `DatabaseOpensearchIndexTemplatePtrInput` via:
//
//	        DatabaseOpensearchIndexTemplateArgs{...}
//
//	or:
//
//	        nil
type DatabaseOpensearchIndexTemplatePtrInput interface {
	pulumi.Input

	ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput
	ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Context) DatabaseOpensearchIndexTemplatePtrOutput
}

type databaseOpensearchIndexTemplatePtrType DatabaseOpensearchIndexTemplateArgs

func DatabaseOpensearchIndexTemplatePtr(v *DatabaseOpensearchIndexTemplateArgs) DatabaseOpensearchIndexTemplatePtrInput {
	return (*databaseOpensearchIndexTemplatePtrType)(v)
}

func (*databaseOpensearchIndexTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (i *databaseOpensearchIndexTemplatePtrType) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (i *databaseOpensearchIndexTemplatePtrType) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOpensearchIndexTemplatePtrOutput)
}

func (i *databaseOpensearchIndexTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[*DatabaseOpensearchIndexTemplate]{
		OutputState: i.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseOpensearchIndexTemplateOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplateOutput() DatabaseOpensearchIndexTemplateOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplateOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplateOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(context.Background())
}

func (o DatabaseOpensearchIndexTemplateOutput) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseOpensearchIndexTemplate) *DatabaseOpensearchIndexTemplate {
		return &v
	}).(DatabaseOpensearchIndexTemplatePtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[DatabaseOpensearchIndexTemplate]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexTemplateOutput) MappingNestedObjectsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.MappingNestedObjectsLimit }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) NumberOfReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.NumberOfReplicas }).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplateOutput) NumberOfShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseOpensearchIndexTemplate) *int { return v.NumberOfShards }).(pulumi.IntPtrOutput)
}

type DatabaseOpensearchIndexTemplatePtrOutput struct{ *pulumi.OutputState }

func (DatabaseOpensearchIndexTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOpensearchIndexTemplate)(nil)).Elem()
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToDatabaseOpensearchIndexTemplatePtrOutput() DatabaseOpensearchIndexTemplatePtrOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToDatabaseOpensearchIndexTemplatePtrOutputWithContext(ctx context.Context) DatabaseOpensearchIndexTemplatePtrOutput {
	return o
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseOpensearchIndexTemplate] {
	return pulumix.Output[*DatabaseOpensearchIndexTemplate]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) Elem() DatabaseOpensearchIndexTemplateOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) DatabaseOpensearchIndexTemplate {
		if v != nil {
			return *v
		}
		var ret DatabaseOpensearchIndexTemplate
		return ret
	}).(DatabaseOpensearchIndexTemplateOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) MappingNestedObjectsLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.MappingNestedObjectsLimit
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) NumberOfReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfReplicas
	}).(pulumi.IntPtrOutput)
}

func (o DatabaseOpensearchIndexTemplatePtrOutput) NumberOfShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseOpensearchIndexTemplate) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfShards
	}).(pulumi.IntPtrOutput)
}

type DatabasePg struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword *string `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername *string `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule *string `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings *string `pulumi:"pgSettings"`
	// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
	PgbouncerSettings *string `pulumi:"pgbouncerSettings"`
	// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
	PglookoutSettings *string `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
}

// DatabasePgInput is an input type that accepts DatabasePgArgs and DatabasePgOutput values.
// You can construct a concrete instance of `DatabasePgInput` via:
//
//	DatabasePgArgs{...}
type DatabasePgInput interface {
	pulumi.Input

	ToDatabasePgOutput() DatabasePgOutput
	ToDatabasePgOutputWithContext(context.Context) DatabasePgOutput
}

type DatabasePgArgs struct {
	// A custom administrator account password (may only be set at creation time).
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// A custom administrator account username (may only be set at creation time).
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The automated backup schedule (`HH:MM`).
	BackupSchedule pulumi.StringPtrInput `pulumi:"backupSchedule"`
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
	PgSettings pulumi.StringPtrInput `pulumi:"pgSettings"`
	// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
	PgbouncerSettings pulumi.StringPtrInput `pulumi:"pgbouncerSettings"`
	// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
	PglookoutSettings pulumi.StringPtrInput `pulumi:"pglookoutSettings"`
	// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabasePgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (i DatabasePgArgs) ToDatabasePgOutput() DatabasePgOutput {
	return i.ToDatabasePgOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput)
}

func (i DatabasePgArgs) ToOutput(ctx context.Context) pulumix.Output[DatabasePg] {
	return pulumix.Output[DatabasePg]{
		OutputState: i.ToDatabasePgOutputWithContext(ctx).OutputState,
	}
}

func (i DatabasePgArgs) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i DatabasePgArgs) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgOutput).ToDatabasePgPtrOutputWithContext(ctx)
}

// DatabasePgPtrInput is an input type that accepts DatabasePgArgs, DatabasePgPtr and DatabasePgPtrOutput values.
// You can construct a concrete instance of `DatabasePgPtrInput` via:
//
//	        DatabasePgArgs{...}
//
//	or:
//
//	        nil
type DatabasePgPtrInput interface {
	pulumi.Input

	ToDatabasePgPtrOutput() DatabasePgPtrOutput
	ToDatabasePgPtrOutputWithContext(context.Context) DatabasePgPtrOutput
}

type databasePgPtrType DatabasePgArgs

func DatabasePgPtr(v *DatabasePgArgs) DatabasePgPtrInput {
	return (*databasePgPtrType)(v)
}

func (*databasePgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (i *databasePgPtrType) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return i.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (i *databasePgPtrType) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePgPtrOutput)
}

func (i *databasePgPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabasePg] {
	return pulumix.Output[*DatabasePg]{
		OutputState: i.ToDatabasePgPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabasePgOutput struct{ *pulumi.OutputState }

func (DatabasePgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePg)(nil)).Elem()
}

func (o DatabasePgOutput) ToDatabasePgOutput() DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgOutputWithContext(ctx context.Context) DatabasePgOutput {
	return o
}

func (o DatabasePgOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o.ToDatabasePgPtrOutputWithContext(context.Background())
}

func (o DatabasePgOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabasePg) *DatabasePg {
		return &v
	}).(DatabasePgPtrOutput)
}

func (o DatabasePgOutput) ToOutput(ctx context.Context) pulumix.Output[DatabasePg] {
	return pulumix.Output[DatabasePg]{
		OutputState: o.OutputState,
	}
}

// A custom administrator account password (may only be set at creation time).
func (o DatabasePgOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabasePgOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabasePgOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.BackupSchedule }).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabasePg) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgSettings }).(pulumi.StringPtrOutput)
}

// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
func (o DatabasePgOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PgbouncerSettings }).(pulumi.StringPtrOutput)
}

// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
func (o DatabasePgOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.PglookoutSettings }).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
func (o DatabasePgOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasePg) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabasePgPtrOutput struct{ *pulumi.OutputState }

func (DatabasePgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePg)(nil)).Elem()
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutput() DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) ToDatabasePgPtrOutputWithContext(ctx context.Context) DatabasePgPtrOutput {
	return o
}

func (o DatabasePgPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabasePg] {
	return pulumix.Output[*DatabasePg]{
		OutputState: o.OutputState,
	}
}

func (o DatabasePgPtrOutput) Elem() DatabasePgOutput {
	return o.ApplyT(func(v *DatabasePg) DatabasePg {
		if v != nil {
			return *v
		}
		var ret DatabasePg
		return ret
	}).(DatabasePgOutput)
}

// A custom administrator account password (may only be set at creation time).
func (o DatabasePgPtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// A custom administrator account username (may only be set at creation time).
func (o DatabasePgPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The automated backup schedule (`HH:MM`).
func (o DatabasePgPtrOutput) BackupSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.BackupSchedule
	}).(pulumi.StringPtrOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabasePgPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasePg) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
func (o DatabasePgPtrOutput) PgSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgSettings
	}).(pulumi.StringPtrOutput)
}

// PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
func (o DatabasePgPtrOutput) PgbouncerSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PgbouncerSettings
	}).(pulumi.StringPtrOutput)
}

// pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
func (o DatabasePgPtrOutput) PglookoutSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.PglookoutSettings
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
func (o DatabasePgPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePg) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type DatabaseRedis struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters []string `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings *string `pulumi:"redisSettings"`
}

// DatabaseRedisInput is an input type that accepts DatabaseRedisArgs and DatabaseRedisOutput values.
// You can construct a concrete instance of `DatabaseRedisInput` via:
//
//	DatabaseRedisArgs{...}
type DatabaseRedisInput interface {
	pulumi.Input

	ToDatabaseRedisOutput() DatabaseRedisOutput
	ToDatabaseRedisOutputWithContext(context.Context) DatabaseRedisOutput
}

type DatabaseRedisArgs struct {
	// A list of CIDR blocks to allow incoming connections from.
	IpFilters pulumi.StringArrayInput `pulumi:"ipFilters"`
	// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
	RedisSettings pulumi.StringPtrInput `pulumi:"redisSettings"`
}

func (DatabaseRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return i.ToDatabaseRedisOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput)
}

func (i DatabaseRedisArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseRedis] {
	return pulumix.Output[DatabaseRedis]{
		OutputState: i.ToDatabaseRedisOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i DatabaseRedisArgs) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisOutput).ToDatabaseRedisPtrOutputWithContext(ctx)
}

// DatabaseRedisPtrInput is an input type that accepts DatabaseRedisArgs, DatabaseRedisPtr and DatabaseRedisPtrOutput values.
// You can construct a concrete instance of `DatabaseRedisPtrInput` via:
//
//	        DatabaseRedisArgs{...}
//
//	or:
//
//	        nil
type DatabaseRedisPtrInput interface {
	pulumi.Input

	ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput
	ToDatabaseRedisPtrOutputWithContext(context.Context) DatabaseRedisPtrOutput
}

type databaseRedisPtrType DatabaseRedisArgs

func DatabaseRedisPtr(v *DatabaseRedisArgs) DatabaseRedisPtrInput {
	return (*databaseRedisPtrType)(v)
}

func (*databaseRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return i.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (i *databaseRedisPtrType) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRedisPtrOutput)
}

func (i *databaseRedisPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseRedis] {
	return pulumix.Output[*DatabaseRedis]{
		OutputState: i.ToDatabaseRedisPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseRedisOutput struct{ *pulumi.OutputState }

func (DatabaseRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutput() DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisOutputWithContext(ctx context.Context) DatabaseRedisOutput {
	return o
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o.ToDatabaseRedisPtrOutputWithContext(context.Background())
}

func (o DatabaseRedisOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseRedis) *DatabaseRedis {
		return &v
	}).(DatabaseRedisPtrOutput)
}

func (o DatabaseRedisOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseRedis] {
	return pulumix.Output[DatabaseRedis]{
		OutputState: o.OutputState,
	}
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatabaseRedis) []string { return v.IpFilters }).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseRedis) *string { return v.RedisSettings }).(pulumi.StringPtrOutput)
}

type DatabaseRedisPtrOutput struct{ *pulumi.OutputState }

func (DatabaseRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRedis)(nil)).Elem()
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutput() DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) ToDatabaseRedisPtrOutputWithContext(ctx context.Context) DatabaseRedisPtrOutput {
	return o
}

func (o DatabaseRedisPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseRedis] {
	return pulumix.Output[*DatabaseRedis]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseRedisPtrOutput) Elem() DatabaseRedisOutput {
	return o.ApplyT(func(v *DatabaseRedis) DatabaseRedis {
		if v != nil {
			return *v
		}
		var ret DatabaseRedis
		return ret
	}).(DatabaseRedisOutput)
}

// A list of CIDR blocks to allow incoming connections from.
func (o DatabaseRedisPtrOutput) IpFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseRedis) []string {
		if v == nil {
			return nil
		}
		return v.IpFilters
	}).(pulumi.StringArrayOutput)
}

// Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
func (o DatabaseRedisPtrOutput) RedisSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseRedis) *string {
		if v == nil {
			return nil
		}
		return v.RedisSettings
	}).(pulumi.StringPtrOutput)
}

type DatabaseTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create *string `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete *string `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update *string `pulumi:"update"`
}

// DatabaseTimeoutsInput is an input type that accepts DatabaseTimeoutsArgs and DatabaseTimeoutsOutput values.
// You can construct a concrete instance of `DatabaseTimeoutsInput` via:
//
//	DatabaseTimeoutsArgs{...}
type DatabaseTimeoutsInput interface {
	pulumi.Input

	ToDatabaseTimeoutsOutput() DatabaseTimeoutsOutput
	ToDatabaseTimeoutsOutputWithContext(context.Context) DatabaseTimeoutsOutput
}

type DatabaseTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Create pulumi.StringPtrInput `pulumi:"create"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (DatabaseTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTimeouts)(nil)).Elem()
}

func (i DatabaseTimeoutsArgs) ToDatabaseTimeoutsOutput() DatabaseTimeoutsOutput {
	return i.ToDatabaseTimeoutsOutputWithContext(context.Background())
}

func (i DatabaseTimeoutsArgs) ToDatabaseTimeoutsOutputWithContext(ctx context.Context) DatabaseTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTimeoutsOutput)
}

func (i DatabaseTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseTimeouts] {
	return pulumix.Output[DatabaseTimeouts]{
		OutputState: i.ToDatabaseTimeoutsOutputWithContext(ctx).OutputState,
	}
}

func (i DatabaseTimeoutsArgs) ToDatabaseTimeoutsPtrOutput() DatabaseTimeoutsPtrOutput {
	return i.ToDatabaseTimeoutsPtrOutputWithContext(context.Background())
}

func (i DatabaseTimeoutsArgs) ToDatabaseTimeoutsPtrOutputWithContext(ctx context.Context) DatabaseTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTimeoutsOutput).ToDatabaseTimeoutsPtrOutputWithContext(ctx)
}

// DatabaseTimeoutsPtrInput is an input type that accepts DatabaseTimeoutsArgs, DatabaseTimeoutsPtr and DatabaseTimeoutsPtrOutput values.
// You can construct a concrete instance of `DatabaseTimeoutsPtrInput` via:
//
//	        DatabaseTimeoutsArgs{...}
//
//	or:
//
//	        nil
type DatabaseTimeoutsPtrInput interface {
	pulumi.Input

	ToDatabaseTimeoutsPtrOutput() DatabaseTimeoutsPtrOutput
	ToDatabaseTimeoutsPtrOutputWithContext(context.Context) DatabaseTimeoutsPtrOutput
}

type databaseTimeoutsPtrType DatabaseTimeoutsArgs

func DatabaseTimeoutsPtr(v *DatabaseTimeoutsArgs) DatabaseTimeoutsPtrInput {
	return (*databaseTimeoutsPtrType)(v)
}

func (*databaseTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTimeouts)(nil)).Elem()
}

func (i *databaseTimeoutsPtrType) ToDatabaseTimeoutsPtrOutput() DatabaseTimeoutsPtrOutput {
	return i.ToDatabaseTimeoutsPtrOutputWithContext(context.Background())
}

func (i *databaseTimeoutsPtrType) ToDatabaseTimeoutsPtrOutputWithContext(ctx context.Context) DatabaseTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTimeoutsPtrOutput)
}

func (i *databaseTimeoutsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatabaseTimeouts] {
	return pulumix.Output[*DatabaseTimeouts]{
		OutputState: i.ToDatabaseTimeoutsPtrOutputWithContext(ctx).OutputState,
	}
}

type DatabaseTimeoutsOutput struct{ *pulumi.OutputState }

func (DatabaseTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseTimeouts)(nil)).Elem()
}

func (o DatabaseTimeoutsOutput) ToDatabaseTimeoutsOutput() DatabaseTimeoutsOutput {
	return o
}

func (o DatabaseTimeoutsOutput) ToDatabaseTimeoutsOutputWithContext(ctx context.Context) DatabaseTimeoutsOutput {
	return o
}

func (o DatabaseTimeoutsOutput) ToDatabaseTimeoutsPtrOutput() DatabaseTimeoutsPtrOutput {
	return o.ToDatabaseTimeoutsPtrOutputWithContext(context.Background())
}

func (o DatabaseTimeoutsOutput) ToDatabaseTimeoutsPtrOutputWithContext(ctx context.Context) DatabaseTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseTimeouts) *DatabaseTimeouts {
		return &v
	}).(DatabaseTimeoutsPtrOutput)
}

func (o DatabaseTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseTimeouts] {
	return pulumix.Output[DatabaseTimeouts]{
		OutputState: o.OutputState,
	}
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DatabaseTimeoutsOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTimeouts) *string { return v.Create }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o DatabaseTimeoutsOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTimeouts) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o DatabaseTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DatabaseTimeoutsOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseTimeouts) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type DatabaseTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (DatabaseTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTimeouts)(nil)).Elem()
}

func (o DatabaseTimeoutsPtrOutput) ToDatabaseTimeoutsPtrOutput() DatabaseTimeoutsPtrOutput {
	return o
}

func (o DatabaseTimeoutsPtrOutput) ToDatabaseTimeoutsPtrOutputWithContext(ctx context.Context) DatabaseTimeoutsPtrOutput {
	return o
}

func (o DatabaseTimeoutsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseTimeouts] {
	return pulumix.Output[*DatabaseTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseTimeoutsPtrOutput) Elem() DatabaseTimeoutsOutput {
	return o.ApplyT(func(v *DatabaseTimeouts) DatabaseTimeouts {
		if v != nil {
			return *v
		}
		var ret DatabaseTimeouts
		return ret
	}).(DatabaseTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DatabaseTimeoutsPtrOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Create
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
func (o DatabaseTimeoutsPtrOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o DatabaseTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
func (o DatabaseTimeoutsPtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type GetDatabaseURITimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
}

// GetDatabaseURITimeoutsInput is an input type that accepts GetDatabaseURITimeoutsArgs and GetDatabaseURITimeoutsOutput values.
// You can construct a concrete instance of `GetDatabaseURITimeoutsInput` via:
//
//	GetDatabaseURITimeoutsArgs{...}
type GetDatabaseURITimeoutsInput interface {
	pulumi.Input

	ToGetDatabaseURITimeoutsOutput() GetDatabaseURITimeoutsOutput
	ToGetDatabaseURITimeoutsOutputWithContext(context.Context) GetDatabaseURITimeoutsOutput
}

type GetDatabaseURITimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (GetDatabaseURITimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseURITimeouts)(nil)).Elem()
}

func (i GetDatabaseURITimeoutsArgs) ToGetDatabaseURITimeoutsOutput() GetDatabaseURITimeoutsOutput {
	return i.ToGetDatabaseURITimeoutsOutputWithContext(context.Background())
}

func (i GetDatabaseURITimeoutsArgs) ToGetDatabaseURITimeoutsOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseURITimeoutsOutput)
}

func (i GetDatabaseURITimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[GetDatabaseURITimeouts] {
	return pulumix.Output[GetDatabaseURITimeouts]{
		OutputState: i.ToGetDatabaseURITimeoutsOutputWithContext(ctx).OutputState,
	}
}

func (i GetDatabaseURITimeoutsArgs) ToGetDatabaseURITimeoutsPtrOutput() GetDatabaseURITimeoutsPtrOutput {
	return i.ToGetDatabaseURITimeoutsPtrOutputWithContext(context.Background())
}

func (i GetDatabaseURITimeoutsArgs) ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseURITimeoutsOutput).ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx)
}

// GetDatabaseURITimeoutsPtrInput is an input type that accepts GetDatabaseURITimeoutsArgs, GetDatabaseURITimeoutsPtr and GetDatabaseURITimeoutsPtrOutput values.
// You can construct a concrete instance of `GetDatabaseURITimeoutsPtrInput` via:
//
//	        GetDatabaseURITimeoutsArgs{...}
//
//	or:
//
//	        nil
type GetDatabaseURITimeoutsPtrInput interface {
	pulumi.Input

	ToGetDatabaseURITimeoutsPtrOutput() GetDatabaseURITimeoutsPtrOutput
	ToGetDatabaseURITimeoutsPtrOutputWithContext(context.Context) GetDatabaseURITimeoutsPtrOutput
}

type getDatabaseURITimeoutsPtrType GetDatabaseURITimeoutsArgs

func GetDatabaseURITimeoutsPtr(v *GetDatabaseURITimeoutsArgs) GetDatabaseURITimeoutsPtrInput {
	return (*getDatabaseURITimeoutsPtrType)(v)
}

func (*getDatabaseURITimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseURITimeouts)(nil)).Elem()
}

func (i *getDatabaseURITimeoutsPtrType) ToGetDatabaseURITimeoutsPtrOutput() GetDatabaseURITimeoutsPtrOutput {
	return i.ToGetDatabaseURITimeoutsPtrOutputWithContext(context.Background())
}

func (i *getDatabaseURITimeoutsPtrType) ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseURITimeoutsPtrOutput)
}

func (i *getDatabaseURITimeoutsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetDatabaseURITimeouts] {
	return pulumix.Output[*GetDatabaseURITimeouts]{
		OutputState: i.ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetDatabaseURITimeoutsOutput struct{ *pulumi.OutputState }

func (GetDatabaseURITimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseURITimeouts)(nil)).Elem()
}

func (o GetDatabaseURITimeoutsOutput) ToGetDatabaseURITimeoutsOutput() GetDatabaseURITimeoutsOutput {
	return o
}

func (o GetDatabaseURITimeoutsOutput) ToGetDatabaseURITimeoutsOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsOutput {
	return o
}

func (o GetDatabaseURITimeoutsOutput) ToGetDatabaseURITimeoutsPtrOutput() GetDatabaseURITimeoutsPtrOutput {
	return o.ToGetDatabaseURITimeoutsPtrOutputWithContext(context.Background())
}

func (o GetDatabaseURITimeoutsOutput) ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatabaseURITimeouts) *GetDatabaseURITimeouts {
		return &v
	}).(GetDatabaseURITimeoutsPtrOutput)
}

func (o GetDatabaseURITimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[GetDatabaseURITimeouts] {
	return pulumix.Output[GetDatabaseURITimeouts]{
		OutputState: o.OutputState,
	}
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetDatabaseURITimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatabaseURITimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type GetDatabaseURITimeoutsPtrOutput struct{ *pulumi.OutputState }

func (GetDatabaseURITimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatabaseURITimeouts)(nil)).Elem()
}

func (o GetDatabaseURITimeoutsPtrOutput) ToGetDatabaseURITimeoutsPtrOutput() GetDatabaseURITimeoutsPtrOutput {
	return o
}

func (o GetDatabaseURITimeoutsPtrOutput) ToGetDatabaseURITimeoutsPtrOutputWithContext(ctx context.Context) GetDatabaseURITimeoutsPtrOutput {
	return o
}

func (o GetDatabaseURITimeoutsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetDatabaseURITimeouts] {
	return pulumix.Output[*GetDatabaseURITimeouts]{
		OutputState: o.OutputState,
	}
}

func (o GetDatabaseURITimeoutsPtrOutput) Elem() GetDatabaseURITimeoutsOutput {
	return o.ApplyT(func(v *GetDatabaseURITimeouts) GetDatabaseURITimeouts {
		if v != nil {
			return *v
		}
		var ret GetDatabaseURITimeouts
		return ret
	}).(GetDatabaseURITimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetDatabaseURITimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatabaseURITimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

type GetNLBServiceListService struct {
	// NLB service description.
	Description string                              `pulumi:"description"`
	Healthcheck GetNLBServiceListServiceHealthcheck `pulumi:"healthcheck"`
	// NLB service ID.
	Id string `pulumi:"id"`
	// The exoscale*instance*pool (ID) to forward traffic to.
	InstancePoolId string `pulumi:"instancePoolId"`
	// NLB Service name.
	Name string `pulumi:"name"`
	// Port exposed on the NLB's public IP.
	Port int `pulumi:"port"`
	// Network traffic protocol.
	Protocol string `pulumi:"protocol"`
	// NLB Service State.
	State string `pulumi:"state"`
	// The strategy (`round-robin`|`source-hash`).
	Strategy string `pulumi:"strategy"`
	// Port on which the network traffic will be forwarded to on the receiving instance.
	TargetPort int `pulumi:"targetPort"`
}

// GetNLBServiceListServiceInput is an input type that accepts GetNLBServiceListServiceArgs and GetNLBServiceListServiceOutput values.
// You can construct a concrete instance of `GetNLBServiceListServiceInput` via:
//
//	GetNLBServiceListServiceArgs{...}
type GetNLBServiceListServiceInput interface {
	pulumi.Input

	ToGetNLBServiceListServiceOutput() GetNLBServiceListServiceOutput
	ToGetNLBServiceListServiceOutputWithContext(context.Context) GetNLBServiceListServiceOutput
}

type GetNLBServiceListServiceArgs struct {
	// NLB service description.
	Description pulumi.StringInput                       `pulumi:"description"`
	Healthcheck GetNLBServiceListServiceHealthcheckInput `pulumi:"healthcheck"`
	// NLB service ID.
	Id pulumi.StringInput `pulumi:"id"`
	// The exoscale*instance*pool (ID) to forward traffic to.
	InstancePoolId pulumi.StringInput `pulumi:"instancePoolId"`
	// NLB Service name.
	Name pulumi.StringInput `pulumi:"name"`
	// Port exposed on the NLB's public IP.
	Port pulumi.IntInput `pulumi:"port"`
	// Network traffic protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// NLB Service State.
	State pulumi.StringInput `pulumi:"state"`
	// The strategy (`round-robin`|`source-hash`).
	Strategy pulumi.StringInput `pulumi:"strategy"`
	// Port on which the network traffic will be forwarded to on the receiving instance.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
}

func (GetNLBServiceListServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListService)(nil)).Elem()
}

func (i GetNLBServiceListServiceArgs) ToGetNLBServiceListServiceOutput() GetNLBServiceListServiceOutput {
	return i.ToGetNLBServiceListServiceOutputWithContext(context.Background())
}

func (i GetNLBServiceListServiceArgs) ToGetNLBServiceListServiceOutputWithContext(ctx context.Context) GetNLBServiceListServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListServiceOutput)
}

func (i GetNLBServiceListServiceArgs) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListService] {
	return pulumix.Output[GetNLBServiceListService]{
		OutputState: i.ToGetNLBServiceListServiceOutputWithContext(ctx).OutputState,
	}
}

// GetNLBServiceListServiceArrayInput is an input type that accepts GetNLBServiceListServiceArray and GetNLBServiceListServiceArrayOutput values.
// You can construct a concrete instance of `GetNLBServiceListServiceArrayInput` via:
//
//	GetNLBServiceListServiceArray{ GetNLBServiceListServiceArgs{...} }
type GetNLBServiceListServiceArrayInput interface {
	pulumi.Input

	ToGetNLBServiceListServiceArrayOutput() GetNLBServiceListServiceArrayOutput
	ToGetNLBServiceListServiceArrayOutputWithContext(context.Context) GetNLBServiceListServiceArrayOutput
}

type GetNLBServiceListServiceArray []GetNLBServiceListServiceInput

func (GetNLBServiceListServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNLBServiceListService)(nil)).Elem()
}

func (i GetNLBServiceListServiceArray) ToGetNLBServiceListServiceArrayOutput() GetNLBServiceListServiceArrayOutput {
	return i.ToGetNLBServiceListServiceArrayOutputWithContext(context.Background())
}

func (i GetNLBServiceListServiceArray) ToGetNLBServiceListServiceArrayOutputWithContext(ctx context.Context) GetNLBServiceListServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListServiceArrayOutput)
}

func (i GetNLBServiceListServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNLBServiceListService] {
	return pulumix.Output[[]GetNLBServiceListService]{
		OutputState: i.ToGetNLBServiceListServiceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNLBServiceListServiceOutput struct{ *pulumi.OutputState }

func (GetNLBServiceListServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListService)(nil)).Elem()
}

func (o GetNLBServiceListServiceOutput) ToGetNLBServiceListServiceOutput() GetNLBServiceListServiceOutput {
	return o
}

func (o GetNLBServiceListServiceOutput) ToGetNLBServiceListServiceOutputWithContext(ctx context.Context) GetNLBServiceListServiceOutput {
	return o
}

func (o GetNLBServiceListServiceOutput) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListService] {
	return pulumix.Output[GetNLBServiceListService]{
		OutputState: o.OutputState,
	}
}

// NLB service description.
func (o GetNLBServiceListServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetNLBServiceListServiceOutput) Healthcheck() GetNLBServiceListServiceHealthcheckOutput {
	return o.ApplyT(func(v GetNLBServiceListService) GetNLBServiceListServiceHealthcheck { return v.Healthcheck }).(GetNLBServiceListServiceHealthcheckOutput)
}

// NLB service ID.
func (o GetNLBServiceListServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.Id }).(pulumi.StringOutput)
}

// The exoscale*instance*pool (ID) to forward traffic to.
func (o GetNLBServiceListServiceOutput) InstancePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.InstancePoolId }).(pulumi.StringOutput)
}

// NLB Service name.
func (o GetNLBServiceListServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.Name }).(pulumi.StringOutput)
}

// Port exposed on the NLB's public IP.
func (o GetNLBServiceListServiceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListService) int { return v.Port }).(pulumi.IntOutput)
}

// Network traffic protocol.
func (o GetNLBServiceListServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.Protocol }).(pulumi.StringOutput)
}

// NLB Service State.
func (o GetNLBServiceListServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.State }).(pulumi.StringOutput)
}

// The strategy (`round-robin`|`source-hash`).
func (o GetNLBServiceListServiceOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListService) string { return v.Strategy }).(pulumi.StringOutput)
}

// Port on which the network traffic will be forwarded to on the receiving instance.
func (o GetNLBServiceListServiceOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListService) int { return v.TargetPort }).(pulumi.IntOutput)
}

type GetNLBServiceListServiceArrayOutput struct{ *pulumi.OutputState }

func (GetNLBServiceListServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNLBServiceListService)(nil)).Elem()
}

func (o GetNLBServiceListServiceArrayOutput) ToGetNLBServiceListServiceArrayOutput() GetNLBServiceListServiceArrayOutput {
	return o
}

func (o GetNLBServiceListServiceArrayOutput) ToGetNLBServiceListServiceArrayOutputWithContext(ctx context.Context) GetNLBServiceListServiceArrayOutput {
	return o
}

func (o GetNLBServiceListServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNLBServiceListService] {
	return pulumix.Output[[]GetNLBServiceListService]{
		OutputState: o.OutputState,
	}
}

func (o GetNLBServiceListServiceArrayOutput) Index(i pulumi.IntInput) GetNLBServiceListServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNLBServiceListService {
		return vs[0].([]GetNLBServiceListService)[vs[1].(int)]
	}).(GetNLBServiceListServiceOutput)
}

type GetNLBServiceListServiceHealthcheck struct {
	Interval int    `pulumi:"interval"`
	Mode     string `pulumi:"mode"`
	Port     int    `pulumi:"port"`
	Retries  int    `pulumi:"retries"`
	Timeout  int    `pulumi:"timeout"`
	TlsSni   string `pulumi:"tlsSni"`
	Uri      string `pulumi:"uri"`
}

// GetNLBServiceListServiceHealthcheckInput is an input type that accepts GetNLBServiceListServiceHealthcheckArgs and GetNLBServiceListServiceHealthcheckOutput values.
// You can construct a concrete instance of `GetNLBServiceListServiceHealthcheckInput` via:
//
//	GetNLBServiceListServiceHealthcheckArgs{...}
type GetNLBServiceListServiceHealthcheckInput interface {
	pulumi.Input

	ToGetNLBServiceListServiceHealthcheckOutput() GetNLBServiceListServiceHealthcheckOutput
	ToGetNLBServiceListServiceHealthcheckOutputWithContext(context.Context) GetNLBServiceListServiceHealthcheckOutput
}

type GetNLBServiceListServiceHealthcheckArgs struct {
	Interval pulumi.IntInput    `pulumi:"interval"`
	Mode     pulumi.StringInput `pulumi:"mode"`
	Port     pulumi.IntInput    `pulumi:"port"`
	Retries  pulumi.IntInput    `pulumi:"retries"`
	Timeout  pulumi.IntInput    `pulumi:"timeout"`
	TlsSni   pulumi.StringInput `pulumi:"tlsSni"`
	Uri      pulumi.StringInput `pulumi:"uri"`
}

func (GetNLBServiceListServiceHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListServiceHealthcheck)(nil)).Elem()
}

func (i GetNLBServiceListServiceHealthcheckArgs) ToGetNLBServiceListServiceHealthcheckOutput() GetNLBServiceListServiceHealthcheckOutput {
	return i.ToGetNLBServiceListServiceHealthcheckOutputWithContext(context.Background())
}

func (i GetNLBServiceListServiceHealthcheckArgs) ToGetNLBServiceListServiceHealthcheckOutputWithContext(ctx context.Context) GetNLBServiceListServiceHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListServiceHealthcheckOutput)
}

func (i GetNLBServiceListServiceHealthcheckArgs) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListServiceHealthcheck] {
	return pulumix.Output[GetNLBServiceListServiceHealthcheck]{
		OutputState: i.ToGetNLBServiceListServiceHealthcheckOutputWithContext(ctx).OutputState,
	}
}

type GetNLBServiceListServiceHealthcheckOutput struct{ *pulumi.OutputState }

func (GetNLBServiceListServiceHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListServiceHealthcheck)(nil)).Elem()
}

func (o GetNLBServiceListServiceHealthcheckOutput) ToGetNLBServiceListServiceHealthcheckOutput() GetNLBServiceListServiceHealthcheckOutput {
	return o
}

func (o GetNLBServiceListServiceHealthcheckOutput) ToGetNLBServiceListServiceHealthcheckOutputWithContext(ctx context.Context) GetNLBServiceListServiceHealthcheckOutput {
	return o
}

func (o GetNLBServiceListServiceHealthcheckOutput) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListServiceHealthcheck] {
	return pulumix.Output[GetNLBServiceListServiceHealthcheck]{
		OutputState: o.OutputState,
	}
}

func (o GetNLBServiceListServiceHealthcheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) int { return v.Interval }).(pulumi.IntOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) int { return v.Retries }).(pulumi.IntOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) int { return v.Timeout }).(pulumi.IntOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) TlsSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) string { return v.TlsSni }).(pulumi.StringOutput)
}

func (o GetNLBServiceListServiceHealthcheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetNLBServiceListServiceHealthcheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetNLBServiceListTimeouts struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read *string `pulumi:"read"`
}

// GetNLBServiceListTimeoutsInput is an input type that accepts GetNLBServiceListTimeoutsArgs and GetNLBServiceListTimeoutsOutput values.
// You can construct a concrete instance of `GetNLBServiceListTimeoutsInput` via:
//
//	GetNLBServiceListTimeoutsArgs{...}
type GetNLBServiceListTimeoutsInput interface {
	pulumi.Input

	ToGetNLBServiceListTimeoutsOutput() GetNLBServiceListTimeoutsOutput
	ToGetNLBServiceListTimeoutsOutputWithContext(context.Context) GetNLBServiceListTimeoutsOutput
}

type GetNLBServiceListTimeoutsArgs struct {
	// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
	Read pulumi.StringPtrInput `pulumi:"read"`
}

func (GetNLBServiceListTimeoutsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListTimeouts)(nil)).Elem()
}

func (i GetNLBServiceListTimeoutsArgs) ToGetNLBServiceListTimeoutsOutput() GetNLBServiceListTimeoutsOutput {
	return i.ToGetNLBServiceListTimeoutsOutputWithContext(context.Background())
}

func (i GetNLBServiceListTimeoutsArgs) ToGetNLBServiceListTimeoutsOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListTimeoutsOutput)
}

func (i GetNLBServiceListTimeoutsArgs) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListTimeouts] {
	return pulumix.Output[GetNLBServiceListTimeouts]{
		OutputState: i.ToGetNLBServiceListTimeoutsOutputWithContext(ctx).OutputState,
	}
}

func (i GetNLBServiceListTimeoutsArgs) ToGetNLBServiceListTimeoutsPtrOutput() GetNLBServiceListTimeoutsPtrOutput {
	return i.ToGetNLBServiceListTimeoutsPtrOutputWithContext(context.Background())
}

func (i GetNLBServiceListTimeoutsArgs) ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListTimeoutsOutput).ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx)
}

// GetNLBServiceListTimeoutsPtrInput is an input type that accepts GetNLBServiceListTimeoutsArgs, GetNLBServiceListTimeoutsPtr and GetNLBServiceListTimeoutsPtrOutput values.
// You can construct a concrete instance of `GetNLBServiceListTimeoutsPtrInput` via:
//
//	        GetNLBServiceListTimeoutsArgs{...}
//
//	or:
//
//	        nil
type GetNLBServiceListTimeoutsPtrInput interface {
	pulumi.Input

	ToGetNLBServiceListTimeoutsPtrOutput() GetNLBServiceListTimeoutsPtrOutput
	ToGetNLBServiceListTimeoutsPtrOutputWithContext(context.Context) GetNLBServiceListTimeoutsPtrOutput
}

type getNLBServiceListTimeoutsPtrType GetNLBServiceListTimeoutsArgs

func GetNLBServiceListTimeoutsPtr(v *GetNLBServiceListTimeoutsArgs) GetNLBServiceListTimeoutsPtrInput {
	return (*getNLBServiceListTimeoutsPtrType)(v)
}

func (*getNLBServiceListTimeoutsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNLBServiceListTimeouts)(nil)).Elem()
}

func (i *getNLBServiceListTimeoutsPtrType) ToGetNLBServiceListTimeoutsPtrOutput() GetNLBServiceListTimeoutsPtrOutput {
	return i.ToGetNLBServiceListTimeoutsPtrOutputWithContext(context.Background())
}

func (i *getNLBServiceListTimeoutsPtrType) ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNLBServiceListTimeoutsPtrOutput)
}

func (i *getNLBServiceListTimeoutsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetNLBServiceListTimeouts] {
	return pulumix.Output[*GetNLBServiceListTimeouts]{
		OutputState: i.ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx).OutputState,
	}
}

type GetNLBServiceListTimeoutsOutput struct{ *pulumi.OutputState }

func (GetNLBServiceListTimeoutsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNLBServiceListTimeouts)(nil)).Elem()
}

func (o GetNLBServiceListTimeoutsOutput) ToGetNLBServiceListTimeoutsOutput() GetNLBServiceListTimeoutsOutput {
	return o
}

func (o GetNLBServiceListTimeoutsOutput) ToGetNLBServiceListTimeoutsOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsOutput {
	return o
}

func (o GetNLBServiceListTimeoutsOutput) ToGetNLBServiceListTimeoutsPtrOutput() GetNLBServiceListTimeoutsPtrOutput {
	return o.ToGetNLBServiceListTimeoutsPtrOutputWithContext(context.Background())
}

func (o GetNLBServiceListTimeoutsOutput) ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetNLBServiceListTimeouts) *GetNLBServiceListTimeouts {
		return &v
	}).(GetNLBServiceListTimeoutsPtrOutput)
}

func (o GetNLBServiceListTimeoutsOutput) ToOutput(ctx context.Context) pulumix.Output[GetNLBServiceListTimeouts] {
	return pulumix.Output[GetNLBServiceListTimeouts]{
		OutputState: o.OutputState,
	}
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetNLBServiceListTimeoutsOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNLBServiceListTimeouts) *string { return v.Read }).(pulumi.StringPtrOutput)
}

type GetNLBServiceListTimeoutsPtrOutput struct{ *pulumi.OutputState }

func (GetNLBServiceListTimeoutsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNLBServiceListTimeouts)(nil)).Elem()
}

func (o GetNLBServiceListTimeoutsPtrOutput) ToGetNLBServiceListTimeoutsPtrOutput() GetNLBServiceListTimeoutsPtrOutput {
	return o
}

func (o GetNLBServiceListTimeoutsPtrOutput) ToGetNLBServiceListTimeoutsPtrOutputWithContext(ctx context.Context) GetNLBServiceListTimeoutsPtrOutput {
	return o
}

func (o GetNLBServiceListTimeoutsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetNLBServiceListTimeouts] {
	return pulumix.Output[*GetNLBServiceListTimeouts]{
		OutputState: o.OutputState,
	}
}

func (o GetNLBServiceListTimeoutsPtrOutput) Elem() GetNLBServiceListTimeoutsOutput {
	return o.ApplyT(func(v *GetNLBServiceListTimeouts) GetNLBServiceListTimeouts {
		if v != nil {
			return *v
		}
		var ret GetNLBServiceListTimeouts
		return ret
	}).(GetNLBServiceListTimeoutsOutput)
}

// A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
func (o GetNLBServiceListTimeoutsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetNLBServiceListTimeouts) *string {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseGrafanaInput)(nil)).Elem(), DatabaseGrafanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseGrafanaPtrInput)(nil)).Elem(), DatabaseGrafanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseKafkaPtrInput)(nil)).Elem(), DatabaseKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlPtrInput)(nil)).Elem(), DatabaseMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchInput)(nil)).Elem(), DatabaseOpensearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchPtrInput)(nil)).Elem(), DatabaseOpensearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchDashboardsInput)(nil)).Elem(), DatabaseOpensearchDashboardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchDashboardsPtrInput)(nil)).Elem(), DatabaseOpensearchDashboardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexPatternInput)(nil)).Elem(), DatabaseOpensearchIndexPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexPatternArrayInput)(nil)).Elem(), DatabaseOpensearchIndexPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexTemplateInput)(nil)).Elem(), DatabaseOpensearchIndexTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOpensearchIndexTemplatePtrInput)(nil)).Elem(), DatabaseOpensearchIndexTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePgPtrInput)(nil)).Elem(), DatabasePgArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRedisPtrInput)(nil)).Elem(), DatabaseRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTimeoutsInput)(nil)).Elem(), DatabaseTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTimeoutsPtrInput)(nil)).Elem(), DatabaseTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseURITimeoutsInput)(nil)).Elem(), GetDatabaseURITimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseURITimeoutsPtrInput)(nil)).Elem(), GetDatabaseURITimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNLBServiceListServiceInput)(nil)).Elem(), GetNLBServiceListServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNLBServiceListServiceArrayInput)(nil)).Elem(), GetNLBServiceListServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNLBServiceListServiceHealthcheckInput)(nil)).Elem(), GetNLBServiceListServiceHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNLBServiceListTimeoutsInput)(nil)).Elem(), GetNLBServiceListTimeoutsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNLBServiceListTimeoutsPtrInput)(nil)).Elem(), GetNLBServiceListTimeoutsArgs{})
	pulumi.RegisterOutputType(DatabaseGrafanaOutput{})
	pulumi.RegisterOutputType(DatabaseGrafanaPtrOutput{})
	pulumi.RegisterOutputType(DatabaseKafkaOutput{})
	pulumi.RegisterOutputType(DatabaseKafkaPtrOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchDashboardsOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchDashboardsPtrOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexPatternOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexPatternArrayOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexTemplateOutput{})
	pulumi.RegisterOutputType(DatabaseOpensearchIndexTemplatePtrOutput{})
	pulumi.RegisterOutputType(DatabasePgOutput{})
	pulumi.RegisterOutputType(DatabasePgPtrOutput{})
	pulumi.RegisterOutputType(DatabaseRedisOutput{})
	pulumi.RegisterOutputType(DatabaseRedisPtrOutput{})
	pulumi.RegisterOutputType(DatabaseTimeoutsOutput{})
	pulumi.RegisterOutputType(DatabaseTimeoutsPtrOutput{})
	pulumi.RegisterOutputType(GetDatabaseURITimeoutsOutput{})
	pulumi.RegisterOutputType(GetDatabaseURITimeoutsPtrOutput{})
	pulumi.RegisterOutputType(GetNLBServiceListServiceOutput{})
	pulumi.RegisterOutputType(GetNLBServiceListServiceArrayOutput{})
	pulumi.RegisterOutputType(GetNLBServiceListServiceHealthcheckOutput{})
	pulumi.RegisterOutputType(GetNLBServiceListTimeoutsOutput{})
	pulumi.RegisterOutputType(GetNLBServiceListTimeoutsPtrOutput{})
}
