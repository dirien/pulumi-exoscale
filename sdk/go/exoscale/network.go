// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// !> **WARNING:** This resource is **DEPRECATED** and will be removed in the next major version. Please use PrivateNetwork instead.
type Network struct {
	pulumi.CustomResourceState

	// A free-form text describing the network.
	DisplayText pulumi.StringOutput `pulumi:"displayText"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	EndIp pulumi.StringPtrOutput `pulumi:"endIp"`
	// The private network name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
	Netmask pulumi.StringPtrOutput `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrOutput `pulumi:"networkOffering"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	StartIp pulumi.StringPtrOutput `pulumi:"startIp"`
	// Map of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// ❗ The Exoscale Zone name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("exoscale:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("exoscale:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// A free-form text describing the network.
	DisplayText *string `pulumi:"displayText"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	EndIp *string `pulumi:"endIp"`
	// The private network name.
	Name *string `pulumi:"name"`
	// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
	Netmask *string `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering *string `pulumi:"networkOffering"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	StartIp *string `pulumi:"startIp"`
	// Map of tags (key/value). To remove all tags, set `tags = {}`.
	Tags map[string]string `pulumi:"tags"`
	// ❗ The Exoscale Zone name.
	Zone *string `pulumi:"zone"`
}

type NetworkState struct {
	// A free-form text describing the network.
	DisplayText pulumi.StringPtrInput
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	EndIp pulumi.StringPtrInput
	// The private network name.
	Name pulumi.StringPtrInput
	// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
	Netmask pulumi.StringPtrInput
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrInput
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	StartIp pulumi.StringPtrInput
	// Map of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapInput
	// ❗ The Exoscale Zone name.
	Zone pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// A free-form text describing the network.
	DisplayText *string `pulumi:"displayText"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	EndIp *string `pulumi:"endIp"`
	// The private network name.
	Name *string `pulumi:"name"`
	// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
	Netmask *string `pulumi:"netmask"`
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering *string `pulumi:"networkOffering"`
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	StartIp *string `pulumi:"startIp"`
	// Map of tags (key/value). To remove all tags, set `tags = {}`.
	Tags map[string]string `pulumi:"tags"`
	// ❗ The Exoscale Zone name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// A free-form text describing the network.
	DisplayText pulumi.StringPtrInput
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	EndIp pulumi.StringPtrInput
	// The private network name.
	Name pulumi.StringPtrInput
	// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
	Netmask pulumi.StringPtrInput
	// Deprecated: This attribute is deprecated, please remove it from your configuration.
	NetworkOffering pulumi.StringPtrInput
	// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
	StartIp pulumi.StringPtrInput
	// Map of tags (key/value). To remove all tags, set `tags = {}`.
	Tags pulumi.StringMapInput
	// ❗ The Exoscale Zone name.
	Zone pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

func (i *Network) ToOutput(ctx context.Context) pulumix.Output[*Network] {
	return pulumix.Output[*Network]{
		OutputState: i.ToNetworkOutputWithContext(ctx).OutputState,
	}
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

func (i NetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]*Network] {
	return pulumix.Output[[]*Network]{
		OutputState: i.ToNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

func (i NetworkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Network] {
	return pulumix.Output[map[string]*Network]{
		OutputState: i.ToNetworkMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) ToOutput(ctx context.Context) pulumix.Output[*Network] {
	return pulumix.Output[*Network]{
		OutputState: o.OutputState,
	}
}

// A free-form text describing the network.
func (o NetworkOutput) DisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.DisplayText }).(pulumi.StringOutput)
}

// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
func (o NetworkOutput) EndIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.EndIp }).(pulumi.StringPtrOutput)
}

// The private network name.
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network mask defining the IP network allowed for static leases (see `NIC` resource). Required for *managed* private networks.
func (o NetworkOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Netmask }).(pulumi.StringPtrOutput)
}

// Deprecated: This attribute is deprecated, please remove it from your configuration.
func (o NetworkOutput) NetworkOffering() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.NetworkOffering }).(pulumi.StringPtrOutput)
}

// The first/last IP addresses used by the DHCP service for dynamic leases. Required for *managed* private networks.
func (o NetworkOutput) StartIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.StartIp }).(pulumi.StringPtrOutput)
}

// Map of tags (key/value). To remove all tags, set `tags = {}`.
func (o NetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// ❗ The Exoscale Zone name.
func (o NetworkOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Network] {
	return pulumix.Output[[]*Network]{
		OutputState: o.OutputState,
	}
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Network] {
	return pulumix.Output[map[string]*Network]{
		OutputState: o.OutputState,
	}
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
