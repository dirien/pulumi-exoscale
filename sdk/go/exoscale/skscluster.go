// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Import
//
// An existing SKS cluster may be imported by `<ID>@<zone>`
//
// ```sh
//
//	$ pulumi import exoscale:index/sKSCluster:SKSCluster \
//
// ```
//
//	exoscale_sks_cluster.my_sks_cluster \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6@ch-gva-2
type SKSCluster struct {
	pulumi.CustomResourceState

	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayOutput `pulumi:"addons"`
	// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
	AggregationCa pulumi.StringOutput `pulumi:"aggregationCa"`
	// Enable automatic upgrading of the control plane version.
	AutoUpgrade pulumi.BoolPtrOutput `pulumi:"autoUpgrade"`
	// The CNI plugin that is to be used. Defaults to "calico".
	Cni pulumi.StringPtrOutput `pulumi:"cni"`
	// The CA certificate (in PEM format) for TLS communications between control plane components.
	ControlPlaneCa pulumi.StringOutput `pulumi:"controlPlaneCa"`
	// The cluster creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A free-form text describing the cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The cluster API endpoint.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
	ExoscaleCcm pulumi.BoolPtrOutput `pulumi:"exoscaleCcm"`
	// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
	KubeletCa pulumi.StringOutput `pulumi:"kubeletCa"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
	MetricsServer pulumi.BoolPtrOutput `pulumi:"metricsServer"`
	// The SKS cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
	Nodepools pulumi.StringArrayOutput `pulumi:"nodepools"`
	// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
	Oidc SKSClusterOidcOutput `pulumi:"oidc"`
	// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
	ServiceLevel pulumi.StringPtrOutput `pulumi:"serviceLevel"`
	// The cluster state.
	State pulumi.StringOutput `pulumi:"state"`
	// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
	Version pulumi.StringOutput `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSKSCluster registers a new resource with the given unique name, arguments, and options.
func NewSKSCluster(ctx *pulumi.Context,
	name string, args *SKSClusterArgs, opts ...pulumi.ResourceOption) (*SKSCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SKSCluster
	err := ctx.RegisterResource("exoscale:index/sKSCluster:SKSCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSKSCluster gets an existing SKSCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSKSCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SKSClusterState, opts ...pulumi.ResourceOption) (*SKSCluster, error) {
	var resource SKSCluster
	err := ctx.ReadResource("exoscale:index/sKSCluster:SKSCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SKSCluster resources.
type sksclusterState struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons []string `pulumi:"addons"`
	// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
	AggregationCa *string `pulumi:"aggregationCa"`
	// Enable automatic upgrading of the control plane version.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The CNI plugin that is to be used. Defaults to "calico".
	Cni *string `pulumi:"cni"`
	// The CA certificate (in PEM format) for TLS communications between control plane components.
	ControlPlaneCa *string `pulumi:"controlPlaneCa"`
	// The cluster creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// A free-form text describing the cluster.
	Description *string `pulumi:"description"`
	// The cluster API endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
	ExoscaleCcm *bool `pulumi:"exoscaleCcm"`
	// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
	KubeletCa *string `pulumi:"kubeletCa"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
	MetricsServer *bool `pulumi:"metricsServer"`
	// The SKS cluster name.
	Name *string `pulumi:"name"`
	// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
	Nodepools []string `pulumi:"nodepools"`
	// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
	Oidc *SKSClusterOidc `pulumi:"oidc"`
	// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
	ServiceLevel *string `pulumi:"serviceLevel"`
	// The cluster state.
	State *string `pulumi:"state"`
	// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type SKSClusterState struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayInput
	// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
	AggregationCa pulumi.StringPtrInput
	// Enable automatic upgrading of the control plane version.
	AutoUpgrade pulumi.BoolPtrInput
	// The CNI plugin that is to be used. Defaults to "calico".
	Cni pulumi.StringPtrInput
	// The CA certificate (in PEM format) for TLS communications between control plane components.
	ControlPlaneCa pulumi.StringPtrInput
	// The cluster creation date.
	CreatedAt pulumi.StringPtrInput
	// A free-form text describing the cluster.
	Description pulumi.StringPtrInput
	// The cluster API endpoint.
	Endpoint pulumi.StringPtrInput
	// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
	ExoscaleCcm pulumi.BoolPtrInput
	// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
	KubeletCa pulumi.StringPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
	MetricsServer pulumi.BoolPtrInput
	// The SKS cluster name.
	Name pulumi.StringPtrInput
	// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
	Nodepools pulumi.StringArrayInput
	// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
	Oidc SKSClusterOidcPtrInput
	// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
	ServiceLevel pulumi.StringPtrInput
	// The cluster state.
	State pulumi.StringPtrInput
	// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (SKSClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sksclusterState)(nil)).Elem()
}

type sksclusterArgs struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons []string `pulumi:"addons"`
	// Enable automatic upgrading of the control plane version.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// The CNI plugin that is to be used. Defaults to "calico".
	Cni *string `pulumi:"cni"`
	// A free-form text describing the cluster.
	Description *string `pulumi:"description"`
	// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
	ExoscaleCcm *bool `pulumi:"exoscaleCcm"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
	MetricsServer *bool `pulumi:"metricsServer"`
	// The SKS cluster name.
	Name *string `pulumi:"name"`
	// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
	Oidc *SKSClusterOidc `pulumi:"oidc"`
	// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
	ServiceLevel *string `pulumi:"serviceLevel"`
	// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
	Version *string `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SKSCluster resource.
type SKSClusterArgs struct {
	// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
	Addons pulumi.StringArrayInput
	// Enable automatic upgrading of the control plane version.
	AutoUpgrade pulumi.BoolPtrInput
	// The CNI plugin that is to be used. Defaults to "calico".
	Cni pulumi.StringPtrInput
	// A free-form text describing the cluster.
	Description pulumi.StringPtrInput
	// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
	ExoscaleCcm pulumi.BoolPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
	MetricsServer pulumi.BoolPtrInput
	// The SKS cluster name.
	Name pulumi.StringPtrInput
	// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
	Oidc SKSClusterOidcPtrInput
	// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
	ServiceLevel pulumi.StringPtrInput
	// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
	Version pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (SKSClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sksclusterArgs)(nil)).Elem()
}

type SKSClusterInput interface {
	pulumi.Input

	ToSKSClusterOutput() SKSClusterOutput
	ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput
}

func (*SKSCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSCluster)(nil)).Elem()
}

func (i *SKSCluster) ToSKSClusterOutput() SKSClusterOutput {
	return i.ToSKSClusterOutputWithContext(context.Background())
}

func (i *SKSCluster) ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterOutput)
}

// SKSClusterArrayInput is an input type that accepts SKSClusterArray and SKSClusterArrayOutput values.
// You can construct a concrete instance of `SKSClusterArrayInput` via:
//
//	SKSClusterArray{ SKSClusterArgs{...} }
type SKSClusterArrayInput interface {
	pulumi.Input

	ToSKSClusterArrayOutput() SKSClusterArrayOutput
	ToSKSClusterArrayOutputWithContext(context.Context) SKSClusterArrayOutput
}

type SKSClusterArray []SKSClusterInput

func (SKSClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSCluster)(nil)).Elem()
}

func (i SKSClusterArray) ToSKSClusterArrayOutput() SKSClusterArrayOutput {
	return i.ToSKSClusterArrayOutputWithContext(context.Background())
}

func (i SKSClusterArray) ToSKSClusterArrayOutputWithContext(ctx context.Context) SKSClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterArrayOutput)
}

// SKSClusterMapInput is an input type that accepts SKSClusterMap and SKSClusterMapOutput values.
// You can construct a concrete instance of `SKSClusterMapInput` via:
//
//	SKSClusterMap{ "key": SKSClusterArgs{...} }
type SKSClusterMapInput interface {
	pulumi.Input

	ToSKSClusterMapOutput() SKSClusterMapOutput
	ToSKSClusterMapOutputWithContext(context.Context) SKSClusterMapOutput
}

type SKSClusterMap map[string]SKSClusterInput

func (SKSClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSCluster)(nil)).Elem()
}

func (i SKSClusterMap) ToSKSClusterMapOutput() SKSClusterMapOutput {
	return i.ToSKSClusterMapOutputWithContext(context.Background())
}

func (i SKSClusterMap) ToSKSClusterMapOutputWithContext(ctx context.Context) SKSClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSClusterMapOutput)
}

type SKSClusterOutput struct{ *pulumi.OutputState }

func (SKSClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSCluster)(nil)).Elem()
}

func (o SKSClusterOutput) ToSKSClusterOutput() SKSClusterOutput {
	return o
}

func (o SKSClusterOutput) ToSKSClusterOutputWithContext(ctx context.Context) SKSClusterOutput {
	return o
}

// Deprecated: This attribute has been replaced by `exoscale_ccm`/`metrics_server` attributes, it will be removed in a future release.
func (o SKSClusterOutput) Addons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringArrayOutput { return v.Addons }).(pulumi.StringArrayOutput)
}

// The CA certificate (in PEM format) for TLS communications between the control plane and the aggregation layer (e.g. `metrics-server`).
func (o SKSClusterOutput) AggregationCa() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.AggregationCa }).(pulumi.StringOutput)
}

// Enable automatic upgrading of the control plane version.
func (o SKSClusterOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.BoolPtrOutput { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// The CNI plugin that is to be used. Defaults to "calico".
func (o SKSClusterOutput) Cni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringPtrOutput { return v.Cni }).(pulumi.StringPtrOutput)
}

// The CA certificate (in PEM format) for TLS communications between control plane components.
func (o SKSClusterOutput) ControlPlaneCa() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.ControlPlaneCa }).(pulumi.StringOutput)
}

// The cluster creation date.
func (o SKSClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A free-form text describing the cluster.
func (o SKSClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The cluster API endpoint.
func (o SKSClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Deploy the Exoscale [Cloud Controller Manager](https://github.com/exoscale/exoscale-cloud-controller-manager/) in the control plane (boolean; default: `true`; may only be set at creation time).
func (o SKSClusterOutput) ExoscaleCcm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.BoolPtrOutput { return v.ExoscaleCcm }).(pulumi.BoolPtrOutput)
}

// The CA certificate (in PEM format) for TLS communications between kubelets and the control plane.
func (o SKSClusterOutput) KubeletCa() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.KubeletCa }).(pulumi.StringOutput)
}

// A map of key/value labels.
func (o SKSClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Deploy the [Kubernetes Metrics Server](https://github.com/kubernetes-sigs/metrics-server/) in the control plane (boolean; default: `true`; may only be set at creation time).
func (o SKSClusterOutput) MetricsServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.BoolPtrOutput { return v.MetricsServer }).(pulumi.BoolPtrOutput)
}

// The SKS cluster name.
func (o SKSClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of exoscale*sks*nodepool (IDs) attached to the cluster.
func (o SKSClusterOutput) Nodepools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringArrayOutput { return v.Nodepools }).(pulumi.StringArrayOutput)
}

// An OpenID Connect configuration to provide to the Kubernetes API server (may only be set at creation time). Structure is documented below.
func (o SKSClusterOutput) Oidc() SKSClusterOidcOutput {
	return o.ApplyT(func(v *SKSCluster) SKSClusterOidcOutput { return v.Oidc }).(SKSClusterOidcOutput)
}

// The service level of the control plane (`pro` or `starter`; default: `pro`; may only be set at creation time).
func (o SKSClusterOutput) ServiceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringPtrOutput { return v.ServiceLevel }).(pulumi.StringPtrOutput)
}

// The cluster state.
func (o SKSClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The version of the control plane (default: latest version available from the API; see `exo compute sks versions` for reference; may only be set at creation time).
func (o SKSClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o SKSClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSCluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SKSClusterArrayOutput struct{ *pulumi.OutputState }

func (SKSClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSCluster)(nil)).Elem()
}

func (o SKSClusterArrayOutput) ToSKSClusterArrayOutput() SKSClusterArrayOutput {
	return o
}

func (o SKSClusterArrayOutput) ToSKSClusterArrayOutputWithContext(ctx context.Context) SKSClusterArrayOutput {
	return o
}

func (o SKSClusterArrayOutput) Index(i pulumi.IntInput) SKSClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SKSCluster {
		return vs[0].([]*SKSCluster)[vs[1].(int)]
	}).(SKSClusterOutput)
}

type SKSClusterMapOutput struct{ *pulumi.OutputState }

func (SKSClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSCluster)(nil)).Elem()
}

func (o SKSClusterMapOutput) ToSKSClusterMapOutput() SKSClusterMapOutput {
	return o
}

func (o SKSClusterMapOutput) ToSKSClusterMapOutputWithContext(ctx context.Context) SKSClusterMapOutput {
	return o
}

func (o SKSClusterMapOutput) MapIndex(k pulumi.StringInput) SKSClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SKSCluster {
		return vs[0].(map[string]*SKSCluster)[vs[1].(string)]
	}).(SKSClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterInput)(nil)).Elem(), &SKSCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterArrayInput)(nil)).Elem(), SKSClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSClusterMapInput)(nil)).Elem(), SKSClusterMap{})
	pulumi.RegisterOutputType(SKSClusterOutput{})
	pulumi.RegisterOutputType(SKSClusterArrayOutput{})
	pulumi.RegisterOutputType(SKSClusterMapOutput{})
}
