// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// ## Import
//
// An existing SKS node pool may be imported by `<cluster-ID>/<nodepool-ID>@<zone>`
//
// ```sh
//
//	$ pulumi import exoscale:index/sKSNodepool:SKSNodepool \
//
// ```
//
//	exoscale_sks_nodepool.my_sks_nodepool \
//
//	f81d4fae-7dec-11d0-a765-00a0c91e6bf6/9ecc6b8b-73d4-4211-8ced-f7f29bb79524@ch-gva-2
type SKSNodepool struct {
	pulumi.CustomResourceState

	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayOutput `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The pool creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrOutput `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrOutput `pulumi:"diskSize"`
	// The underlying exoscale*instance*pool ID.
	InstancePoolId pulumi.StringOutput `pulumi:"instancePoolId"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrOutput `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The SKS node pool name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayOutput `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	Size             pulumi.IntOutput         `pulumi:"size"`
	// The current pool state.
	State pulumi.StringOutput `pulumi:"state"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrOutput `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
	Taints pulumi.StringMapOutput `pulumi:"taints"`
	// The managed instances template ID.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// The managed instances version.
	Version pulumi.StringOutput `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSKSNodepool registers a new resource with the given unique name, arguments, and options.
func NewSKSNodepool(ctx *pulumi.Context,
	name string, args *SKSNodepoolArgs, opts ...pulumi.ResourceOption) (*SKSNodepool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SKSNodepool
	err := ctx.RegisterResource("exoscale:index/sKSNodepool:SKSNodepool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSKSNodepool gets an existing SKSNodepool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSKSNodepool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SKSNodepoolState, opts ...pulumi.ResourceOption) (*SKSNodepool, error) {
	var resource SKSNodepool
	err := ctx.ReadResource("exoscale:index/sKSNodepool:SKSNodepool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SKSNodepool resources.
type sksnodepoolState struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The pool creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// A deploy target ID.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description *string `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The underlying exoscale*instance*pool ID.
	InstancePoolId *string `pulumi:"instancePoolId"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType *string `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The SKS node pool name.
	Name *string `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	Size             *int     `pulumi:"size"`
	// The current pool state.
	State *string `pulumi:"state"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm *bool `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
	Taints map[string]string `pulumi:"taints"`
	// The managed instances template ID.
	TemplateId *string `pulumi:"templateId"`
	// The managed instances version.
	Version *string `pulumi:"version"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type SKSNodepoolState struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringPtrInput
	// The pool creation date.
	CreatedAt pulumi.StringPtrInput
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrInput
	// A free-form text describing the pool.
	Description pulumi.StringPtrInput
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrInput
	// The underlying exoscale*instance*pool ID.
	InstancePoolId pulumi.StringPtrInput
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringPtrInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The SKS node pool name.
	Name pulumi.StringPtrInput
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayInput
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayInput
	Size             pulumi.IntPtrInput
	// The current pool state.
	State pulumi.StringPtrInput
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrInput
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
	Taints pulumi.StringMapInput
	// The managed instances template ID.
	TemplateId pulumi.StringPtrInput
	// The managed instances version.
	Version pulumi.StringPtrInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (SKSNodepoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*sksnodepoolState)(nil)).Elem()
}

type sksnodepoolArgs struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds []string `pulumi:"antiAffinityGroupIds"`
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// A deploy target ID.
	DeployTargetId *string `pulumi:"deployTargetId"`
	// A free-form text describing the pool.
	Description *string `pulumi:"description"`
	// The managed instances disk size (GiB; default: `50`).
	DiskSize *int `pulumi:"diskSize"`
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix *string `pulumi:"instancePrefix"`
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType string `pulumi:"instanceType"`
	// A map of key/value labels.
	Labels map[string]string `pulumi:"labels"`
	// The SKS node pool name.
	Name *string `pulumi:"name"`
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	Size             int      `pulumi:"size"`
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm *bool `pulumi:"storageLvm"`
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
	Taints map[string]string `pulumi:"taints"`
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SKSNodepool resource.
type SKSNodepoolArgs struct {
	// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
	AntiAffinityGroupIds pulumi.StringArrayInput
	// ❗ The parent exoscale*sks*cluster ID.
	ClusterId pulumi.StringInput
	// A deploy target ID.
	DeployTargetId pulumi.StringPtrInput
	// A free-form text describing the pool.
	Description pulumi.StringPtrInput
	// The managed instances disk size (GiB; default: `50`).
	DiskSize pulumi.IntPtrInput
	// The string used to prefix the managed instances name (default `pool`).
	InstancePrefix pulumi.StringPtrInput
	// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
	InstanceType pulumi.StringInput
	// A map of key/value labels.
	Labels pulumi.StringMapInput
	// The SKS node pool name.
	Name pulumi.StringPtrInput
	// A list of exoscale*private*network (IDs) to be attached to the managed instances.
	PrivateNetworkIds pulumi.StringArrayInput
	// A list of exoscale*security*group (IDs) to be attached to the managed instances.
	SecurityGroupIds pulumi.StringArrayInput
	Size             pulumi.IntInput
	// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
	StorageLvm pulumi.BoolPtrInput
	// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
	Taints pulumi.StringMapInput
	// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (SKSNodepoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sksnodepoolArgs)(nil)).Elem()
}

type SKSNodepoolInput interface {
	pulumi.Input

	ToSKSNodepoolOutput() SKSNodepoolOutput
	ToSKSNodepoolOutputWithContext(ctx context.Context) SKSNodepoolOutput
}

func (*SKSNodepool) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSNodepool)(nil)).Elem()
}

func (i *SKSNodepool) ToSKSNodepoolOutput() SKSNodepoolOutput {
	return i.ToSKSNodepoolOutputWithContext(context.Background())
}

func (i *SKSNodepool) ToSKSNodepoolOutputWithContext(ctx context.Context) SKSNodepoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodepoolOutput)
}

// SKSNodepoolArrayInput is an input type that accepts SKSNodepoolArray and SKSNodepoolArrayOutput values.
// You can construct a concrete instance of `SKSNodepoolArrayInput` via:
//
//	SKSNodepoolArray{ SKSNodepoolArgs{...} }
type SKSNodepoolArrayInput interface {
	pulumi.Input

	ToSKSNodepoolArrayOutput() SKSNodepoolArrayOutput
	ToSKSNodepoolArrayOutputWithContext(context.Context) SKSNodepoolArrayOutput
}

type SKSNodepoolArray []SKSNodepoolInput

func (SKSNodepoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSNodepool)(nil)).Elem()
}

func (i SKSNodepoolArray) ToSKSNodepoolArrayOutput() SKSNodepoolArrayOutput {
	return i.ToSKSNodepoolArrayOutputWithContext(context.Background())
}

func (i SKSNodepoolArray) ToSKSNodepoolArrayOutputWithContext(ctx context.Context) SKSNodepoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodepoolArrayOutput)
}

// SKSNodepoolMapInput is an input type that accepts SKSNodepoolMap and SKSNodepoolMapOutput values.
// You can construct a concrete instance of `SKSNodepoolMapInput` via:
//
//	SKSNodepoolMap{ "key": SKSNodepoolArgs{...} }
type SKSNodepoolMapInput interface {
	pulumi.Input

	ToSKSNodepoolMapOutput() SKSNodepoolMapOutput
	ToSKSNodepoolMapOutputWithContext(context.Context) SKSNodepoolMapOutput
}

type SKSNodepoolMap map[string]SKSNodepoolInput

func (SKSNodepoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSNodepool)(nil)).Elem()
}

func (i SKSNodepoolMap) ToSKSNodepoolMapOutput() SKSNodepoolMapOutput {
	return i.ToSKSNodepoolMapOutputWithContext(context.Background())
}

func (i SKSNodepoolMap) ToSKSNodepoolMapOutputWithContext(ctx context.Context) SKSNodepoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSNodepoolMapOutput)
}

type SKSNodepoolOutput struct{ *pulumi.OutputState }

func (SKSNodepoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSNodepool)(nil)).Elem()
}

func (o SKSNodepoolOutput) ToSKSNodepoolOutput() SKSNodepoolOutput {
	return o
}

func (o SKSNodepoolOutput) ToSKSNodepoolOutputWithContext(ctx context.Context) SKSNodepoolOutput {
	return o
}

// A list of exoscale*anti*affinity_group (IDs) to be attached to the managed instances.
func (o SKSNodepoolOutput) AntiAffinityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringArrayOutput { return v.AntiAffinityGroupIds }).(pulumi.StringArrayOutput)
}

// ❗ The parent exoscale*sks*cluster ID.
func (o SKSNodepoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The pool creation date.
func (o SKSNodepoolOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A deploy target ID.
func (o SKSNodepoolOutput) DeployTargetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringPtrOutput { return v.DeployTargetId }).(pulumi.StringPtrOutput)
}

// A free-form text describing the pool.
func (o SKSNodepoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The managed instances disk size (GiB; default: `50`).
func (o SKSNodepoolOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.IntPtrOutput { return v.DiskSize }).(pulumi.IntPtrOutput)
}

// The underlying exoscale*instance*pool ID.
func (o SKSNodepoolOutput) InstancePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.InstancePoolId }).(pulumi.StringOutput)
}

// The string used to prefix the managed instances name (default `pool`).
func (o SKSNodepoolOutput) InstancePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringPtrOutput { return v.InstancePrefix }).(pulumi.StringPtrOutput)
}

// The managed compute instances type (`<family>.<size>`, e.g. `standard.medium`; use the [Exoscale CLI](https://github.com/exoscale/cli/) - `exo compute instance-type list` - for the list of available types).
func (o SKSNodepoolOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// A map of key/value labels.
func (o SKSNodepoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The SKS node pool name.
func (o SKSNodepoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of exoscale*private*network (IDs) to be attached to the managed instances.
func (o SKSNodepoolOutput) PrivateNetworkIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringArrayOutput { return v.PrivateNetworkIds }).(pulumi.StringArrayOutput)
}

// A list of exoscale*security*group (IDs) to be attached to the managed instances.
func (o SKSNodepoolOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o SKSNodepoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The current pool state.
func (o SKSNodepoolOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Create nodes with non-standard partitioning for persistent storage (requires min 100G of disk space) (may only be set at creation time).
func (o SKSNodepoolOutput) StorageLvm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.BoolPtrOutput { return v.StorageLvm }).(pulumi.BoolPtrOutput)
}

// A map of key/value Kubernetes [taints](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) (`<value>:<effect>`).
func (o SKSNodepoolOutput) Taints() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringMapOutput { return v.Taints }).(pulumi.StringMapOutput)
}

// The managed instances template ID.
func (o SKSNodepoolOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// The managed instances version.
func (o SKSNodepoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// ❗ The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o SKSNodepoolOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSNodepool) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SKSNodepoolArrayOutput struct{ *pulumi.OutputState }

func (SKSNodepoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSNodepool)(nil)).Elem()
}

func (o SKSNodepoolArrayOutput) ToSKSNodepoolArrayOutput() SKSNodepoolArrayOutput {
	return o
}

func (o SKSNodepoolArrayOutput) ToSKSNodepoolArrayOutputWithContext(ctx context.Context) SKSNodepoolArrayOutput {
	return o
}

func (o SKSNodepoolArrayOutput) Index(i pulumi.IntInput) SKSNodepoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SKSNodepool {
		return vs[0].([]*SKSNodepool)[vs[1].(int)]
	}).(SKSNodepoolOutput)
}

type SKSNodepoolMapOutput struct{ *pulumi.OutputState }

func (SKSNodepoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSNodepool)(nil)).Elem()
}

func (o SKSNodepoolMapOutput) ToSKSNodepoolMapOutput() SKSNodepoolMapOutput {
	return o
}

func (o SKSNodepoolMapOutput) ToSKSNodepoolMapOutputWithContext(ctx context.Context) SKSNodepoolMapOutput {
	return o
}

func (o SKSNodepoolMapOutput) MapIndex(k pulumi.StringInput) SKSNodepoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SKSNodepool {
		return vs[0].(map[string]*SKSNodepool)[vs[1].(string)]
	}).(SKSNodepoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodepoolInput)(nil)).Elem(), &SKSNodepool{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodepoolArrayInput)(nil)).Elem(), SKSNodepoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSNodepoolMapInput)(nil)).Elem(), SKSNodepoolMap{})
	pulumi.RegisterOutputType(SKSNodepoolOutput{})
	pulumi.RegisterOutputType(SKSNodepoolArrayOutput{})
	pulumi.RegisterOutputType(SKSNodepoolMapOutput{})
}
