// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-exoscale/sdk/go/exoscale/internal"
)

// Manage Exoscale [IAM](https://community.exoscale.com/documentation/iam/) Role.
type IAMRole struct {
	pulumi.CustomResourceState

	// A free-form text describing the IAM Role
	Description pulumi.StringOutput `pulumi:"description"`
	// Defines if IAM Role Policy is editable or not.
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// IAM Role labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of IAM Role.
	Name pulumi.StringOutput `pulumi:"name"`
	// IAM Role permissions.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// IAM Policy.
	Policy   IAMRolePolicyOutput      `pulumi:"policy"`
	Timeouts IAMRoleTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewIAMRole registers a new resource with the given unique name, arguments, and options.
func NewIAMRole(ctx *pulumi.Context,
	name string, args *IAMRoleArgs, opts ...pulumi.ResourceOption) (*IAMRole, error) {
	if args == nil {
		args = &IAMRoleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IAMRole
	err := ctx.RegisterResource("exoscale:index/iAMRole:IAMRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIAMRole gets an existing IAMRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIAMRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IAMRoleState, opts ...pulumi.ResourceOption) (*IAMRole, error) {
	var resource IAMRole
	err := ctx.ReadResource("exoscale:index/iAMRole:IAMRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IAMRole resources.
type iamroleState struct {
	// A free-form text describing the IAM Role
	Description *string `pulumi:"description"`
	// Defines if IAM Role Policy is editable or not.
	Editable *bool `pulumi:"editable"`
	// IAM Role labels.
	Labels map[string]string `pulumi:"labels"`
	// Name of IAM Role.
	Name *string `pulumi:"name"`
	// IAM Role permissions.
	Permissions []string `pulumi:"permissions"`
	// IAM Policy.
	Policy   *IAMRolePolicy   `pulumi:"policy"`
	Timeouts *IAMRoleTimeouts `pulumi:"timeouts"`
}

type IAMRoleState struct {
	// A free-form text describing the IAM Role
	Description pulumi.StringPtrInput
	// Defines if IAM Role Policy is editable or not.
	Editable pulumi.BoolPtrInput
	// IAM Role labels.
	Labels pulumi.StringMapInput
	// Name of IAM Role.
	Name pulumi.StringPtrInput
	// IAM Role permissions.
	Permissions pulumi.StringArrayInput
	// IAM Policy.
	Policy   IAMRolePolicyPtrInput
	Timeouts IAMRoleTimeoutsPtrInput
}

func (IAMRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamroleState)(nil)).Elem()
}

type iamroleArgs struct {
	// A free-form text describing the IAM Role
	Description *string `pulumi:"description"`
	// Defines if IAM Role Policy is editable or not.
	Editable *bool `pulumi:"editable"`
	// IAM Role labels.
	Labels map[string]string `pulumi:"labels"`
	// Name of IAM Role.
	Name *string `pulumi:"name"`
	// IAM Role permissions.
	Permissions []string `pulumi:"permissions"`
	// IAM Policy.
	Policy   *IAMRolePolicy   `pulumi:"policy"`
	Timeouts *IAMRoleTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a IAMRole resource.
type IAMRoleArgs struct {
	// A free-form text describing the IAM Role
	Description pulumi.StringPtrInput
	// Defines if IAM Role Policy is editable or not.
	Editable pulumi.BoolPtrInput
	// IAM Role labels.
	Labels pulumi.StringMapInput
	// Name of IAM Role.
	Name pulumi.StringPtrInput
	// IAM Role permissions.
	Permissions pulumi.StringArrayInput
	// IAM Policy.
	Policy   IAMRolePolicyPtrInput
	Timeouts IAMRoleTimeoutsPtrInput
}

func (IAMRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamroleArgs)(nil)).Elem()
}

type IAMRoleInput interface {
	pulumi.Input

	ToIAMRoleOutput() IAMRoleOutput
	ToIAMRoleOutputWithContext(ctx context.Context) IAMRoleOutput
}

func (*IAMRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMRole)(nil)).Elem()
}

func (i *IAMRole) ToIAMRoleOutput() IAMRoleOutput {
	return i.ToIAMRoleOutputWithContext(context.Background())
}

func (i *IAMRole) ToIAMRoleOutputWithContext(ctx context.Context) IAMRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMRoleOutput)
}

func (i *IAMRole) ToOutput(ctx context.Context) pulumix.Output[*IAMRole] {
	return pulumix.Output[*IAMRole]{
		OutputState: i.ToIAMRoleOutputWithContext(ctx).OutputState,
	}
}

// IAMRoleArrayInput is an input type that accepts IAMRoleArray and IAMRoleArrayOutput values.
// You can construct a concrete instance of `IAMRoleArrayInput` via:
//
//	IAMRoleArray{ IAMRoleArgs{...} }
type IAMRoleArrayInput interface {
	pulumi.Input

	ToIAMRoleArrayOutput() IAMRoleArrayOutput
	ToIAMRoleArrayOutputWithContext(context.Context) IAMRoleArrayOutput
}

type IAMRoleArray []IAMRoleInput

func (IAMRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IAMRole)(nil)).Elem()
}

func (i IAMRoleArray) ToIAMRoleArrayOutput() IAMRoleArrayOutput {
	return i.ToIAMRoleArrayOutputWithContext(context.Background())
}

func (i IAMRoleArray) ToIAMRoleArrayOutputWithContext(ctx context.Context) IAMRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMRoleArrayOutput)
}

func (i IAMRoleArray) ToOutput(ctx context.Context) pulumix.Output[[]*IAMRole] {
	return pulumix.Output[[]*IAMRole]{
		OutputState: i.ToIAMRoleArrayOutputWithContext(ctx).OutputState,
	}
}

// IAMRoleMapInput is an input type that accepts IAMRoleMap and IAMRoleMapOutput values.
// You can construct a concrete instance of `IAMRoleMapInput` via:
//
//	IAMRoleMap{ "key": IAMRoleArgs{...} }
type IAMRoleMapInput interface {
	pulumi.Input

	ToIAMRoleMapOutput() IAMRoleMapOutput
	ToIAMRoleMapOutputWithContext(context.Context) IAMRoleMapOutput
}

type IAMRoleMap map[string]IAMRoleInput

func (IAMRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IAMRole)(nil)).Elem()
}

func (i IAMRoleMap) ToIAMRoleMapOutput() IAMRoleMapOutput {
	return i.ToIAMRoleMapOutputWithContext(context.Background())
}

func (i IAMRoleMap) ToIAMRoleMapOutputWithContext(ctx context.Context) IAMRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAMRoleMapOutput)
}

func (i IAMRoleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IAMRole] {
	return pulumix.Output[map[string]*IAMRole]{
		OutputState: i.ToIAMRoleMapOutputWithContext(ctx).OutputState,
	}
}

type IAMRoleOutput struct{ *pulumi.OutputState }

func (IAMRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAMRole)(nil)).Elem()
}

func (o IAMRoleOutput) ToIAMRoleOutput() IAMRoleOutput {
	return o
}

func (o IAMRoleOutput) ToIAMRoleOutputWithContext(ctx context.Context) IAMRoleOutput {
	return o
}

func (o IAMRoleOutput) ToOutput(ctx context.Context) pulumix.Output[*IAMRole] {
	return pulumix.Output[*IAMRole]{
		OutputState: o.OutputState,
	}
}

// A free-form text describing the IAM Role
func (o IAMRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IAMRole) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Defines if IAM Role Policy is editable or not.
func (o IAMRoleOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *IAMRole) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// IAM Role labels.
func (o IAMRoleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IAMRole) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of IAM Role.
func (o IAMRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IAMRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IAM Role permissions.
func (o IAMRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IAMRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// IAM Policy.
func (o IAMRoleOutput) Policy() IAMRolePolicyOutput {
	return o.ApplyT(func(v *IAMRole) IAMRolePolicyOutput { return v.Policy }).(IAMRolePolicyOutput)
}

func (o IAMRoleOutput) Timeouts() IAMRoleTimeoutsPtrOutput {
	return o.ApplyT(func(v *IAMRole) IAMRoleTimeoutsPtrOutput { return v.Timeouts }).(IAMRoleTimeoutsPtrOutput)
}

type IAMRoleArrayOutput struct{ *pulumi.OutputState }

func (IAMRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IAMRole)(nil)).Elem()
}

func (o IAMRoleArrayOutput) ToIAMRoleArrayOutput() IAMRoleArrayOutput {
	return o
}

func (o IAMRoleArrayOutput) ToIAMRoleArrayOutputWithContext(ctx context.Context) IAMRoleArrayOutput {
	return o
}

func (o IAMRoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IAMRole] {
	return pulumix.Output[[]*IAMRole]{
		OutputState: o.OutputState,
	}
}

func (o IAMRoleArrayOutput) Index(i pulumi.IntInput) IAMRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IAMRole {
		return vs[0].([]*IAMRole)[vs[1].(int)]
	}).(IAMRoleOutput)
}

type IAMRoleMapOutput struct{ *pulumi.OutputState }

func (IAMRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IAMRole)(nil)).Elem()
}

func (o IAMRoleMapOutput) ToIAMRoleMapOutput() IAMRoleMapOutput {
	return o
}

func (o IAMRoleMapOutput) ToIAMRoleMapOutputWithContext(ctx context.Context) IAMRoleMapOutput {
	return o
}

func (o IAMRoleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IAMRole] {
	return pulumix.Output[map[string]*IAMRole]{
		OutputState: o.OutputState,
	}
}

func (o IAMRoleMapOutput) MapIndex(k pulumi.StringInput) IAMRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IAMRole {
		return vs[0].(map[string]*IAMRole)[vs[1].(string)]
	}).(IAMRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IAMRoleInput)(nil)).Elem(), &IAMRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAMRoleArrayInput)(nil)).Elem(), IAMRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAMRoleMapInput)(nil)).Elem(), IAMRoleMap{})
	pulumi.RegisterOutputType(IAMRoleOutput{})
	pulumi.RegisterOutputType(IAMRoleArrayOutput{})
	pulumi.RegisterOutputType(IAMRoleMapOutput{})
}
