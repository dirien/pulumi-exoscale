// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package exoscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SKSKubeconfig struct {
	pulumi.CustomResourceState

	// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
	// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
	// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
	// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
	// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
	EarlyRenewalSeconds pulumi.IntPtrOutput `pulumi:"earlyRenewalSeconds"`
	// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
	// Organization field.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// The generated Kubeconfig (YAML content).
	Kubeconfig      pulumi.StringOutput `pulumi:"kubeconfig"`
	ReadyForRenewal pulumi.BoolOutput   `pulumi:"readyForRenewal"`
	// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
	TtlSeconds pulumi.Float64PtrOutput `pulumi:"ttlSeconds"`
	// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
	// field.
	User pulumi.StringOutput `pulumi:"user"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSKSKubeconfig registers a new resource with the given unique name, arguments, and options.
func NewSKSKubeconfig(ctx *pulumi.Context,
	name string, args *SKSKubeconfigArgs, opts ...pulumi.ResourceOption) (*SKSKubeconfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeconfig",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SKSKubeconfig
	err := ctx.RegisterResource("exoscale:index/sKSKubeconfig:SKSKubeconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSKSKubeconfig gets an existing SKSKubeconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSKSKubeconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SKSKubeconfigState, opts ...pulumi.ResourceOption) (*SKSKubeconfig, error) {
	var resource SKSKubeconfig
	err := ctx.ReadResource("exoscale:index/sKSKubeconfig:SKSKubeconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SKSKubeconfig resources.
type skskubeconfigState struct {
	// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
	ClusterId *string `pulumi:"clusterId"`
	// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
	// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
	// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
	// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
	// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
	EarlyRenewalSeconds *int `pulumi:"earlyRenewalSeconds"`
	// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
	// Organization field.
	Groups []string `pulumi:"groups"`
	// The generated Kubeconfig (YAML content).
	Kubeconfig      *string `pulumi:"kubeconfig"`
	ReadyForRenewal *bool   `pulumi:"readyForRenewal"`
	// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
	TtlSeconds *float64 `pulumi:"ttlSeconds"`
	// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
	// field.
	User *string `pulumi:"user"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone *string `pulumi:"zone"`
}

type SKSKubeconfigState struct {
	// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
	ClusterId pulumi.StringPtrInput
	// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
	// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
	// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
	// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
	// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
	EarlyRenewalSeconds pulumi.IntPtrInput
	// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
	// Organization field.
	Groups pulumi.StringArrayInput
	// The generated Kubeconfig (YAML content).
	Kubeconfig      pulumi.StringPtrInput
	ReadyForRenewal pulumi.BoolPtrInput
	// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
	TtlSeconds pulumi.Float64PtrInput
	// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
	// field.
	User pulumi.StringPtrInput
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringPtrInput
}

func (SKSKubeconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*skskubeconfigState)(nil)).Elem()
}

type skskubeconfigArgs struct {
	// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
	ClusterId string `pulumi:"clusterId"`
	// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
	// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
	// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
	// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
	// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
	EarlyRenewalSeconds *int `pulumi:"earlyRenewalSeconds"`
	// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
	// Organization field.
	Groups []string `pulumi:"groups"`
	// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
	TtlSeconds *float64 `pulumi:"ttlSeconds"`
	// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
	// field.
	User string `pulumi:"user"`
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SKSKubeconfig resource.
type SKSKubeconfigArgs struct {
	// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
	ClusterId pulumi.StringInput
	// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
	// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
	// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
	// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
	// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
	EarlyRenewalSeconds pulumi.IntPtrInput
	// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
	// Organization field.
	Groups pulumi.StringArrayInput
	// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
	TtlSeconds pulumi.Float64PtrInput
	// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
	// field.
	User pulumi.StringInput
	// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
	Zone pulumi.StringInput
}

func (SKSKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*skskubeconfigArgs)(nil)).Elem()
}

type SKSKubeconfigInput interface {
	pulumi.Input

	ToSKSKubeconfigOutput() SKSKubeconfigOutput
	ToSKSKubeconfigOutputWithContext(ctx context.Context) SKSKubeconfigOutput
}

func (*SKSKubeconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSKubeconfig)(nil)).Elem()
}

func (i *SKSKubeconfig) ToSKSKubeconfigOutput() SKSKubeconfigOutput {
	return i.ToSKSKubeconfigOutputWithContext(context.Background())
}

func (i *SKSKubeconfig) ToSKSKubeconfigOutputWithContext(ctx context.Context) SKSKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSKubeconfigOutput)
}

// SKSKubeconfigArrayInput is an input type that accepts SKSKubeconfigArray and SKSKubeconfigArrayOutput values.
// You can construct a concrete instance of `SKSKubeconfigArrayInput` via:
//
//	SKSKubeconfigArray{ SKSKubeconfigArgs{...} }
type SKSKubeconfigArrayInput interface {
	pulumi.Input

	ToSKSKubeconfigArrayOutput() SKSKubeconfigArrayOutput
	ToSKSKubeconfigArrayOutputWithContext(context.Context) SKSKubeconfigArrayOutput
}

type SKSKubeconfigArray []SKSKubeconfigInput

func (SKSKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSKubeconfig)(nil)).Elem()
}

func (i SKSKubeconfigArray) ToSKSKubeconfigArrayOutput() SKSKubeconfigArrayOutput {
	return i.ToSKSKubeconfigArrayOutputWithContext(context.Background())
}

func (i SKSKubeconfigArray) ToSKSKubeconfigArrayOutputWithContext(ctx context.Context) SKSKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSKubeconfigArrayOutput)
}

// SKSKubeconfigMapInput is an input type that accepts SKSKubeconfigMap and SKSKubeconfigMapOutput values.
// You can construct a concrete instance of `SKSKubeconfigMapInput` via:
//
//	SKSKubeconfigMap{ "key": SKSKubeconfigArgs{...} }
type SKSKubeconfigMapInput interface {
	pulumi.Input

	ToSKSKubeconfigMapOutput() SKSKubeconfigMapOutput
	ToSKSKubeconfigMapOutputWithContext(context.Context) SKSKubeconfigMapOutput
}

type SKSKubeconfigMap map[string]SKSKubeconfigInput

func (SKSKubeconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSKubeconfig)(nil)).Elem()
}

func (i SKSKubeconfigMap) ToSKSKubeconfigMapOutput() SKSKubeconfigMapOutput {
	return i.ToSKSKubeconfigMapOutputWithContext(context.Background())
}

func (i SKSKubeconfigMap) ToSKSKubeconfigMapOutputWithContext(ctx context.Context) SKSKubeconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKSKubeconfigMapOutput)
}

type SKSKubeconfigOutput struct{ *pulumi.OutputState }

func (SKSKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKSKubeconfig)(nil)).Elem()
}

func (o SKSKubeconfigOutput) ToSKSKubeconfigOutput() SKSKubeconfigOutput {
	return o
}

func (o SKSKubeconfigOutput) ToSKSKubeconfigOutputWithContext(ctx context.Context) SKSKubeconfigOutput {
	return o
}

// The parent [exoscale_sks_cluster](./sks_cluster.md) ID.
func (o SKSKubeconfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// If set, the resource will consider the Kubeconfig to have expired the given number of seconds before its actual CA
// certificate or client certificate expiry time. This can be useful to deploy an updated Kubeconfig in advance of the
// expiration of its internal current certificate. Note however that the old certificate remains valid until its true
// expiration time since this resource does not (and cannot) support revocation. Also note this advance update can only
// take place if the Terraform configuration is applied during the early renewal period (seconds; default: 0).
func (o SKSKubeconfigOutput) EarlyRenewalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.IntPtrOutput { return v.EarlyRenewalSeconds }).(pulumi.IntPtrOutput)
}

// Group names in the generated Kubeconfig. The certificate present in the Kubeconfig will have these roles set in the
// Organization field.
func (o SKSKubeconfigOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// The generated Kubeconfig (YAML content).
func (o SKSKubeconfigOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

func (o SKSKubeconfigOutput) ReadyForRenewal() pulumi.BoolOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.BoolOutput { return v.ReadyForRenewal }).(pulumi.BoolOutput)
}

// The Time-to-Live of the Kubeconfig, after which it will expire / become invalid (seconds; default: 2592000 = 30 days).
func (o SKSKubeconfigOutput) TtlSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.Float64PtrOutput { return v.TtlSeconds }).(pulumi.Float64PtrOutput)
}

// User name in the generated Kubeconfig. The certificate present in the Kubeconfig will also have this name set for the CN
// field.
func (o SKSKubeconfigOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// The Exoscale [Zone](https://www.exoscale.com/datacenters/) name.
func (o SKSKubeconfigOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *SKSKubeconfig) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SKSKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (SKSKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SKSKubeconfig)(nil)).Elem()
}

func (o SKSKubeconfigArrayOutput) ToSKSKubeconfigArrayOutput() SKSKubeconfigArrayOutput {
	return o
}

func (o SKSKubeconfigArrayOutput) ToSKSKubeconfigArrayOutputWithContext(ctx context.Context) SKSKubeconfigArrayOutput {
	return o
}

func (o SKSKubeconfigArrayOutput) Index(i pulumi.IntInput) SKSKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SKSKubeconfig {
		return vs[0].([]*SKSKubeconfig)[vs[1].(int)]
	}).(SKSKubeconfigOutput)
}

type SKSKubeconfigMapOutput struct{ *pulumi.OutputState }

func (SKSKubeconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SKSKubeconfig)(nil)).Elem()
}

func (o SKSKubeconfigMapOutput) ToSKSKubeconfigMapOutput() SKSKubeconfigMapOutput {
	return o
}

func (o SKSKubeconfigMapOutput) ToSKSKubeconfigMapOutputWithContext(ctx context.Context) SKSKubeconfigMapOutput {
	return o
}

func (o SKSKubeconfigMapOutput) MapIndex(k pulumi.StringInput) SKSKubeconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SKSKubeconfig {
		return vs[0].(map[string]*SKSKubeconfig)[vs[1].(string)]
	}).(SKSKubeconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SKSKubeconfigInput)(nil)).Elem(), &SKSKubeconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSKubeconfigArrayInput)(nil)).Elem(), SKSKubeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SKSKubeconfigMapInput)(nil)).Elem(), SKSKubeconfigMap{})
	pulumi.RegisterOutputType(SKSKubeconfigOutput{})
	pulumi.RegisterOutputType(SKSKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(SKSKubeconfigMapOutput{})
}
